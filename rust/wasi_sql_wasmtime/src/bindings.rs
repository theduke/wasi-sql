pub mod sql_v1_alpha1 {
    #[allow(unused_imports)]
    use wit_bindgen_wasmtime::{anyhow, wasmtime};
    #[derive(Clone)]
    pub enum ValueParam<'a> {
        Null,
        Boolean(bool),
        Int8(i8),
        Int16(i16),
        Int32(i32),
        Int64(i64),
        Uint8(u8),
        Uint16(u16),
        Uint32(u32),
        Uint64(u64),
        Floating32(f32),
        Floating64(f64),
        Str(&'a str),
        Bytes(&'a [u8]),
        Raw(&'a [u8]),
    }
    impl<'a> std::fmt::Debug for ValueParam<'a> {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            match self {
                ValueParam::Null => f.debug_tuple("ValueParam::Null").finish(),
                ValueParam::Boolean(e) => f.debug_tuple("ValueParam::Boolean").field(e).finish(),
                ValueParam::Int8(e) => f.debug_tuple("ValueParam::Int8").field(e).finish(),
                ValueParam::Int16(e) => f.debug_tuple("ValueParam::Int16").field(e).finish(),
                ValueParam::Int32(e) => f.debug_tuple("ValueParam::Int32").field(e).finish(),
                ValueParam::Int64(e) => f.debug_tuple("ValueParam::Int64").field(e).finish(),
                ValueParam::Uint8(e) => f.debug_tuple("ValueParam::Uint8").field(e).finish(),
                ValueParam::Uint16(e) => f.debug_tuple("ValueParam::Uint16").field(e).finish(),
                ValueParam::Uint32(e) => f.debug_tuple("ValueParam::Uint32").field(e).finish(),
                ValueParam::Uint64(e) => f.debug_tuple("ValueParam::Uint64").field(e).finish(),
                ValueParam::Floating32(e) => {
                    f.debug_tuple("ValueParam::Floating32").field(e).finish()
                }
                ValueParam::Floating64(e) => {
                    f.debug_tuple("ValueParam::Floating64").field(e).finish()
                }
                ValueParam::Str(e) => f.debug_tuple("ValueParam::Str").field(e).finish(),
                ValueParam::Bytes(e) => f.debug_tuple("ValueParam::Bytes").field(e).finish(),
                ValueParam::Raw(e) => f.debug_tuple("ValueParam::Raw").field(e).finish(),
            }
        }
    }
    #[derive(Clone)]
    pub enum ValueResult {
        Null,
        Boolean(bool),
        Int8(i8),
        Int16(i16),
        Int32(i32),
        Int64(i64),
        Uint8(u8),
        Uint16(u16),
        Uint32(u32),
        Uint64(u64),
        Floating32(f32),
        Floating64(f64),
        Str(String),
        Bytes(Vec<u8>),
        Raw(Vec<u8>),
    }
    impl std::fmt::Debug for ValueResult {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            match self {
                ValueResult::Null => f.debug_tuple("ValueResult::Null").finish(),
                ValueResult::Boolean(e) => f.debug_tuple("ValueResult::Boolean").field(e).finish(),
                ValueResult::Int8(e) => f.debug_tuple("ValueResult::Int8").field(e).finish(),
                ValueResult::Int16(e) => f.debug_tuple("ValueResult::Int16").field(e).finish(),
                ValueResult::Int32(e) => f.debug_tuple("ValueResult::Int32").field(e).finish(),
                ValueResult::Int64(e) => f.debug_tuple("ValueResult::Int64").field(e).finish(),
                ValueResult::Uint8(e) => f.debug_tuple("ValueResult::Uint8").field(e).finish(),
                ValueResult::Uint16(e) => f.debug_tuple("ValueResult::Uint16").field(e).finish(),
                ValueResult::Uint32(e) => f.debug_tuple("ValueResult::Uint32").field(e).finish(),
                ValueResult::Uint64(e) => f.debug_tuple("ValueResult::Uint64").field(e).finish(),
                ValueResult::Floating32(e) => {
                    f.debug_tuple("ValueResult::Floating32").field(e).finish()
                }
                ValueResult::Floating64(e) => {
                    f.debug_tuple("ValueResult::Floating64").field(e).finish()
                }
                ValueResult::Str(e) => f.debug_tuple("ValueResult::Str").field(e).finish(),
                ValueResult::Bytes(e) => f.debug_tuple("ValueResult::Bytes").field(e).finish(),
                ValueResult::Raw(e) => f.debug_tuple("ValueResult::Raw").field(e).finish(),
            }
        }
    }
    #[derive(Clone)]
    pub struct ColumnMeta {
        pub type_name: String,
        pub name: String,
    }
    impl std::fmt::Debug for ColumnMeta {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            f.debug_struct("ColumnMeta")
                .field("type-name", &self.type_name)
                .field("name", &self.name)
                .finish()
        }
    }
    #[derive(Clone)]
    pub struct ValueMapItemParam<'a> {
        pub key: &'a str,
        pub value: ValueParam<'a>,
    }
    impl<'a> std::fmt::Debug for ValueMapItemParam<'a> {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            f.debug_struct("ValueMapItemParam")
                .field("key", &self.key)
                .field("value", &self.value)
                .finish()
        }
    }
    #[derive(Clone)]
    pub struct ValueMapItemResult {
        pub key: String,
        pub value: ValueResult,
    }
    impl std::fmt::Debug for ValueMapItemResult {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            f.debug_struct("ValueMapItemResult")
                .field("key", &self.key)
                .field("value", &self.value)
                .finish()
        }
    }
    pub type ValueMapParam<'a> = Vec<ValueMapItemParam<'a>>;
    pub type ValueMapResult = Vec<ValueMapItemResult>;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct PoolOptions {
        pub max_connections: Option<u32>,
        pub idle_timeout: Option<u32>,
    }
    impl std::fmt::Debug for PoolOptions {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            f.debug_struct("PoolOptions")
                .field("max-connections", &self.max_connections)
                .field("idle-timeout", &self.idle_timeout)
                .finish()
        }
    }
    #[derive(Clone)]
    pub struct SqlError {
        pub code_numeric: Option<i32>,
        pub code_text: Option<String>,
        pub message: String,
        pub extra: Option<ValueMapResult>,
    }
    impl std::fmt::Debug for SqlError {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            f.debug_struct("SqlError")
                .field("code-numeric", &self.code_numeric)
                .field("code-text", &self.code_text)
                .field("message", &self.message)
                .field("extra", &self.extra)
                .finish()
        }
    }
    pub trait SqlV1Alpha1: Sized {
        type Connection: std::fmt::Debug;
        type Db: std::fmt::Debug;
        type Driver: std::fmt::Debug;
        type PreparedStatement: std::fmt::Debug;
        type Row: std::fmt::Debug;
        type Rows: std::fmt::Debug;
        fn load_driver(&mut self, driver: &str) -> Result<Self::Driver, SqlError>;

        fn driver_connect_uri(
            &mut self,
            self_: &Self::Driver,
            uri: &str,
        ) -> Result<Self::Connection, SqlError>;

        fn driver_connect_args(
            &mut self,
            self_: &Self::Driver,
            args: ValueMapParam<'_>,
        ) -> Result<Self::Connection, SqlError>;

        fn driver_open_pool_uri(
            &mut self,
            self_: &Self::Driver,
            uri: &str,
            options: Option<PoolOptions>,
        ) -> Result<Self::Db, SqlError>;

        fn driver_open_pool_args(
            &mut self,
            self_: &Self::Driver,
            args: ValueMapParam<'_>,
            options: Option<PoolOptions>,
        ) -> Result<Self::Db, SqlError>;

        fn db_connection(&mut self, self_: &Self::Db) -> Result<Self::Connection, SqlError>;

        fn db_execute(
            &mut self,
            self_: &Self::Db,
            query: &str,
            args: Vec<ValueParam<'_>>,
        ) -> Result<(), SqlError>;

        fn db_query(
            &mut self,
            self_: &Self::Db,
            query: &str,
            args: Vec<ValueParam<'_>>,
        ) -> Result<Self::Rows, SqlError>;

        fn connection_execute(
            &mut self,
            self_: &Self::Connection,
            query: &str,
            args: Vec<ValueParam<'_>>,
        ) -> Result<(), SqlError>;

        fn connection_query(
            &mut self,
            self_: &Self::Connection,
            query: &str,
            args: Vec<ValueParam<'_>>,
        ) -> Result<Self::Rows, SqlError>;

        fn connection_prepare(
            &mut self,
            self_: &Self::Connection,
            query: &str,
        ) -> Result<Self::PreparedStatement, SqlError>;

        fn rows_columns(&mut self, self_: &Self::Rows) -> Result<Vec<ColumnMeta>, SqlError>;

        fn rows_next(&mut self, self_: &Self::Rows) -> Result<Option<Self::Row>, SqlError>;

        fn rows_next_values(
            &mut self,
            self_: &Self::Rows,
        ) -> Result<Option<Vec<ValueResult>>, SqlError>;

        fn rows_values(&mut self, self_: &Self::Rows) -> Result<Vec<Vec<ValueResult>>, SqlError>;

        fn rows_close(&mut self, self_: &Self::Rows) -> Result<(), SqlError>;

        fn row_get_bool(&mut self, self_: &Self::Row, index: u32) -> Result<bool, SqlError>;

        fn row_get_int8(&mut self, self_: &Self::Row, index: u32) -> Result<i8, SqlError>;

        fn row_get_int16(&mut self, self_: &Self::Row, index: u32) -> Result<i16, SqlError>;

        fn row_get_int32(&mut self, self_: &Self::Row, index: u32) -> Result<i32, SqlError>;

        fn row_get_int64(&mut self, self_: &Self::Row, index: u64) -> Result<i64, SqlError>;

        fn row_get_uint8(&mut self, self_: &Self::Row, index: u32) -> Result<u8, SqlError>;

        fn row_get_uint16(&mut self, self_: &Self::Row, index: u32) -> Result<u16, SqlError>;

        fn row_get_uint32(&mut self, self_: &Self::Row, index: u32) -> Result<u32, SqlError>;

        fn row_get_uint64(&mut self, self_: &Self::Row, index: u64) -> Result<u64, SqlError>;

        fn row_get_float32(&mut self, self_: &Self::Row, index: u32) -> Result<f32, SqlError>;

        fn row_get_float64(&mut self, self_: &Self::Row, index: u32) -> Result<f64, SqlError>;

        fn row_get_string(&mut self, self_: &Self::Row, index: u32) -> Result<String, SqlError>;

        fn row_get_bytes(&mut self, self_: &Self::Row, index: u32) -> Result<Vec<u8>, SqlError>;

        fn row_get_raw(&mut self, self_: &Self::Row, index: u32) -> Result<Vec<u8>, SqlError>;

        fn row_get_optional_bool(
            &mut self,
            self_: &Self::Row,
            index: u32,
        ) -> Result<Option<bool>, SqlError>;

        fn row_get_optional_int8(
            &mut self,
            self_: &Self::Row,
            index: u32,
        ) -> Result<Option<i8>, SqlError>;

        fn row_get_optional_int16(
            &mut self,
            self_: &Self::Row,
            index: u32,
        ) -> Result<Option<i16>, SqlError>;

        fn row_get_optional_int32(
            &mut self,
            self_: &Self::Row,
            index: u32,
        ) -> Result<Option<i32>, SqlError>;

        fn row_get_optional_int64(
            &mut self,
            self_: &Self::Row,
            index: u64,
        ) -> Result<Option<i64>, SqlError>;

        fn row_get_optional_uint8(
            &mut self,
            self_: &Self::Row,
            index: u32,
        ) -> Result<Option<u8>, SqlError>;

        fn row_get_optional_uint16(
            &mut self,
            self_: &Self::Row,
            index: u32,
        ) -> Result<Option<u16>, SqlError>;

        fn row_get_optional_uint32(
            &mut self,
            self_: &Self::Row,
            index: u32,
        ) -> Result<Option<u32>, SqlError>;

        fn row_get_optional_uint64(
            &mut self,
            self_: &Self::Row,
            index: u64,
        ) -> Result<Option<u64>, SqlError>;

        fn row_get_optional_float32(
            &mut self,
            self_: &Self::Row,
            index: u32,
        ) -> Result<Option<f32>, SqlError>;

        fn row_get_optional_float64(
            &mut self,
            self_: &Self::Row,
            index: u32,
        ) -> Result<Option<f64>, SqlError>;

        fn row_get_optional_string(
            &mut self,
            self_: &Self::Row,
            index: u32,
        ) -> Result<Option<String>, SqlError>;

        fn row_get_optional_bytes(
            &mut self,
            self_: &Self::Row,
            index: u32,
        ) -> Result<Option<Vec<u8>>, SqlError>;

        fn row_get_optional_raw(
            &mut self,
            self_: &Self::Row,
            index: u32,
        ) -> Result<Option<Vec<u8>>, SqlError>;

        fn row_get_value(&mut self, self_: &Self::Row, index: u32)
            -> Result<ValueResult, SqlError>;

        fn prepared_statement_execute(
            &mut self,
            self_: &Self::PreparedStatement,
            args: Vec<ValueParam<'_>>,
        ) -> Result<(), SqlError>;

        fn prepared_statement_query(
            &mut self,
            self_: &Self::PreparedStatement,
            args: Vec<ValueParam<'_>>,
        ) -> Result<Self::Rows, SqlError>;

        fn drop_connection(&mut self, state: Self::Connection) {
            drop(state);
        }
        fn drop_db(&mut self, state: Self::Db) {
            drop(state);
        }
        fn drop_driver(&mut self, state: Self::Driver) {
            drop(state);
        }
        fn drop_prepared_statement(&mut self, state: Self::PreparedStatement) {
            drop(state);
        }
        fn drop_row(&mut self, state: Self::Row) {
            drop(state);
        }
        fn drop_rows(&mut self, state: Self::Rows) {
            drop(state);
        }
    }

    pub struct SqlV1Alpha1Tables<T: SqlV1Alpha1> {
        pub(crate) connection_table: wit_bindgen_wasmtime::Table<T::Connection>,
        pub(crate) db_table: wit_bindgen_wasmtime::Table<T::Db>,
        pub(crate) driver_table: wit_bindgen_wasmtime::Table<T::Driver>,
        pub(crate) prepared_statement_table: wit_bindgen_wasmtime::Table<T::PreparedStatement>,
        pub(crate) row_table: wit_bindgen_wasmtime::Table<T::Row>,
        pub(crate) rows_table: wit_bindgen_wasmtime::Table<T::Rows>,
    }
    impl<T: SqlV1Alpha1> Default for SqlV1Alpha1Tables<T> {
        fn default() -> Self {
            Self {
                connection_table: Default::default(),
                db_table: Default::default(),
                driver_table: Default::default(),
                prepared_statement_table: Default::default(),
                row_table: Default::default(),
                rows_table: Default::default(),
            }
        }
    }
    pub fn add_to_linker<T, U>(
        linker: &mut wasmtime::Linker<T>,
        get: impl Fn(&mut T) -> (&mut U, &mut SqlV1Alpha1Tables<U>) + Send + Sync + Copy + 'static,
    ) -> anyhow::Result<()>
    where
        U: SqlV1Alpha1,
    {
        use wit_bindgen_wasmtime::rt::get_func;
        use wit_bindgen_wasmtime::rt::get_memory;
        linker.func_wrap(
            "sql_v1_alpha1",
            "load-driver",
            move |mut caller: wasmtime::Caller<'_, T>, arg0: i32, arg1: i32, arg2: i32| {
                let func = get_func(&mut caller, "canonical_abi_realloc")?;
                let func_canonical_abi_realloc =
                    func.typed::<(i32, i32, i32, i32), i32, _>(&caller)?;
                let memory = &get_memory(&mut caller, "memory")?;
                let (mem, data) = memory.data_and_store_mut(&mut caller);
                let mut _bc = wit_bindgen_wasmtime::BorrowChecker::new(mem);
                let host = get(data);
                let (host, _tables) = host;
                let ptr0 = arg0;
                let len0 = arg1;
                let param0 = _bc.slice_str(ptr0, len0)?;
                let result = host.load_driver(param0);
                match result {
                    Ok(e) => {
                        let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                        let (_, _tables) = get(data);
                        caller_memory
                            .store(arg2 + 0, wit_bindgen_wasmtime::rt::as_i32(0i32) as u8)?;
                        caller_memory.store(
                            arg2 + 4,
                            wit_bindgen_wasmtime::rt::as_i32(_tables.driver_table.insert(e) as i32),
                        )?;
                    }
                    Err(e) => {
                        let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                        let (_, _tables) = get(data);
                        caller_memory
                            .store(arg2 + 0, wit_bindgen_wasmtime::rt::as_i32(1i32) as u8)?;
                        let SqlError {
                            code_numeric: code_numeric1,
                            code_text: code_text1,
                            message: message1,
                            extra: extra1,
                        } = e;
                        match code_numeric1 {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg2 + 4,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                caller_memory.store(
                                    arg2 + 8,
                                    wit_bindgen_wasmtime::rt::as_i32(
                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                    ),
                                )?;
                            }
                            None => {
                                let e = ();
                                {
                                    caller_memory.store(
                                        arg2 + 4,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                        match code_text1 {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg2 + 12,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                let vec2 = e;
                                let ptr2 = func_canonical_abi_realloc
                                    .call(&mut caller, (0, 0, 1, vec2.len() as i32))?;
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store_many(ptr2, vec2.as_bytes())?;
                                caller_memory.store(
                                    arg2 + 20,
                                    wit_bindgen_wasmtime::rt::as_i32(vec2.len() as i32),
                                )?;
                                caller_memory
                                    .store(arg2 + 16, wit_bindgen_wasmtime::rt::as_i32(ptr2))?;
                            }
                            None => {
                                let e = ();
                                {
                                    let (caller_memory, data) =
                                        memory.data_and_store_mut(&mut caller);
                                    let (_, _tables) = get(data);
                                    caller_memory.store(
                                        arg2 + 12,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                        let vec3 = message1;
                        let ptr3 = func_canonical_abi_realloc
                            .call(&mut caller, (0, 0, 1, vec3.len() as i32))?;
                        let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                        let (_, _tables) = get(data);
                        caller_memory.store_many(ptr3, vec3.as_bytes())?;
                        caller_memory.store(
                            arg2 + 28,
                            wit_bindgen_wasmtime::rt::as_i32(vec3.len() as i32),
                        )?;
                        caller_memory.store(arg2 + 24, wit_bindgen_wasmtime::rt::as_i32(ptr3))?;
                        match extra1 {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg2 + 32,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                let vec9 = e;
                                let len9 = vec9.len() as i32;
                                let result9 = func_canonical_abi_realloc
                                    .call(&mut caller, (0, 0, 8, len9 * 24))?;
                                for (i, e) in vec9.into_iter().enumerate() {
                                    let base = result9 + (i as i32) * 24;
                                    {
                                        let ValueMapItemResult {
                                            key: key4,
                                            value: value4,
                                        } = e;
                                        let vec5 = key4;
                                        let ptr5 = func_canonical_abi_realloc
                                            .call(&mut caller, (0, 0, 1, vec5.len() as i32))?;
                                        let (caller_memory, data) =
                                            memory.data_and_store_mut(&mut caller);
                                        let (_, _tables) = get(data);
                                        caller_memory.store_many(ptr5, vec5.as_bytes())?;
                                        caller_memory.store(
                                            base + 4,
                                            wit_bindgen_wasmtime::rt::as_i32(vec5.len() as i32),
                                        )?;
                                        caller_memory.store(
                                            base + 0,
                                            wit_bindgen_wasmtime::rt::as_i32(ptr5),
                                        )?;
                                        match value4 {
                                            ValueResult::Null => {
                                                let e = ();
                                                {
                                                    caller_memory.store(
                                                        base + 8,
                                                        wit_bindgen_wasmtime::rt::as_i32(0i32)
                                                            as u8,
                                                    )?;
                                                    let () = e;
                                                }
                                            }
                                            ValueResult::Boolean(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(match e {
                                                        true => 1,
                                                        false => 0,
                                                    })
                                                        as u8,
                                                )?;
                                            }
                                            ValueResult::Int8(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(2i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u8,
                                                )?;
                                            }
                                            ValueResult::Int16(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(3i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u16,
                                                )?;
                                            }
                                            ValueResult::Int32(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(4i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Int64(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(5i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i64(
                                                        wit_bindgen_wasmtime::rt::as_i64(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Uint8(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(6i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u8,
                                                )?;
                                            }
                                            ValueResult::Uint16(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(7i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u16,
                                                )?;
                                            }
                                            ValueResult::Uint32(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(8i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Uint64(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(9i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i64(
                                                        wit_bindgen_wasmtime::rt::as_i64(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Floating32(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(10i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_f32(e),
                                                )?;
                                            }
                                            ValueResult::Floating64(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(11i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_f64(e),
                                                )?;
                                            }
                                            ValueResult::Str(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(12i32) as u8,
                                                )?;
                                                let vec6 = e;
                                                let ptr6 = func_canonical_abi_realloc.call(
                                                    &mut caller,
                                                    (0, 0, 1, vec6.len() as i32),
                                                )?;
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store_many(ptr6, vec6.as_bytes())?;
                                                caller_memory.store(
                                                    base + 20,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        vec6.len() as i32
                                                    ),
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(ptr6),
                                                )?;
                                            }
                                            ValueResult::Bytes(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(13i32) as u8,
                                                )?;
                                                let vec7 = e;
                                                let ptr7 = func_canonical_abi_realloc.call(
                                                    &mut caller,
                                                    (0, 0, 1, (vec7.len() as i32) * 1),
                                                )?;
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store_many(ptr7, &vec7)?;
                                                caller_memory.store(
                                                    base + 20,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        vec7.len() as i32
                                                    ),
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(ptr7),
                                                )?;
                                            }
                                            ValueResult::Raw(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(14i32) as u8,
                                                )?;
                                                let vec8 = e;
                                                let ptr8 = func_canonical_abi_realloc.call(
                                                    &mut caller,
                                                    (0, 0, 1, (vec8.len() as i32) * 1),
                                                )?;
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store_many(ptr8, &vec8)?;
                                                caller_memory.store(
                                                    base + 20,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        vec8.len() as i32
                                                    ),
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(ptr8),
                                                )?;
                                            }
                                        };
                                    }
                                }
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory
                                    .store(arg2 + 40, wit_bindgen_wasmtime::rt::as_i32(len9))?;
                                caller_memory
                                    .store(arg2 + 36, wit_bindgen_wasmtime::rt::as_i32(result9))?;
                            }
                            None => {
                                let e = ();
                                {
                                    caller_memory.store(
                                        arg2 + 32,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                    }
                };
                Ok(())
            },
        )?;
        linker.func_wrap(
            "sql_v1_alpha1",
            "driver::connect-uri",
            move |mut caller: wasmtime::Caller<'_, T>,
                  arg0: i32,
                  arg1: i32,
                  arg2: i32,
                  arg3: i32| {
                let func = get_func(&mut caller, "canonical_abi_realloc")?;
                let func_canonical_abi_realloc =
                    func.typed::<(i32, i32, i32, i32), i32, _>(&caller)?;
                let memory = &get_memory(&mut caller, "memory")?;
                let (mem, data) = memory.data_and_store_mut(&mut caller);
                let mut _bc = wit_bindgen_wasmtime::BorrowChecker::new(mem);
                let host = get(data);
                let (host, _tables) = host;
                let ptr0 = arg1;
                let len0 = arg2;
                let param0 = _tables
                    .driver_table
                    .get((arg0) as u32)
                    .ok_or_else(|| wasmtime::Trap::new("invalid handle index"))?;
                let param1 = _bc.slice_str(ptr0, len0)?;
                let result = host.driver_connect_uri(param0, param1);
                match result {
                    Ok(e) => {
                        let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                        let (_, _tables) = get(data);
                        caller_memory
                            .store(arg3 + 0, wit_bindgen_wasmtime::rt::as_i32(0i32) as u8)?;
                        caller_memory.store(
                            arg3 + 4,
                            wit_bindgen_wasmtime::rt::as_i32(
                                _tables.connection_table.insert(e) as i32
                            ),
                        )?;
                    }
                    Err(e) => {
                        let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                        let (_, _tables) = get(data);
                        caller_memory
                            .store(arg3 + 0, wit_bindgen_wasmtime::rt::as_i32(1i32) as u8)?;
                        let SqlError {
                            code_numeric: code_numeric1,
                            code_text: code_text1,
                            message: message1,
                            extra: extra1,
                        } = e;
                        match code_numeric1 {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg3 + 4,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                caller_memory.store(
                                    arg3 + 8,
                                    wit_bindgen_wasmtime::rt::as_i32(
                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                    ),
                                )?;
                            }
                            None => {
                                let e = ();
                                {
                                    caller_memory.store(
                                        arg3 + 4,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                        match code_text1 {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg3 + 12,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                let vec2 = e;
                                let ptr2 = func_canonical_abi_realloc
                                    .call(&mut caller, (0, 0, 1, vec2.len() as i32))?;
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store_many(ptr2, vec2.as_bytes())?;
                                caller_memory.store(
                                    arg3 + 20,
                                    wit_bindgen_wasmtime::rt::as_i32(vec2.len() as i32),
                                )?;
                                caller_memory
                                    .store(arg3 + 16, wit_bindgen_wasmtime::rt::as_i32(ptr2))?;
                            }
                            None => {
                                let e = ();
                                {
                                    let (caller_memory, data) =
                                        memory.data_and_store_mut(&mut caller);
                                    let (_, _tables) = get(data);
                                    caller_memory.store(
                                        arg3 + 12,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                        let vec3 = message1;
                        let ptr3 = func_canonical_abi_realloc
                            .call(&mut caller, (0, 0, 1, vec3.len() as i32))?;
                        let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                        let (_, _tables) = get(data);
                        caller_memory.store_many(ptr3, vec3.as_bytes())?;
                        caller_memory.store(
                            arg3 + 28,
                            wit_bindgen_wasmtime::rt::as_i32(vec3.len() as i32),
                        )?;
                        caller_memory.store(arg3 + 24, wit_bindgen_wasmtime::rt::as_i32(ptr3))?;
                        match extra1 {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg3 + 32,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                let vec9 = e;
                                let len9 = vec9.len() as i32;
                                let result9 = func_canonical_abi_realloc
                                    .call(&mut caller, (0, 0, 8, len9 * 24))?;
                                for (i, e) in vec9.into_iter().enumerate() {
                                    let base = result9 + (i as i32) * 24;
                                    {
                                        let ValueMapItemResult {
                                            key: key4,
                                            value: value4,
                                        } = e;
                                        let vec5 = key4;
                                        let ptr5 = func_canonical_abi_realloc
                                            .call(&mut caller, (0, 0, 1, vec5.len() as i32))?;
                                        let (caller_memory, data) =
                                            memory.data_and_store_mut(&mut caller);
                                        let (_, _tables) = get(data);
                                        caller_memory.store_many(ptr5, vec5.as_bytes())?;
                                        caller_memory.store(
                                            base + 4,
                                            wit_bindgen_wasmtime::rt::as_i32(vec5.len() as i32),
                                        )?;
                                        caller_memory.store(
                                            base + 0,
                                            wit_bindgen_wasmtime::rt::as_i32(ptr5),
                                        )?;
                                        match value4 {
                                            ValueResult::Null => {
                                                let e = ();
                                                {
                                                    caller_memory.store(
                                                        base + 8,
                                                        wit_bindgen_wasmtime::rt::as_i32(0i32)
                                                            as u8,
                                                    )?;
                                                    let () = e;
                                                }
                                            }
                                            ValueResult::Boolean(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(match e {
                                                        true => 1,
                                                        false => 0,
                                                    })
                                                        as u8,
                                                )?;
                                            }
                                            ValueResult::Int8(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(2i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u8,
                                                )?;
                                            }
                                            ValueResult::Int16(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(3i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u16,
                                                )?;
                                            }
                                            ValueResult::Int32(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(4i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Int64(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(5i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i64(
                                                        wit_bindgen_wasmtime::rt::as_i64(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Uint8(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(6i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u8,
                                                )?;
                                            }
                                            ValueResult::Uint16(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(7i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u16,
                                                )?;
                                            }
                                            ValueResult::Uint32(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(8i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Uint64(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(9i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i64(
                                                        wit_bindgen_wasmtime::rt::as_i64(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Floating32(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(10i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_f32(e),
                                                )?;
                                            }
                                            ValueResult::Floating64(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(11i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_f64(e),
                                                )?;
                                            }
                                            ValueResult::Str(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(12i32) as u8,
                                                )?;
                                                let vec6 = e;
                                                let ptr6 = func_canonical_abi_realloc.call(
                                                    &mut caller,
                                                    (0, 0, 1, vec6.len() as i32),
                                                )?;
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store_many(ptr6, vec6.as_bytes())?;
                                                caller_memory.store(
                                                    base + 20,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        vec6.len() as i32
                                                    ),
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(ptr6),
                                                )?;
                                            }
                                            ValueResult::Bytes(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(13i32) as u8,
                                                )?;
                                                let vec7 = e;
                                                let ptr7 = func_canonical_abi_realloc.call(
                                                    &mut caller,
                                                    (0, 0, 1, (vec7.len() as i32) * 1),
                                                )?;
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store_many(ptr7, &vec7)?;
                                                caller_memory.store(
                                                    base + 20,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        vec7.len() as i32
                                                    ),
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(ptr7),
                                                )?;
                                            }
                                            ValueResult::Raw(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(14i32) as u8,
                                                )?;
                                                let vec8 = e;
                                                let ptr8 = func_canonical_abi_realloc.call(
                                                    &mut caller,
                                                    (0, 0, 1, (vec8.len() as i32) * 1),
                                                )?;
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store_many(ptr8, &vec8)?;
                                                caller_memory.store(
                                                    base + 20,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        vec8.len() as i32
                                                    ),
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(ptr8),
                                                )?;
                                            }
                                        };
                                    }
                                }
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory
                                    .store(arg3 + 40, wit_bindgen_wasmtime::rt::as_i32(len9))?;
                                caller_memory
                                    .store(arg3 + 36, wit_bindgen_wasmtime::rt::as_i32(result9))?;
                            }
                            None => {
                                let e = ();
                                {
                                    caller_memory.store(
                                        arg3 + 32,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                    }
                };
                Ok(())
            },
        )?;
        linker.func_wrap(
            "sql_v1_alpha1",
            "driver::connect-args",
            move |mut caller: wasmtime::Caller<'_, T>,
                  arg0: i32,
                  arg1: i32,
                  arg2: i32,
                  arg3: i32| {
                let func = get_func(&mut caller, "canonical_abi_realloc")?;
                let func_canonical_abi_realloc =
                    func.typed::<(i32, i32, i32, i32), i32, _>(&caller)?;
                let memory = &get_memory(&mut caller, "memory")?;
                let (mem, data) = memory.data_and_store_mut(&mut caller);
                let mut _bc = wit_bindgen_wasmtime::BorrowChecker::new(mem);
                let host = get(data);
                let (host, _tables) = host;
                let len24 = arg2;
                let base24 = arg1;
                let mut result24 = Vec::with_capacity(len24 as usize);
                for i in 0..len24 {
                    let base = base24 + i * 24;
                    result24.push({
                        let load0 = _bc.load::<i32>(base + 0)?;
                        let load1 = _bc.load::<i32>(base + 4)?;
                        let ptr2 = load0;
                        let len2 = load1;
                        let load3 = _bc.load::<u8>(base + 8)?;
                        ValueMapItemParam {
                            key: _bc.slice_str(ptr2, len2)?,
                            value: match i32::from(load3) {
                                0 => ValueParam::Null,
                                1 => ValueParam::Boolean({
                                    let load4 = _bc.load::<u8>(base + 16)?;
                                    match i32::from(load4) {
                                        0 => false,
                                        1 => true,
                                        _ => return Err(invalid_variant("bool")),
                                    }
                                }),
                                2 => ValueParam::Int8({
                                    let load5 = _bc.load::<i8>(base + 16)?;
                                    i8::try_from(i32::from(load5)).map_err(bad_int)?
                                }),
                                3 => ValueParam::Int16({
                                    let load6 = _bc.load::<i16>(base + 16)?;
                                    i16::try_from(i32::from(load6)).map_err(bad_int)?
                                }),
                                4 => ValueParam::Int32({
                                    let load7 = _bc.load::<i32>(base + 16)?;
                                    load7
                                }),
                                5 => ValueParam::Int64({
                                    let load8 = _bc.load::<i64>(base + 16)?;
                                    load8
                                }),
                                6 => ValueParam::Uint8({
                                    let load9 = _bc.load::<u8>(base + 16)?;
                                    u8::try_from(i32::from(load9)).map_err(bad_int)?
                                }),
                                7 => ValueParam::Uint16({
                                    let load10 = _bc.load::<u16>(base + 16)?;
                                    u16::try_from(i32::from(load10)).map_err(bad_int)?
                                }),
                                8 => ValueParam::Uint32({
                                    let load11 = _bc.load::<i32>(base + 16)?;
                                    load11 as u32
                                }),
                                9 => ValueParam::Uint64({
                                    let load12 = _bc.load::<i64>(base + 16)?;
                                    load12 as u64
                                }),
                                10 => ValueParam::Floating32({
                                    let load13 = _bc.load::<f32>(base + 16)?;
                                    load13
                                }),
                                11 => ValueParam::Floating64({
                                    let load14 = _bc.load::<f64>(base + 16)?;
                                    load14
                                }),
                                12 => ValueParam::Str({
                                    let load15 = _bc.load::<i32>(base + 16)?;
                                    let load16 = _bc.load::<i32>(base + 20)?;
                                    let ptr17 = load15;
                                    let len17 = load16;
                                    _bc.slice_str(ptr17, len17)?
                                }),
                                13 => ValueParam::Bytes({
                                    let load18 = _bc.load::<i32>(base + 16)?;
                                    let load19 = _bc.load::<i32>(base + 20)?;
                                    let ptr20 = load18;
                                    let len20 = load19;
                                    _bc.slice(ptr20, len20)?
                                }),
                                14 => ValueParam::Raw({
                                    let load21 = _bc.load::<i32>(base + 16)?;
                                    let load22 = _bc.load::<i32>(base + 20)?;
                                    let ptr23 = load21;
                                    let len23 = load22;
                                    _bc.slice(ptr23, len23)?
                                }),
                                _ => return Err(invalid_variant("ValueParam")),
                            },
                        }
                    });
                }
                let param0 = _tables
                    .driver_table
                    .get((arg0) as u32)
                    .ok_or_else(|| wasmtime::Trap::new("invalid handle index"))?;
                let param1 = result24;
                let result = host.driver_connect_args(param0, param1);
                match result {
                    Ok(e) => {
                        let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                        let (_, _tables) = get(data);
                        caller_memory
                            .store(arg3 + 0, wit_bindgen_wasmtime::rt::as_i32(0i32) as u8)?;
                        caller_memory.store(
                            arg3 + 4,
                            wit_bindgen_wasmtime::rt::as_i32(
                                _tables.connection_table.insert(e) as i32
                            ),
                        )?;
                    }
                    Err(e) => {
                        let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                        let (_, _tables) = get(data);
                        caller_memory
                            .store(arg3 + 0, wit_bindgen_wasmtime::rt::as_i32(1i32) as u8)?;
                        let SqlError {
                            code_numeric: code_numeric25,
                            code_text: code_text25,
                            message: message25,
                            extra: extra25,
                        } = e;
                        match code_numeric25 {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg3 + 4,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                caller_memory.store(
                                    arg3 + 8,
                                    wit_bindgen_wasmtime::rt::as_i32(
                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                    ),
                                )?;
                            }
                            None => {
                                let e = ();
                                {
                                    caller_memory.store(
                                        arg3 + 4,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                        match code_text25 {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg3 + 12,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                let vec26 = e;
                                let ptr26 = func_canonical_abi_realloc
                                    .call(&mut caller, (0, 0, 1, vec26.len() as i32))?;
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store_many(ptr26, vec26.as_bytes())?;
                                caller_memory.store(
                                    arg3 + 20,
                                    wit_bindgen_wasmtime::rt::as_i32(vec26.len() as i32),
                                )?;
                                caller_memory
                                    .store(arg3 + 16, wit_bindgen_wasmtime::rt::as_i32(ptr26))?;
                            }
                            None => {
                                let e = ();
                                {
                                    let (caller_memory, data) =
                                        memory.data_and_store_mut(&mut caller);
                                    let (_, _tables) = get(data);
                                    caller_memory.store(
                                        arg3 + 12,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                        let vec27 = message25;
                        let ptr27 = func_canonical_abi_realloc
                            .call(&mut caller, (0, 0, 1, vec27.len() as i32))?;
                        let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                        let (_, _tables) = get(data);
                        caller_memory.store_many(ptr27, vec27.as_bytes())?;
                        caller_memory.store(
                            arg3 + 28,
                            wit_bindgen_wasmtime::rt::as_i32(vec27.len() as i32),
                        )?;
                        caller_memory.store(arg3 + 24, wit_bindgen_wasmtime::rt::as_i32(ptr27))?;
                        match extra25 {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg3 + 32,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                let vec33 = e;
                                let len33 = vec33.len() as i32;
                                let result33 = func_canonical_abi_realloc
                                    .call(&mut caller, (0, 0, 8, len33 * 24))?;
                                for (i, e) in vec33.into_iter().enumerate() {
                                    let base = result33 + (i as i32) * 24;
                                    {
                                        let ValueMapItemResult {
                                            key: key28,
                                            value: value28,
                                        } = e;
                                        let vec29 = key28;
                                        let ptr29 = func_canonical_abi_realloc
                                            .call(&mut caller, (0, 0, 1, vec29.len() as i32))?;
                                        let (caller_memory, data) =
                                            memory.data_and_store_mut(&mut caller);
                                        let (_, _tables) = get(data);
                                        caller_memory.store_many(ptr29, vec29.as_bytes())?;
                                        caller_memory.store(
                                            base + 4,
                                            wit_bindgen_wasmtime::rt::as_i32(vec29.len() as i32),
                                        )?;
                                        caller_memory.store(
                                            base + 0,
                                            wit_bindgen_wasmtime::rt::as_i32(ptr29),
                                        )?;
                                        match value28 {
                                            ValueResult::Null => {
                                                let e = ();
                                                {
                                                    caller_memory.store(
                                                        base + 8,
                                                        wit_bindgen_wasmtime::rt::as_i32(0i32)
                                                            as u8,
                                                    )?;
                                                    let () = e;
                                                }
                                            }
                                            ValueResult::Boolean(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(match e {
                                                        true => 1,
                                                        false => 0,
                                                    })
                                                        as u8,
                                                )?;
                                            }
                                            ValueResult::Int8(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(2i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u8,
                                                )?;
                                            }
                                            ValueResult::Int16(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(3i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u16,
                                                )?;
                                            }
                                            ValueResult::Int32(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(4i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Int64(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(5i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i64(
                                                        wit_bindgen_wasmtime::rt::as_i64(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Uint8(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(6i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u8,
                                                )?;
                                            }
                                            ValueResult::Uint16(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(7i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u16,
                                                )?;
                                            }
                                            ValueResult::Uint32(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(8i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Uint64(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(9i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i64(
                                                        wit_bindgen_wasmtime::rt::as_i64(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Floating32(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(10i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_f32(e),
                                                )?;
                                            }
                                            ValueResult::Floating64(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(11i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_f64(e),
                                                )?;
                                            }
                                            ValueResult::Str(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(12i32) as u8,
                                                )?;
                                                let vec30 = e;
                                                let ptr30 = func_canonical_abi_realloc.call(
                                                    &mut caller,
                                                    (0, 0, 1, vec30.len() as i32),
                                                )?;
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory
                                                    .store_many(ptr30, vec30.as_bytes())?;
                                                caller_memory.store(
                                                    base + 20,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        vec30.len() as i32
                                                    ),
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(ptr30),
                                                )?;
                                            }
                                            ValueResult::Bytes(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(13i32) as u8,
                                                )?;
                                                let vec31 = e;
                                                let ptr31 = func_canonical_abi_realloc.call(
                                                    &mut caller,
                                                    (0, 0, 1, (vec31.len() as i32) * 1),
                                                )?;
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store_many(ptr31, &vec31)?;
                                                caller_memory.store(
                                                    base + 20,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        vec31.len() as i32
                                                    ),
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(ptr31),
                                                )?;
                                            }
                                            ValueResult::Raw(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(14i32) as u8,
                                                )?;
                                                let vec32 = e;
                                                let ptr32 = func_canonical_abi_realloc.call(
                                                    &mut caller,
                                                    (0, 0, 1, (vec32.len() as i32) * 1),
                                                )?;
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store_many(ptr32, &vec32)?;
                                                caller_memory.store(
                                                    base + 20,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        vec32.len() as i32
                                                    ),
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(ptr32),
                                                )?;
                                            }
                                        };
                                    }
                                }
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory
                                    .store(arg3 + 40, wit_bindgen_wasmtime::rt::as_i32(len33))?;
                                caller_memory
                                    .store(arg3 + 36, wit_bindgen_wasmtime::rt::as_i32(result33))?;
                            }
                            None => {
                                let e = ();
                                {
                                    caller_memory.store(
                                        arg3 + 32,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                    }
                };
                Ok(())
            },
        )?;
        linker.func_wrap(
            "sql_v1_alpha1",
            "driver::open-pool-uri",
            move |mut caller: wasmtime::Caller<'_, T>,
                  arg0: i32,
                  arg1: i32,
                  arg2: i32,
                  arg3: i32,
                  arg4: i32,
                  arg5: i32,
                  arg6: i32,
                  arg7: i32,
                  arg8: i32| {
                let func = get_func(&mut caller, "canonical_abi_realloc")?;
                let func_canonical_abi_realloc =
                    func.typed::<(i32, i32, i32, i32), i32, _>(&caller)?;
                let memory = &get_memory(&mut caller, "memory")?;
                let (mem, data) = memory.data_and_store_mut(&mut caller);
                let mut _bc = wit_bindgen_wasmtime::BorrowChecker::new(mem);
                let host = get(data);
                let (host, _tables) = host;
                let ptr0 = arg1;
                let len0 = arg2;
                let param0 = _tables
                    .driver_table
                    .get((arg0) as u32)
                    .ok_or_else(|| wasmtime::Trap::new("invalid handle index"))?;
                let param1 = _bc.slice_str(ptr0, len0)?;
                let param2 = match arg3 {
                    0 => None,
                    1 => Some(PoolOptions {
                        max_connections: match arg4 {
                            0 => None,
                            1 => Some(arg5 as u32),
                            _ => return Err(invalid_variant("option")),
                        },
                        idle_timeout: match arg6 {
                            0 => None,
                            1 => Some(arg7 as u32),
                            _ => return Err(invalid_variant("option")),
                        },
                    }),
                    _ => return Err(invalid_variant("option")),
                };
                let result = host.driver_open_pool_uri(param0, param1, param2);
                match result {
                    Ok(e) => {
                        let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                        let (_, _tables) = get(data);
                        caller_memory
                            .store(arg8 + 0, wit_bindgen_wasmtime::rt::as_i32(0i32) as u8)?;
                        caller_memory.store(
                            arg8 + 4,
                            wit_bindgen_wasmtime::rt::as_i32(_tables.db_table.insert(e) as i32),
                        )?;
                    }
                    Err(e) => {
                        let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                        let (_, _tables) = get(data);
                        caller_memory
                            .store(arg8 + 0, wit_bindgen_wasmtime::rt::as_i32(1i32) as u8)?;
                        let SqlError {
                            code_numeric: code_numeric1,
                            code_text: code_text1,
                            message: message1,
                            extra: extra1,
                        } = e;
                        match code_numeric1 {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg8 + 4,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                caller_memory.store(
                                    arg8 + 8,
                                    wit_bindgen_wasmtime::rt::as_i32(
                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                    ),
                                )?;
                            }
                            None => {
                                let e = ();
                                {
                                    caller_memory.store(
                                        arg8 + 4,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                        match code_text1 {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg8 + 12,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                let vec2 = e;
                                let ptr2 = func_canonical_abi_realloc
                                    .call(&mut caller, (0, 0, 1, vec2.len() as i32))?;
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store_many(ptr2, vec2.as_bytes())?;
                                caller_memory.store(
                                    arg8 + 20,
                                    wit_bindgen_wasmtime::rt::as_i32(vec2.len() as i32),
                                )?;
                                caller_memory
                                    .store(arg8 + 16, wit_bindgen_wasmtime::rt::as_i32(ptr2))?;
                            }
                            None => {
                                let e = ();
                                {
                                    let (caller_memory, data) =
                                        memory.data_and_store_mut(&mut caller);
                                    let (_, _tables) = get(data);
                                    caller_memory.store(
                                        arg8 + 12,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                        let vec3 = message1;
                        let ptr3 = func_canonical_abi_realloc
                            .call(&mut caller, (0, 0, 1, vec3.len() as i32))?;
                        let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                        let (_, _tables) = get(data);
                        caller_memory.store_many(ptr3, vec3.as_bytes())?;
                        caller_memory.store(
                            arg8 + 28,
                            wit_bindgen_wasmtime::rt::as_i32(vec3.len() as i32),
                        )?;
                        caller_memory.store(arg8 + 24, wit_bindgen_wasmtime::rt::as_i32(ptr3))?;
                        match extra1 {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg8 + 32,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                let vec9 = e;
                                let len9 = vec9.len() as i32;
                                let result9 = func_canonical_abi_realloc
                                    .call(&mut caller, (0, 0, 8, len9 * 24))?;
                                for (i, e) in vec9.into_iter().enumerate() {
                                    let base = result9 + (i as i32) * 24;
                                    {
                                        let ValueMapItemResult {
                                            key: key4,
                                            value: value4,
                                        } = e;
                                        let vec5 = key4;
                                        let ptr5 = func_canonical_abi_realloc
                                            .call(&mut caller, (0, 0, 1, vec5.len() as i32))?;
                                        let (caller_memory, data) =
                                            memory.data_and_store_mut(&mut caller);
                                        let (_, _tables) = get(data);
                                        caller_memory.store_many(ptr5, vec5.as_bytes())?;
                                        caller_memory.store(
                                            base + 4,
                                            wit_bindgen_wasmtime::rt::as_i32(vec5.len() as i32),
                                        )?;
                                        caller_memory.store(
                                            base + 0,
                                            wit_bindgen_wasmtime::rt::as_i32(ptr5),
                                        )?;
                                        match value4 {
                                            ValueResult::Null => {
                                                let e = ();
                                                {
                                                    caller_memory.store(
                                                        base + 8,
                                                        wit_bindgen_wasmtime::rt::as_i32(0i32)
                                                            as u8,
                                                    )?;
                                                    let () = e;
                                                }
                                            }
                                            ValueResult::Boolean(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(match e {
                                                        true => 1,
                                                        false => 0,
                                                    })
                                                        as u8,
                                                )?;
                                            }
                                            ValueResult::Int8(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(2i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u8,
                                                )?;
                                            }
                                            ValueResult::Int16(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(3i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u16,
                                                )?;
                                            }
                                            ValueResult::Int32(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(4i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Int64(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(5i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i64(
                                                        wit_bindgen_wasmtime::rt::as_i64(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Uint8(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(6i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u8,
                                                )?;
                                            }
                                            ValueResult::Uint16(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(7i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u16,
                                                )?;
                                            }
                                            ValueResult::Uint32(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(8i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Uint64(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(9i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i64(
                                                        wit_bindgen_wasmtime::rt::as_i64(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Floating32(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(10i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_f32(e),
                                                )?;
                                            }
                                            ValueResult::Floating64(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(11i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_f64(e),
                                                )?;
                                            }
                                            ValueResult::Str(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(12i32) as u8,
                                                )?;
                                                let vec6 = e;
                                                let ptr6 = func_canonical_abi_realloc.call(
                                                    &mut caller,
                                                    (0, 0, 1, vec6.len() as i32),
                                                )?;
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store_many(ptr6, vec6.as_bytes())?;
                                                caller_memory.store(
                                                    base + 20,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        vec6.len() as i32
                                                    ),
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(ptr6),
                                                )?;
                                            }
                                            ValueResult::Bytes(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(13i32) as u8,
                                                )?;
                                                let vec7 = e;
                                                let ptr7 = func_canonical_abi_realloc.call(
                                                    &mut caller,
                                                    (0, 0, 1, (vec7.len() as i32) * 1),
                                                )?;
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store_many(ptr7, &vec7)?;
                                                caller_memory.store(
                                                    base + 20,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        vec7.len() as i32
                                                    ),
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(ptr7),
                                                )?;
                                            }
                                            ValueResult::Raw(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(14i32) as u8,
                                                )?;
                                                let vec8 = e;
                                                let ptr8 = func_canonical_abi_realloc.call(
                                                    &mut caller,
                                                    (0, 0, 1, (vec8.len() as i32) * 1),
                                                )?;
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store_many(ptr8, &vec8)?;
                                                caller_memory.store(
                                                    base + 20,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        vec8.len() as i32
                                                    ),
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(ptr8),
                                                )?;
                                            }
                                        };
                                    }
                                }
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory
                                    .store(arg8 + 40, wit_bindgen_wasmtime::rt::as_i32(len9))?;
                                caller_memory
                                    .store(arg8 + 36, wit_bindgen_wasmtime::rt::as_i32(result9))?;
                            }
                            None => {
                                let e = ();
                                {
                                    caller_memory.store(
                                        arg8 + 32,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                    }
                };
                Ok(())
            },
        )?;
        linker.func_wrap(
            "sql_v1_alpha1",
            "driver::open-pool-args",
            move |mut caller: wasmtime::Caller<'_, T>,
                  arg0: i32,
                  arg1: i32,
                  arg2: i32,
                  arg3: i32,
                  arg4: i32,
                  arg5: i32,
                  arg6: i32,
                  arg7: i32,
                  arg8: i32| {
                let func = get_func(&mut caller, "canonical_abi_realloc")?;
                let func_canonical_abi_realloc =
                    func.typed::<(i32, i32, i32, i32), i32, _>(&caller)?;
                let memory = &get_memory(&mut caller, "memory")?;
                let (mem, data) = memory.data_and_store_mut(&mut caller);
                let mut _bc = wit_bindgen_wasmtime::BorrowChecker::new(mem);
                let host = get(data);
                let (host, _tables) = host;
                let len24 = arg2;
                let base24 = arg1;
                let mut result24 = Vec::with_capacity(len24 as usize);
                for i in 0..len24 {
                    let base = base24 + i * 24;
                    result24.push({
                        let load0 = _bc.load::<i32>(base + 0)?;
                        let load1 = _bc.load::<i32>(base + 4)?;
                        let ptr2 = load0;
                        let len2 = load1;
                        let load3 = _bc.load::<u8>(base + 8)?;
                        ValueMapItemParam {
                            key: _bc.slice_str(ptr2, len2)?,
                            value: match i32::from(load3) {
                                0 => ValueParam::Null,
                                1 => ValueParam::Boolean({
                                    let load4 = _bc.load::<u8>(base + 16)?;
                                    match i32::from(load4) {
                                        0 => false,
                                        1 => true,
                                        _ => return Err(invalid_variant("bool")),
                                    }
                                }),
                                2 => ValueParam::Int8({
                                    let load5 = _bc.load::<i8>(base + 16)?;
                                    i8::try_from(i32::from(load5)).map_err(bad_int)?
                                }),
                                3 => ValueParam::Int16({
                                    let load6 = _bc.load::<i16>(base + 16)?;
                                    i16::try_from(i32::from(load6)).map_err(bad_int)?
                                }),
                                4 => ValueParam::Int32({
                                    let load7 = _bc.load::<i32>(base + 16)?;
                                    load7
                                }),
                                5 => ValueParam::Int64({
                                    let load8 = _bc.load::<i64>(base + 16)?;
                                    load8
                                }),
                                6 => ValueParam::Uint8({
                                    let load9 = _bc.load::<u8>(base + 16)?;
                                    u8::try_from(i32::from(load9)).map_err(bad_int)?
                                }),
                                7 => ValueParam::Uint16({
                                    let load10 = _bc.load::<u16>(base + 16)?;
                                    u16::try_from(i32::from(load10)).map_err(bad_int)?
                                }),
                                8 => ValueParam::Uint32({
                                    let load11 = _bc.load::<i32>(base + 16)?;
                                    load11 as u32
                                }),
                                9 => ValueParam::Uint64({
                                    let load12 = _bc.load::<i64>(base + 16)?;
                                    load12 as u64
                                }),
                                10 => ValueParam::Floating32({
                                    let load13 = _bc.load::<f32>(base + 16)?;
                                    load13
                                }),
                                11 => ValueParam::Floating64({
                                    let load14 = _bc.load::<f64>(base + 16)?;
                                    load14
                                }),
                                12 => ValueParam::Str({
                                    let load15 = _bc.load::<i32>(base + 16)?;
                                    let load16 = _bc.load::<i32>(base + 20)?;
                                    let ptr17 = load15;
                                    let len17 = load16;
                                    _bc.slice_str(ptr17, len17)?
                                }),
                                13 => ValueParam::Bytes({
                                    let load18 = _bc.load::<i32>(base + 16)?;
                                    let load19 = _bc.load::<i32>(base + 20)?;
                                    let ptr20 = load18;
                                    let len20 = load19;
                                    _bc.slice(ptr20, len20)?
                                }),
                                14 => ValueParam::Raw({
                                    let load21 = _bc.load::<i32>(base + 16)?;
                                    let load22 = _bc.load::<i32>(base + 20)?;
                                    let ptr23 = load21;
                                    let len23 = load22;
                                    _bc.slice(ptr23, len23)?
                                }),
                                _ => return Err(invalid_variant("ValueParam")),
                            },
                        }
                    });
                }
                let param0 = _tables
                    .driver_table
                    .get((arg0) as u32)
                    .ok_or_else(|| wasmtime::Trap::new("invalid handle index"))?;
                let param1 = result24;
                let param2 = match arg3 {
                    0 => None,
                    1 => Some(PoolOptions {
                        max_connections: match arg4 {
                            0 => None,
                            1 => Some(arg5 as u32),
                            _ => return Err(invalid_variant("option")),
                        },
                        idle_timeout: match arg6 {
                            0 => None,
                            1 => Some(arg7 as u32),
                            _ => return Err(invalid_variant("option")),
                        },
                    }),
                    _ => return Err(invalid_variant("option")),
                };
                let result = host.driver_open_pool_args(param0, param1, param2);
                match result {
                    Ok(e) => {
                        let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                        let (_, _tables) = get(data);
                        caller_memory
                            .store(arg8 + 0, wit_bindgen_wasmtime::rt::as_i32(0i32) as u8)?;
                        caller_memory.store(
                            arg8 + 4,
                            wit_bindgen_wasmtime::rt::as_i32(_tables.db_table.insert(e) as i32),
                        )?;
                    }
                    Err(e) => {
                        let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                        let (_, _tables) = get(data);
                        caller_memory
                            .store(arg8 + 0, wit_bindgen_wasmtime::rt::as_i32(1i32) as u8)?;
                        let SqlError {
                            code_numeric: code_numeric25,
                            code_text: code_text25,
                            message: message25,
                            extra: extra25,
                        } = e;
                        match code_numeric25 {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg8 + 4,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                caller_memory.store(
                                    arg8 + 8,
                                    wit_bindgen_wasmtime::rt::as_i32(
                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                    ),
                                )?;
                            }
                            None => {
                                let e = ();
                                {
                                    caller_memory.store(
                                        arg8 + 4,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                        match code_text25 {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg8 + 12,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                let vec26 = e;
                                let ptr26 = func_canonical_abi_realloc
                                    .call(&mut caller, (0, 0, 1, vec26.len() as i32))?;
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store_many(ptr26, vec26.as_bytes())?;
                                caller_memory.store(
                                    arg8 + 20,
                                    wit_bindgen_wasmtime::rt::as_i32(vec26.len() as i32),
                                )?;
                                caller_memory
                                    .store(arg8 + 16, wit_bindgen_wasmtime::rt::as_i32(ptr26))?;
                            }
                            None => {
                                let e = ();
                                {
                                    let (caller_memory, data) =
                                        memory.data_and_store_mut(&mut caller);
                                    let (_, _tables) = get(data);
                                    caller_memory.store(
                                        arg8 + 12,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                        let vec27 = message25;
                        let ptr27 = func_canonical_abi_realloc
                            .call(&mut caller, (0, 0, 1, vec27.len() as i32))?;
                        let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                        let (_, _tables) = get(data);
                        caller_memory.store_many(ptr27, vec27.as_bytes())?;
                        caller_memory.store(
                            arg8 + 28,
                            wit_bindgen_wasmtime::rt::as_i32(vec27.len() as i32),
                        )?;
                        caller_memory.store(arg8 + 24, wit_bindgen_wasmtime::rt::as_i32(ptr27))?;
                        match extra25 {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg8 + 32,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                let vec33 = e;
                                let len33 = vec33.len() as i32;
                                let result33 = func_canonical_abi_realloc
                                    .call(&mut caller, (0, 0, 8, len33 * 24))?;
                                for (i, e) in vec33.into_iter().enumerate() {
                                    let base = result33 + (i as i32) * 24;
                                    {
                                        let ValueMapItemResult {
                                            key: key28,
                                            value: value28,
                                        } = e;
                                        let vec29 = key28;
                                        let ptr29 = func_canonical_abi_realloc
                                            .call(&mut caller, (0, 0, 1, vec29.len() as i32))?;
                                        let (caller_memory, data) =
                                            memory.data_and_store_mut(&mut caller);
                                        let (_, _tables) = get(data);
                                        caller_memory.store_many(ptr29, vec29.as_bytes())?;
                                        caller_memory.store(
                                            base + 4,
                                            wit_bindgen_wasmtime::rt::as_i32(vec29.len() as i32),
                                        )?;
                                        caller_memory.store(
                                            base + 0,
                                            wit_bindgen_wasmtime::rt::as_i32(ptr29),
                                        )?;
                                        match value28 {
                                            ValueResult::Null => {
                                                let e = ();
                                                {
                                                    caller_memory.store(
                                                        base + 8,
                                                        wit_bindgen_wasmtime::rt::as_i32(0i32)
                                                            as u8,
                                                    )?;
                                                    let () = e;
                                                }
                                            }
                                            ValueResult::Boolean(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(match e {
                                                        true => 1,
                                                        false => 0,
                                                    })
                                                        as u8,
                                                )?;
                                            }
                                            ValueResult::Int8(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(2i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u8,
                                                )?;
                                            }
                                            ValueResult::Int16(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(3i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u16,
                                                )?;
                                            }
                                            ValueResult::Int32(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(4i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Int64(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(5i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i64(
                                                        wit_bindgen_wasmtime::rt::as_i64(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Uint8(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(6i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u8,
                                                )?;
                                            }
                                            ValueResult::Uint16(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(7i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u16,
                                                )?;
                                            }
                                            ValueResult::Uint32(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(8i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Uint64(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(9i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i64(
                                                        wit_bindgen_wasmtime::rt::as_i64(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Floating32(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(10i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_f32(e),
                                                )?;
                                            }
                                            ValueResult::Floating64(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(11i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_f64(e),
                                                )?;
                                            }
                                            ValueResult::Str(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(12i32) as u8,
                                                )?;
                                                let vec30 = e;
                                                let ptr30 = func_canonical_abi_realloc.call(
                                                    &mut caller,
                                                    (0, 0, 1, vec30.len() as i32),
                                                )?;
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory
                                                    .store_many(ptr30, vec30.as_bytes())?;
                                                caller_memory.store(
                                                    base + 20,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        vec30.len() as i32
                                                    ),
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(ptr30),
                                                )?;
                                            }
                                            ValueResult::Bytes(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(13i32) as u8,
                                                )?;
                                                let vec31 = e;
                                                let ptr31 = func_canonical_abi_realloc.call(
                                                    &mut caller,
                                                    (0, 0, 1, (vec31.len() as i32) * 1),
                                                )?;
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store_many(ptr31, &vec31)?;
                                                caller_memory.store(
                                                    base + 20,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        vec31.len() as i32
                                                    ),
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(ptr31),
                                                )?;
                                            }
                                            ValueResult::Raw(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(14i32) as u8,
                                                )?;
                                                let vec32 = e;
                                                let ptr32 = func_canonical_abi_realloc.call(
                                                    &mut caller,
                                                    (0, 0, 1, (vec32.len() as i32) * 1),
                                                )?;
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store_many(ptr32, &vec32)?;
                                                caller_memory.store(
                                                    base + 20,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        vec32.len() as i32
                                                    ),
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(ptr32),
                                                )?;
                                            }
                                        };
                                    }
                                }
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory
                                    .store(arg8 + 40, wit_bindgen_wasmtime::rt::as_i32(len33))?;
                                caller_memory
                                    .store(arg8 + 36, wit_bindgen_wasmtime::rt::as_i32(result33))?;
                            }
                            None => {
                                let e = ();
                                {
                                    caller_memory.store(
                                        arg8 + 32,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                    }
                };
                Ok(())
            },
        )?;
        linker.func_wrap(
            "sql_v1_alpha1",
            "db::connection",
            move |mut caller: wasmtime::Caller<'_, T>, arg0: i32, arg1: i32| {
                let func = get_func(&mut caller, "canonical_abi_realloc")?;
                let func_canonical_abi_realloc =
                    func.typed::<(i32, i32, i32, i32), i32, _>(&caller)?;
                let memory = &get_memory(&mut caller, "memory")?;
                let host = get(caller.data_mut());
                let (host, _tables) = host;
                let param0 = _tables
                    .db_table
                    .get((arg0) as u32)
                    .ok_or_else(|| wasmtime::Trap::new("invalid handle index"))?;
                let result = host.db_connection(param0);
                match result {
                    Ok(e) => {
                        let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                        let (_, _tables) = get(data);
                        caller_memory
                            .store(arg1 + 0, wit_bindgen_wasmtime::rt::as_i32(0i32) as u8)?;
                        caller_memory.store(
                            arg1 + 4,
                            wit_bindgen_wasmtime::rt::as_i32(
                                _tables.connection_table.insert(e) as i32
                            ),
                        )?;
                    }
                    Err(e) => {
                        let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                        let (_, _tables) = get(data);
                        caller_memory
                            .store(arg1 + 0, wit_bindgen_wasmtime::rt::as_i32(1i32) as u8)?;
                        let SqlError {
                            code_numeric: code_numeric0,
                            code_text: code_text0,
                            message: message0,
                            extra: extra0,
                        } = e;
                        match code_numeric0 {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg1 + 4,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                caller_memory.store(
                                    arg1 + 8,
                                    wit_bindgen_wasmtime::rt::as_i32(
                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                    ),
                                )?;
                            }
                            None => {
                                let e = ();
                                {
                                    caller_memory.store(
                                        arg1 + 4,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                        match code_text0 {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg1 + 12,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                let vec1 = e;
                                let ptr1 = func_canonical_abi_realloc
                                    .call(&mut caller, (0, 0, 1, vec1.len() as i32))?;
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store_many(ptr1, vec1.as_bytes())?;
                                caller_memory.store(
                                    arg1 + 20,
                                    wit_bindgen_wasmtime::rt::as_i32(vec1.len() as i32),
                                )?;
                                caller_memory
                                    .store(arg1 + 16, wit_bindgen_wasmtime::rt::as_i32(ptr1))?;
                            }
                            None => {
                                let e = ();
                                {
                                    let (caller_memory, data) =
                                        memory.data_and_store_mut(&mut caller);
                                    let (_, _tables) = get(data);
                                    caller_memory.store(
                                        arg1 + 12,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                        let vec2 = message0;
                        let ptr2 = func_canonical_abi_realloc
                            .call(&mut caller, (0, 0, 1, vec2.len() as i32))?;
                        let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                        let (_, _tables) = get(data);
                        caller_memory.store_many(ptr2, vec2.as_bytes())?;
                        caller_memory.store(
                            arg1 + 28,
                            wit_bindgen_wasmtime::rt::as_i32(vec2.len() as i32),
                        )?;
                        caller_memory.store(arg1 + 24, wit_bindgen_wasmtime::rt::as_i32(ptr2))?;
                        match extra0 {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg1 + 32,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                let vec8 = e;
                                let len8 = vec8.len() as i32;
                                let result8 = func_canonical_abi_realloc
                                    .call(&mut caller, (0, 0, 8, len8 * 24))?;
                                for (i, e) in vec8.into_iter().enumerate() {
                                    let base = result8 + (i as i32) * 24;
                                    {
                                        let ValueMapItemResult {
                                            key: key3,
                                            value: value3,
                                        } = e;
                                        let vec4 = key3;
                                        let ptr4 = func_canonical_abi_realloc
                                            .call(&mut caller, (0, 0, 1, vec4.len() as i32))?;
                                        let (caller_memory, data) =
                                            memory.data_and_store_mut(&mut caller);
                                        let (_, _tables) = get(data);
                                        caller_memory.store_many(ptr4, vec4.as_bytes())?;
                                        caller_memory.store(
                                            base + 4,
                                            wit_bindgen_wasmtime::rt::as_i32(vec4.len() as i32),
                                        )?;
                                        caller_memory.store(
                                            base + 0,
                                            wit_bindgen_wasmtime::rt::as_i32(ptr4),
                                        )?;
                                        match value3 {
                                            ValueResult::Null => {
                                                let e = ();
                                                {
                                                    caller_memory.store(
                                                        base + 8,
                                                        wit_bindgen_wasmtime::rt::as_i32(0i32)
                                                            as u8,
                                                    )?;
                                                    let () = e;
                                                }
                                            }
                                            ValueResult::Boolean(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(match e {
                                                        true => 1,
                                                        false => 0,
                                                    })
                                                        as u8,
                                                )?;
                                            }
                                            ValueResult::Int8(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(2i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u8,
                                                )?;
                                            }
                                            ValueResult::Int16(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(3i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u16,
                                                )?;
                                            }
                                            ValueResult::Int32(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(4i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Int64(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(5i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i64(
                                                        wit_bindgen_wasmtime::rt::as_i64(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Uint8(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(6i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u8,
                                                )?;
                                            }
                                            ValueResult::Uint16(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(7i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u16,
                                                )?;
                                            }
                                            ValueResult::Uint32(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(8i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Uint64(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(9i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i64(
                                                        wit_bindgen_wasmtime::rt::as_i64(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Floating32(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(10i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_f32(e),
                                                )?;
                                            }
                                            ValueResult::Floating64(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(11i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_f64(e),
                                                )?;
                                            }
                                            ValueResult::Str(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(12i32) as u8,
                                                )?;
                                                let vec5 = e;
                                                let ptr5 = func_canonical_abi_realloc.call(
                                                    &mut caller,
                                                    (0, 0, 1, vec5.len() as i32),
                                                )?;
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store_many(ptr5, vec5.as_bytes())?;
                                                caller_memory.store(
                                                    base + 20,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        vec5.len() as i32
                                                    ),
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(ptr5),
                                                )?;
                                            }
                                            ValueResult::Bytes(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(13i32) as u8,
                                                )?;
                                                let vec6 = e;
                                                let ptr6 = func_canonical_abi_realloc.call(
                                                    &mut caller,
                                                    (0, 0, 1, (vec6.len() as i32) * 1),
                                                )?;
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store_many(ptr6, &vec6)?;
                                                caller_memory.store(
                                                    base + 20,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        vec6.len() as i32
                                                    ),
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(ptr6),
                                                )?;
                                            }
                                            ValueResult::Raw(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(14i32) as u8,
                                                )?;
                                                let vec7 = e;
                                                let ptr7 = func_canonical_abi_realloc.call(
                                                    &mut caller,
                                                    (0, 0, 1, (vec7.len() as i32) * 1),
                                                )?;
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store_many(ptr7, &vec7)?;
                                                caller_memory.store(
                                                    base + 20,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        vec7.len() as i32
                                                    ),
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(ptr7),
                                                )?;
                                            }
                                        };
                                    }
                                }
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory
                                    .store(arg1 + 40, wit_bindgen_wasmtime::rt::as_i32(len8))?;
                                caller_memory
                                    .store(arg1 + 36, wit_bindgen_wasmtime::rt::as_i32(result8))?;
                            }
                            None => {
                                let e = ();
                                {
                                    caller_memory.store(
                                        arg1 + 32,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                    }
                };
                Ok(())
            },
        )?;
        linker.func_wrap(
            "sql_v1_alpha1",
            "db::execute",
            move |mut caller: wasmtime::Caller<'_, T>,
                  arg0: i32,
                  arg1: i32,
                  arg2: i32,
                  arg3: i32,
                  arg4: i32,
                  arg5: i32| {
                let func = get_func(&mut caller, "canonical_abi_realloc")?;
                let func_canonical_abi_realloc =
                    func.typed::<(i32, i32, i32, i32), i32, _>(&caller)?;
                let memory = &get_memory(&mut caller, "memory")?;
                let (mem, data) = memory.data_and_store_mut(&mut caller);
                let mut _bc = wit_bindgen_wasmtime::BorrowChecker::new(mem);
                let host = get(data);
                let (host, _tables) = host;
                let ptr0 = arg1;
                let len0 = arg2;
                let len22 = arg4;
                let base22 = arg3;
                let mut result22 = Vec::with_capacity(len22 as usize);
                for i in 0..len22 {
                    let base = base22 + i * 16;
                    result22.push({
                        let load1 = _bc.load::<u8>(base + 0)?;
                        match i32::from(load1) {
                            0 => ValueParam::Null,
                            1 => ValueParam::Boolean({
                                let load2 = _bc.load::<u8>(base + 8)?;
                                match i32::from(load2) {
                                    0 => false,
                                    1 => true,
                                    _ => return Err(invalid_variant("bool")),
                                }
                            }),
                            2 => ValueParam::Int8({
                                let load3 = _bc.load::<i8>(base + 8)?;
                                i8::try_from(i32::from(load3)).map_err(bad_int)?
                            }),
                            3 => ValueParam::Int16({
                                let load4 = _bc.load::<i16>(base + 8)?;
                                i16::try_from(i32::from(load4)).map_err(bad_int)?
                            }),
                            4 => ValueParam::Int32({
                                let load5 = _bc.load::<i32>(base + 8)?;
                                load5
                            }),
                            5 => ValueParam::Int64({
                                let load6 = _bc.load::<i64>(base + 8)?;
                                load6
                            }),
                            6 => ValueParam::Uint8({
                                let load7 = _bc.load::<u8>(base + 8)?;
                                u8::try_from(i32::from(load7)).map_err(bad_int)?
                            }),
                            7 => ValueParam::Uint16({
                                let load8 = _bc.load::<u16>(base + 8)?;
                                u16::try_from(i32::from(load8)).map_err(bad_int)?
                            }),
                            8 => ValueParam::Uint32({
                                let load9 = _bc.load::<i32>(base + 8)?;
                                load9 as u32
                            }),
                            9 => ValueParam::Uint64({
                                let load10 = _bc.load::<i64>(base + 8)?;
                                load10 as u64
                            }),
                            10 => ValueParam::Floating32({
                                let load11 = _bc.load::<f32>(base + 8)?;
                                load11
                            }),
                            11 => ValueParam::Floating64({
                                let load12 = _bc.load::<f64>(base + 8)?;
                                load12
                            }),
                            12 => ValueParam::Str({
                                let load13 = _bc.load::<i32>(base + 8)?;
                                let load14 = _bc.load::<i32>(base + 12)?;
                                let ptr15 = load13;
                                let len15 = load14;
                                _bc.slice_str(ptr15, len15)?
                            }),
                            13 => ValueParam::Bytes({
                                let load16 = _bc.load::<i32>(base + 8)?;
                                let load17 = _bc.load::<i32>(base + 12)?;
                                let ptr18 = load16;
                                let len18 = load17;
                                _bc.slice(ptr18, len18)?
                            }),
                            14 => ValueParam::Raw({
                                let load19 = _bc.load::<i32>(base + 8)?;
                                let load20 = _bc.load::<i32>(base + 12)?;
                                let ptr21 = load19;
                                let len21 = load20;
                                _bc.slice(ptr21, len21)?
                            }),
                            _ => return Err(invalid_variant("ValueParam")),
                        }
                    });
                }
                let param0 = _tables
                    .db_table
                    .get((arg0) as u32)
                    .ok_or_else(|| wasmtime::Trap::new("invalid handle index"))?;
                let param1 = _bc.slice_str(ptr0, len0)?;
                let param2 = result22;
                let result = host.db_execute(param0, param1, param2);
                match result {
                    Ok(e) => {
                        let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                        let (_, _tables) = get(data);
                        caller_memory
                            .store(arg5 + 0, wit_bindgen_wasmtime::rt::as_i32(0i32) as u8)?;
                        let () = e;
                    }
                    Err(e) => {
                        let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                        let (_, _tables) = get(data);
                        caller_memory
                            .store(arg5 + 0, wit_bindgen_wasmtime::rt::as_i32(1i32) as u8)?;
                        let SqlError {
                            code_numeric: code_numeric23,
                            code_text: code_text23,
                            message: message23,
                            extra: extra23,
                        } = e;
                        match code_numeric23 {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg5 + 4,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                caller_memory.store(
                                    arg5 + 8,
                                    wit_bindgen_wasmtime::rt::as_i32(
                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                    ),
                                )?;
                            }
                            None => {
                                let e = ();
                                {
                                    caller_memory.store(
                                        arg5 + 4,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                        match code_text23 {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg5 + 12,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                let vec24 = e;
                                let ptr24 = func_canonical_abi_realloc
                                    .call(&mut caller, (0, 0, 1, vec24.len() as i32))?;
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store_many(ptr24, vec24.as_bytes())?;
                                caller_memory.store(
                                    arg5 + 20,
                                    wit_bindgen_wasmtime::rt::as_i32(vec24.len() as i32),
                                )?;
                                caller_memory
                                    .store(arg5 + 16, wit_bindgen_wasmtime::rt::as_i32(ptr24))?;
                            }
                            None => {
                                let e = ();
                                {
                                    let (caller_memory, data) =
                                        memory.data_and_store_mut(&mut caller);
                                    let (_, _tables) = get(data);
                                    caller_memory.store(
                                        arg5 + 12,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                        let vec25 = message23;
                        let ptr25 = func_canonical_abi_realloc
                            .call(&mut caller, (0, 0, 1, vec25.len() as i32))?;
                        let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                        let (_, _tables) = get(data);
                        caller_memory.store_many(ptr25, vec25.as_bytes())?;
                        caller_memory.store(
                            arg5 + 28,
                            wit_bindgen_wasmtime::rt::as_i32(vec25.len() as i32),
                        )?;
                        caller_memory.store(arg5 + 24, wit_bindgen_wasmtime::rt::as_i32(ptr25))?;
                        match extra23 {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg5 + 32,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                let vec31 = e;
                                let len31 = vec31.len() as i32;
                                let result31 = func_canonical_abi_realloc
                                    .call(&mut caller, (0, 0, 8, len31 * 24))?;
                                for (i, e) in vec31.into_iter().enumerate() {
                                    let base = result31 + (i as i32) * 24;
                                    {
                                        let ValueMapItemResult {
                                            key: key26,
                                            value: value26,
                                        } = e;
                                        let vec27 = key26;
                                        let ptr27 = func_canonical_abi_realloc
                                            .call(&mut caller, (0, 0, 1, vec27.len() as i32))?;
                                        let (caller_memory, data) =
                                            memory.data_and_store_mut(&mut caller);
                                        let (_, _tables) = get(data);
                                        caller_memory.store_many(ptr27, vec27.as_bytes())?;
                                        caller_memory.store(
                                            base + 4,
                                            wit_bindgen_wasmtime::rt::as_i32(vec27.len() as i32),
                                        )?;
                                        caller_memory.store(
                                            base + 0,
                                            wit_bindgen_wasmtime::rt::as_i32(ptr27),
                                        )?;
                                        match value26 {
                                            ValueResult::Null => {
                                                let e = ();
                                                {
                                                    caller_memory.store(
                                                        base + 8,
                                                        wit_bindgen_wasmtime::rt::as_i32(0i32)
                                                            as u8,
                                                    )?;
                                                    let () = e;
                                                }
                                            }
                                            ValueResult::Boolean(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(match e {
                                                        true => 1,
                                                        false => 0,
                                                    })
                                                        as u8,
                                                )?;
                                            }
                                            ValueResult::Int8(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(2i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u8,
                                                )?;
                                            }
                                            ValueResult::Int16(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(3i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u16,
                                                )?;
                                            }
                                            ValueResult::Int32(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(4i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Int64(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(5i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i64(
                                                        wit_bindgen_wasmtime::rt::as_i64(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Uint8(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(6i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u8,
                                                )?;
                                            }
                                            ValueResult::Uint16(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(7i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u16,
                                                )?;
                                            }
                                            ValueResult::Uint32(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(8i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Uint64(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(9i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i64(
                                                        wit_bindgen_wasmtime::rt::as_i64(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Floating32(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(10i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_f32(e),
                                                )?;
                                            }
                                            ValueResult::Floating64(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(11i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_f64(e),
                                                )?;
                                            }
                                            ValueResult::Str(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(12i32) as u8,
                                                )?;
                                                let vec28 = e;
                                                let ptr28 = func_canonical_abi_realloc.call(
                                                    &mut caller,
                                                    (0, 0, 1, vec28.len() as i32),
                                                )?;
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory
                                                    .store_many(ptr28, vec28.as_bytes())?;
                                                caller_memory.store(
                                                    base + 20,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        vec28.len() as i32
                                                    ),
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(ptr28),
                                                )?;
                                            }
                                            ValueResult::Bytes(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(13i32) as u8,
                                                )?;
                                                let vec29 = e;
                                                let ptr29 = func_canonical_abi_realloc.call(
                                                    &mut caller,
                                                    (0, 0, 1, (vec29.len() as i32) * 1),
                                                )?;
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store_many(ptr29, &vec29)?;
                                                caller_memory.store(
                                                    base + 20,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        vec29.len() as i32
                                                    ),
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(ptr29),
                                                )?;
                                            }
                                            ValueResult::Raw(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(14i32) as u8,
                                                )?;
                                                let vec30 = e;
                                                let ptr30 = func_canonical_abi_realloc.call(
                                                    &mut caller,
                                                    (0, 0, 1, (vec30.len() as i32) * 1),
                                                )?;
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store_many(ptr30, &vec30)?;
                                                caller_memory.store(
                                                    base + 20,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        vec30.len() as i32
                                                    ),
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(ptr30),
                                                )?;
                                            }
                                        };
                                    }
                                }
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory
                                    .store(arg5 + 40, wit_bindgen_wasmtime::rt::as_i32(len31))?;
                                caller_memory
                                    .store(arg5 + 36, wit_bindgen_wasmtime::rt::as_i32(result31))?;
                            }
                            None => {
                                let e = ();
                                {
                                    caller_memory.store(
                                        arg5 + 32,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                    }
                };
                Ok(())
            },
        )?;
        linker.func_wrap(
            "sql_v1_alpha1",
            "db::query",
            move |mut caller: wasmtime::Caller<'_, T>,
                  arg0: i32,
                  arg1: i32,
                  arg2: i32,
                  arg3: i32,
                  arg4: i32,
                  arg5: i32| {
                let func = get_func(&mut caller, "canonical_abi_realloc")?;
                let func_canonical_abi_realloc =
                    func.typed::<(i32, i32, i32, i32), i32, _>(&caller)?;
                let memory = &get_memory(&mut caller, "memory")?;
                let (mem, data) = memory.data_and_store_mut(&mut caller);
                let mut _bc = wit_bindgen_wasmtime::BorrowChecker::new(mem);
                let host = get(data);
                let (host, _tables) = host;
                let ptr0 = arg1;
                let len0 = arg2;
                let len22 = arg4;
                let base22 = arg3;
                let mut result22 = Vec::with_capacity(len22 as usize);
                for i in 0..len22 {
                    let base = base22 + i * 16;
                    result22.push({
                        let load1 = _bc.load::<u8>(base + 0)?;
                        match i32::from(load1) {
                            0 => ValueParam::Null,
                            1 => ValueParam::Boolean({
                                let load2 = _bc.load::<u8>(base + 8)?;
                                match i32::from(load2) {
                                    0 => false,
                                    1 => true,
                                    _ => return Err(invalid_variant("bool")),
                                }
                            }),
                            2 => ValueParam::Int8({
                                let load3 = _bc.load::<i8>(base + 8)?;
                                i8::try_from(i32::from(load3)).map_err(bad_int)?
                            }),
                            3 => ValueParam::Int16({
                                let load4 = _bc.load::<i16>(base + 8)?;
                                i16::try_from(i32::from(load4)).map_err(bad_int)?
                            }),
                            4 => ValueParam::Int32({
                                let load5 = _bc.load::<i32>(base + 8)?;
                                load5
                            }),
                            5 => ValueParam::Int64({
                                let load6 = _bc.load::<i64>(base + 8)?;
                                load6
                            }),
                            6 => ValueParam::Uint8({
                                let load7 = _bc.load::<u8>(base + 8)?;
                                u8::try_from(i32::from(load7)).map_err(bad_int)?
                            }),
                            7 => ValueParam::Uint16({
                                let load8 = _bc.load::<u16>(base + 8)?;
                                u16::try_from(i32::from(load8)).map_err(bad_int)?
                            }),
                            8 => ValueParam::Uint32({
                                let load9 = _bc.load::<i32>(base + 8)?;
                                load9 as u32
                            }),
                            9 => ValueParam::Uint64({
                                let load10 = _bc.load::<i64>(base + 8)?;
                                load10 as u64
                            }),
                            10 => ValueParam::Floating32({
                                let load11 = _bc.load::<f32>(base + 8)?;
                                load11
                            }),
                            11 => ValueParam::Floating64({
                                let load12 = _bc.load::<f64>(base + 8)?;
                                load12
                            }),
                            12 => ValueParam::Str({
                                let load13 = _bc.load::<i32>(base + 8)?;
                                let load14 = _bc.load::<i32>(base + 12)?;
                                let ptr15 = load13;
                                let len15 = load14;
                                _bc.slice_str(ptr15, len15)?
                            }),
                            13 => ValueParam::Bytes({
                                let load16 = _bc.load::<i32>(base + 8)?;
                                let load17 = _bc.load::<i32>(base + 12)?;
                                let ptr18 = load16;
                                let len18 = load17;
                                _bc.slice(ptr18, len18)?
                            }),
                            14 => ValueParam::Raw({
                                let load19 = _bc.load::<i32>(base + 8)?;
                                let load20 = _bc.load::<i32>(base + 12)?;
                                let ptr21 = load19;
                                let len21 = load20;
                                _bc.slice(ptr21, len21)?
                            }),
                            _ => return Err(invalid_variant("ValueParam")),
                        }
                    });
                }
                let param0 = _tables
                    .db_table
                    .get((arg0) as u32)
                    .ok_or_else(|| wasmtime::Trap::new("invalid handle index"))?;
                let param1 = _bc.slice_str(ptr0, len0)?;
                let param2 = result22;
                let result = host.db_query(param0, param1, param2);
                match result {
                    Ok(e) => {
                        let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                        let (_, _tables) = get(data);
                        caller_memory
                            .store(arg5 + 0, wit_bindgen_wasmtime::rt::as_i32(0i32) as u8)?;
                        caller_memory.store(
                            arg5 + 4,
                            wit_bindgen_wasmtime::rt::as_i32(_tables.rows_table.insert(e) as i32),
                        )?;
                    }
                    Err(e) => {
                        let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                        let (_, _tables) = get(data);
                        caller_memory
                            .store(arg5 + 0, wit_bindgen_wasmtime::rt::as_i32(1i32) as u8)?;
                        let SqlError {
                            code_numeric: code_numeric23,
                            code_text: code_text23,
                            message: message23,
                            extra: extra23,
                        } = e;
                        match code_numeric23 {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg5 + 4,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                caller_memory.store(
                                    arg5 + 8,
                                    wit_bindgen_wasmtime::rt::as_i32(
                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                    ),
                                )?;
                            }
                            None => {
                                let e = ();
                                {
                                    caller_memory.store(
                                        arg5 + 4,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                        match code_text23 {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg5 + 12,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                let vec24 = e;
                                let ptr24 = func_canonical_abi_realloc
                                    .call(&mut caller, (0, 0, 1, vec24.len() as i32))?;
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store_many(ptr24, vec24.as_bytes())?;
                                caller_memory.store(
                                    arg5 + 20,
                                    wit_bindgen_wasmtime::rt::as_i32(vec24.len() as i32),
                                )?;
                                caller_memory
                                    .store(arg5 + 16, wit_bindgen_wasmtime::rt::as_i32(ptr24))?;
                            }
                            None => {
                                let e = ();
                                {
                                    let (caller_memory, data) =
                                        memory.data_and_store_mut(&mut caller);
                                    let (_, _tables) = get(data);
                                    caller_memory.store(
                                        arg5 + 12,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                        let vec25 = message23;
                        let ptr25 = func_canonical_abi_realloc
                            .call(&mut caller, (0, 0, 1, vec25.len() as i32))?;
                        let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                        let (_, _tables) = get(data);
                        caller_memory.store_many(ptr25, vec25.as_bytes())?;
                        caller_memory.store(
                            arg5 + 28,
                            wit_bindgen_wasmtime::rt::as_i32(vec25.len() as i32),
                        )?;
                        caller_memory.store(arg5 + 24, wit_bindgen_wasmtime::rt::as_i32(ptr25))?;
                        match extra23 {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg5 + 32,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                let vec31 = e;
                                let len31 = vec31.len() as i32;
                                let result31 = func_canonical_abi_realloc
                                    .call(&mut caller, (0, 0, 8, len31 * 24))?;
                                for (i, e) in vec31.into_iter().enumerate() {
                                    let base = result31 + (i as i32) * 24;
                                    {
                                        let ValueMapItemResult {
                                            key: key26,
                                            value: value26,
                                        } = e;
                                        let vec27 = key26;
                                        let ptr27 = func_canonical_abi_realloc
                                            .call(&mut caller, (0, 0, 1, vec27.len() as i32))?;
                                        let (caller_memory, data) =
                                            memory.data_and_store_mut(&mut caller);
                                        let (_, _tables) = get(data);
                                        caller_memory.store_many(ptr27, vec27.as_bytes())?;
                                        caller_memory.store(
                                            base + 4,
                                            wit_bindgen_wasmtime::rt::as_i32(vec27.len() as i32),
                                        )?;
                                        caller_memory.store(
                                            base + 0,
                                            wit_bindgen_wasmtime::rt::as_i32(ptr27),
                                        )?;
                                        match value26 {
                                            ValueResult::Null => {
                                                let e = ();
                                                {
                                                    caller_memory.store(
                                                        base + 8,
                                                        wit_bindgen_wasmtime::rt::as_i32(0i32)
                                                            as u8,
                                                    )?;
                                                    let () = e;
                                                }
                                            }
                                            ValueResult::Boolean(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(match e {
                                                        true => 1,
                                                        false => 0,
                                                    })
                                                        as u8,
                                                )?;
                                            }
                                            ValueResult::Int8(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(2i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u8,
                                                )?;
                                            }
                                            ValueResult::Int16(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(3i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u16,
                                                )?;
                                            }
                                            ValueResult::Int32(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(4i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Int64(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(5i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i64(
                                                        wit_bindgen_wasmtime::rt::as_i64(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Uint8(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(6i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u8,
                                                )?;
                                            }
                                            ValueResult::Uint16(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(7i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u16,
                                                )?;
                                            }
                                            ValueResult::Uint32(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(8i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Uint64(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(9i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i64(
                                                        wit_bindgen_wasmtime::rt::as_i64(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Floating32(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(10i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_f32(e),
                                                )?;
                                            }
                                            ValueResult::Floating64(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(11i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_f64(e),
                                                )?;
                                            }
                                            ValueResult::Str(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(12i32) as u8,
                                                )?;
                                                let vec28 = e;
                                                let ptr28 = func_canonical_abi_realloc.call(
                                                    &mut caller,
                                                    (0, 0, 1, vec28.len() as i32),
                                                )?;
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory
                                                    .store_many(ptr28, vec28.as_bytes())?;
                                                caller_memory.store(
                                                    base + 20,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        vec28.len() as i32
                                                    ),
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(ptr28),
                                                )?;
                                            }
                                            ValueResult::Bytes(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(13i32) as u8,
                                                )?;
                                                let vec29 = e;
                                                let ptr29 = func_canonical_abi_realloc.call(
                                                    &mut caller,
                                                    (0, 0, 1, (vec29.len() as i32) * 1),
                                                )?;
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store_many(ptr29, &vec29)?;
                                                caller_memory.store(
                                                    base + 20,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        vec29.len() as i32
                                                    ),
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(ptr29),
                                                )?;
                                            }
                                            ValueResult::Raw(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(14i32) as u8,
                                                )?;
                                                let vec30 = e;
                                                let ptr30 = func_canonical_abi_realloc.call(
                                                    &mut caller,
                                                    (0, 0, 1, (vec30.len() as i32) * 1),
                                                )?;
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store_many(ptr30, &vec30)?;
                                                caller_memory.store(
                                                    base + 20,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        vec30.len() as i32
                                                    ),
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(ptr30),
                                                )?;
                                            }
                                        };
                                    }
                                }
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory
                                    .store(arg5 + 40, wit_bindgen_wasmtime::rt::as_i32(len31))?;
                                caller_memory
                                    .store(arg5 + 36, wit_bindgen_wasmtime::rt::as_i32(result31))?;
                            }
                            None => {
                                let e = ();
                                {
                                    caller_memory.store(
                                        arg5 + 32,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                    }
                };
                Ok(())
            },
        )?;
        linker.func_wrap(
            "sql_v1_alpha1",
            "connection::execute",
            move |mut caller: wasmtime::Caller<'_, T>,
                  arg0: i32,
                  arg1: i32,
                  arg2: i32,
                  arg3: i32,
                  arg4: i32,
                  arg5: i32| {
                let func = get_func(&mut caller, "canonical_abi_realloc")?;
                let func_canonical_abi_realloc =
                    func.typed::<(i32, i32, i32, i32), i32, _>(&caller)?;
                let memory = &get_memory(&mut caller, "memory")?;
                let (mem, data) = memory.data_and_store_mut(&mut caller);
                let mut _bc = wit_bindgen_wasmtime::BorrowChecker::new(mem);
                let host = get(data);
                let (host, _tables) = host;
                let ptr0 = arg1;
                let len0 = arg2;
                let len22 = arg4;
                let base22 = arg3;
                let mut result22 = Vec::with_capacity(len22 as usize);
                for i in 0..len22 {
                    let base = base22 + i * 16;
                    result22.push({
                        let load1 = _bc.load::<u8>(base + 0)?;
                        match i32::from(load1) {
                            0 => ValueParam::Null,
                            1 => ValueParam::Boolean({
                                let load2 = _bc.load::<u8>(base + 8)?;
                                match i32::from(load2) {
                                    0 => false,
                                    1 => true,
                                    _ => return Err(invalid_variant("bool")),
                                }
                            }),
                            2 => ValueParam::Int8({
                                let load3 = _bc.load::<i8>(base + 8)?;
                                i8::try_from(i32::from(load3)).map_err(bad_int)?
                            }),
                            3 => ValueParam::Int16({
                                let load4 = _bc.load::<i16>(base + 8)?;
                                i16::try_from(i32::from(load4)).map_err(bad_int)?
                            }),
                            4 => ValueParam::Int32({
                                let load5 = _bc.load::<i32>(base + 8)?;
                                load5
                            }),
                            5 => ValueParam::Int64({
                                let load6 = _bc.load::<i64>(base + 8)?;
                                load6
                            }),
                            6 => ValueParam::Uint8({
                                let load7 = _bc.load::<u8>(base + 8)?;
                                u8::try_from(i32::from(load7)).map_err(bad_int)?
                            }),
                            7 => ValueParam::Uint16({
                                let load8 = _bc.load::<u16>(base + 8)?;
                                u16::try_from(i32::from(load8)).map_err(bad_int)?
                            }),
                            8 => ValueParam::Uint32({
                                let load9 = _bc.load::<i32>(base + 8)?;
                                load9 as u32
                            }),
                            9 => ValueParam::Uint64({
                                let load10 = _bc.load::<i64>(base + 8)?;
                                load10 as u64
                            }),
                            10 => ValueParam::Floating32({
                                let load11 = _bc.load::<f32>(base + 8)?;
                                load11
                            }),
                            11 => ValueParam::Floating64({
                                let load12 = _bc.load::<f64>(base + 8)?;
                                load12
                            }),
                            12 => ValueParam::Str({
                                let load13 = _bc.load::<i32>(base + 8)?;
                                let load14 = _bc.load::<i32>(base + 12)?;
                                let ptr15 = load13;
                                let len15 = load14;
                                _bc.slice_str(ptr15, len15)?
                            }),
                            13 => ValueParam::Bytes({
                                let load16 = _bc.load::<i32>(base + 8)?;
                                let load17 = _bc.load::<i32>(base + 12)?;
                                let ptr18 = load16;
                                let len18 = load17;
                                _bc.slice(ptr18, len18)?
                            }),
                            14 => ValueParam::Raw({
                                let load19 = _bc.load::<i32>(base + 8)?;
                                let load20 = _bc.load::<i32>(base + 12)?;
                                let ptr21 = load19;
                                let len21 = load20;
                                _bc.slice(ptr21, len21)?
                            }),
                            _ => return Err(invalid_variant("ValueParam")),
                        }
                    });
                }
                let param0 = _tables
                    .connection_table
                    .get((arg0) as u32)
                    .ok_or_else(|| wasmtime::Trap::new("invalid handle index"))?;
                let param1 = _bc.slice_str(ptr0, len0)?;
                let param2 = result22;
                let result = host.connection_execute(param0, param1, param2);
                match result {
                    Ok(e) => {
                        let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                        let (_, _tables) = get(data);
                        caller_memory
                            .store(arg5 + 0, wit_bindgen_wasmtime::rt::as_i32(0i32) as u8)?;
                        let () = e;
                    }
                    Err(e) => {
                        let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                        let (_, _tables) = get(data);
                        caller_memory
                            .store(arg5 + 0, wit_bindgen_wasmtime::rt::as_i32(1i32) as u8)?;
                        let SqlError {
                            code_numeric: code_numeric23,
                            code_text: code_text23,
                            message: message23,
                            extra: extra23,
                        } = e;
                        match code_numeric23 {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg5 + 4,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                caller_memory.store(
                                    arg5 + 8,
                                    wit_bindgen_wasmtime::rt::as_i32(
                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                    ),
                                )?;
                            }
                            None => {
                                let e = ();
                                {
                                    caller_memory.store(
                                        arg5 + 4,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                        match code_text23 {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg5 + 12,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                let vec24 = e;
                                let ptr24 = func_canonical_abi_realloc
                                    .call(&mut caller, (0, 0, 1, vec24.len() as i32))?;
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store_many(ptr24, vec24.as_bytes())?;
                                caller_memory.store(
                                    arg5 + 20,
                                    wit_bindgen_wasmtime::rt::as_i32(vec24.len() as i32),
                                )?;
                                caller_memory
                                    .store(arg5 + 16, wit_bindgen_wasmtime::rt::as_i32(ptr24))?;
                            }
                            None => {
                                let e = ();
                                {
                                    let (caller_memory, data) =
                                        memory.data_and_store_mut(&mut caller);
                                    let (_, _tables) = get(data);
                                    caller_memory.store(
                                        arg5 + 12,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                        let vec25 = message23;
                        let ptr25 = func_canonical_abi_realloc
                            .call(&mut caller, (0, 0, 1, vec25.len() as i32))?;
                        let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                        let (_, _tables) = get(data);
                        caller_memory.store_many(ptr25, vec25.as_bytes())?;
                        caller_memory.store(
                            arg5 + 28,
                            wit_bindgen_wasmtime::rt::as_i32(vec25.len() as i32),
                        )?;
                        caller_memory.store(arg5 + 24, wit_bindgen_wasmtime::rt::as_i32(ptr25))?;
                        match extra23 {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg5 + 32,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                let vec31 = e;
                                let len31 = vec31.len() as i32;
                                let result31 = func_canonical_abi_realloc
                                    .call(&mut caller, (0, 0, 8, len31 * 24))?;
                                for (i, e) in vec31.into_iter().enumerate() {
                                    let base = result31 + (i as i32) * 24;
                                    {
                                        let ValueMapItemResult {
                                            key: key26,
                                            value: value26,
                                        } = e;
                                        let vec27 = key26;
                                        let ptr27 = func_canonical_abi_realloc
                                            .call(&mut caller, (0, 0, 1, vec27.len() as i32))?;
                                        let (caller_memory, data) =
                                            memory.data_and_store_mut(&mut caller);
                                        let (_, _tables) = get(data);
                                        caller_memory.store_many(ptr27, vec27.as_bytes())?;
                                        caller_memory.store(
                                            base + 4,
                                            wit_bindgen_wasmtime::rt::as_i32(vec27.len() as i32),
                                        )?;
                                        caller_memory.store(
                                            base + 0,
                                            wit_bindgen_wasmtime::rt::as_i32(ptr27),
                                        )?;
                                        match value26 {
                                            ValueResult::Null => {
                                                let e = ();
                                                {
                                                    caller_memory.store(
                                                        base + 8,
                                                        wit_bindgen_wasmtime::rt::as_i32(0i32)
                                                            as u8,
                                                    )?;
                                                    let () = e;
                                                }
                                            }
                                            ValueResult::Boolean(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(match e {
                                                        true => 1,
                                                        false => 0,
                                                    })
                                                        as u8,
                                                )?;
                                            }
                                            ValueResult::Int8(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(2i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u8,
                                                )?;
                                            }
                                            ValueResult::Int16(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(3i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u16,
                                                )?;
                                            }
                                            ValueResult::Int32(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(4i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Int64(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(5i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i64(
                                                        wit_bindgen_wasmtime::rt::as_i64(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Uint8(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(6i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u8,
                                                )?;
                                            }
                                            ValueResult::Uint16(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(7i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u16,
                                                )?;
                                            }
                                            ValueResult::Uint32(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(8i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Uint64(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(9i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i64(
                                                        wit_bindgen_wasmtime::rt::as_i64(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Floating32(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(10i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_f32(e),
                                                )?;
                                            }
                                            ValueResult::Floating64(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(11i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_f64(e),
                                                )?;
                                            }
                                            ValueResult::Str(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(12i32) as u8,
                                                )?;
                                                let vec28 = e;
                                                let ptr28 = func_canonical_abi_realloc.call(
                                                    &mut caller,
                                                    (0, 0, 1, vec28.len() as i32),
                                                )?;
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory
                                                    .store_many(ptr28, vec28.as_bytes())?;
                                                caller_memory.store(
                                                    base + 20,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        vec28.len() as i32
                                                    ),
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(ptr28),
                                                )?;
                                            }
                                            ValueResult::Bytes(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(13i32) as u8,
                                                )?;
                                                let vec29 = e;
                                                let ptr29 = func_canonical_abi_realloc.call(
                                                    &mut caller,
                                                    (0, 0, 1, (vec29.len() as i32) * 1),
                                                )?;
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store_many(ptr29, &vec29)?;
                                                caller_memory.store(
                                                    base + 20,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        vec29.len() as i32
                                                    ),
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(ptr29),
                                                )?;
                                            }
                                            ValueResult::Raw(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(14i32) as u8,
                                                )?;
                                                let vec30 = e;
                                                let ptr30 = func_canonical_abi_realloc.call(
                                                    &mut caller,
                                                    (0, 0, 1, (vec30.len() as i32) * 1),
                                                )?;
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store_many(ptr30, &vec30)?;
                                                caller_memory.store(
                                                    base + 20,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        vec30.len() as i32
                                                    ),
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(ptr30),
                                                )?;
                                            }
                                        };
                                    }
                                }
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory
                                    .store(arg5 + 40, wit_bindgen_wasmtime::rt::as_i32(len31))?;
                                caller_memory
                                    .store(arg5 + 36, wit_bindgen_wasmtime::rt::as_i32(result31))?;
                            }
                            None => {
                                let e = ();
                                {
                                    caller_memory.store(
                                        arg5 + 32,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                    }
                };
                Ok(())
            },
        )?;
        linker.func_wrap(
            "sql_v1_alpha1",
            "connection::query",
            move |mut caller: wasmtime::Caller<'_, T>,
                  arg0: i32,
                  arg1: i32,
                  arg2: i32,
                  arg3: i32,
                  arg4: i32,
                  arg5: i32| {
                let func = get_func(&mut caller, "canonical_abi_realloc")?;
                let func_canonical_abi_realloc =
                    func.typed::<(i32, i32, i32, i32), i32, _>(&caller)?;
                let memory = &get_memory(&mut caller, "memory")?;
                let (mem, data) = memory.data_and_store_mut(&mut caller);
                let mut _bc = wit_bindgen_wasmtime::BorrowChecker::new(mem);
                let host = get(data);
                let (host, _tables) = host;
                let ptr0 = arg1;
                let len0 = arg2;
                let len22 = arg4;
                let base22 = arg3;
                let mut result22 = Vec::with_capacity(len22 as usize);
                for i in 0..len22 {
                    let base = base22 + i * 16;
                    result22.push({
                        let load1 = _bc.load::<u8>(base + 0)?;
                        match i32::from(load1) {
                            0 => ValueParam::Null,
                            1 => ValueParam::Boolean({
                                let load2 = _bc.load::<u8>(base + 8)?;
                                match i32::from(load2) {
                                    0 => false,
                                    1 => true,
                                    _ => return Err(invalid_variant("bool")),
                                }
                            }),
                            2 => ValueParam::Int8({
                                let load3 = _bc.load::<i8>(base + 8)?;
                                i8::try_from(i32::from(load3)).map_err(bad_int)?
                            }),
                            3 => ValueParam::Int16({
                                let load4 = _bc.load::<i16>(base + 8)?;
                                i16::try_from(i32::from(load4)).map_err(bad_int)?
                            }),
                            4 => ValueParam::Int32({
                                let load5 = _bc.load::<i32>(base + 8)?;
                                load5
                            }),
                            5 => ValueParam::Int64({
                                let load6 = _bc.load::<i64>(base + 8)?;
                                load6
                            }),
                            6 => ValueParam::Uint8({
                                let load7 = _bc.load::<u8>(base + 8)?;
                                u8::try_from(i32::from(load7)).map_err(bad_int)?
                            }),
                            7 => ValueParam::Uint16({
                                let load8 = _bc.load::<u16>(base + 8)?;
                                u16::try_from(i32::from(load8)).map_err(bad_int)?
                            }),
                            8 => ValueParam::Uint32({
                                let load9 = _bc.load::<i32>(base + 8)?;
                                load9 as u32
                            }),
                            9 => ValueParam::Uint64({
                                let load10 = _bc.load::<i64>(base + 8)?;
                                load10 as u64
                            }),
                            10 => ValueParam::Floating32({
                                let load11 = _bc.load::<f32>(base + 8)?;
                                load11
                            }),
                            11 => ValueParam::Floating64({
                                let load12 = _bc.load::<f64>(base + 8)?;
                                load12
                            }),
                            12 => ValueParam::Str({
                                let load13 = _bc.load::<i32>(base + 8)?;
                                let load14 = _bc.load::<i32>(base + 12)?;
                                let ptr15 = load13;
                                let len15 = load14;
                                _bc.slice_str(ptr15, len15)?
                            }),
                            13 => ValueParam::Bytes({
                                let load16 = _bc.load::<i32>(base + 8)?;
                                let load17 = _bc.load::<i32>(base + 12)?;
                                let ptr18 = load16;
                                let len18 = load17;
                                _bc.slice(ptr18, len18)?
                            }),
                            14 => ValueParam::Raw({
                                let load19 = _bc.load::<i32>(base + 8)?;
                                let load20 = _bc.load::<i32>(base + 12)?;
                                let ptr21 = load19;
                                let len21 = load20;
                                _bc.slice(ptr21, len21)?
                            }),
                            _ => return Err(invalid_variant("ValueParam")),
                        }
                    });
                }
                let param0 = _tables
                    .connection_table
                    .get((arg0) as u32)
                    .ok_or_else(|| wasmtime::Trap::new("invalid handle index"))?;
                let param1 = _bc.slice_str(ptr0, len0)?;
                let param2 = result22;
                let result = host.connection_query(param0, param1, param2);
                match result {
                    Ok(e) => {
                        let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                        let (_, _tables) = get(data);
                        caller_memory
                            .store(arg5 + 0, wit_bindgen_wasmtime::rt::as_i32(0i32) as u8)?;
                        caller_memory.store(
                            arg5 + 4,
                            wit_bindgen_wasmtime::rt::as_i32(_tables.rows_table.insert(e) as i32),
                        )?;
                    }
                    Err(e) => {
                        let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                        let (_, _tables) = get(data);
                        caller_memory
                            .store(arg5 + 0, wit_bindgen_wasmtime::rt::as_i32(1i32) as u8)?;
                        let SqlError {
                            code_numeric: code_numeric23,
                            code_text: code_text23,
                            message: message23,
                            extra: extra23,
                        } = e;
                        match code_numeric23 {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg5 + 4,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                caller_memory.store(
                                    arg5 + 8,
                                    wit_bindgen_wasmtime::rt::as_i32(
                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                    ),
                                )?;
                            }
                            None => {
                                let e = ();
                                {
                                    caller_memory.store(
                                        arg5 + 4,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                        match code_text23 {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg5 + 12,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                let vec24 = e;
                                let ptr24 = func_canonical_abi_realloc
                                    .call(&mut caller, (0, 0, 1, vec24.len() as i32))?;
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store_many(ptr24, vec24.as_bytes())?;
                                caller_memory.store(
                                    arg5 + 20,
                                    wit_bindgen_wasmtime::rt::as_i32(vec24.len() as i32),
                                )?;
                                caller_memory
                                    .store(arg5 + 16, wit_bindgen_wasmtime::rt::as_i32(ptr24))?;
                            }
                            None => {
                                let e = ();
                                {
                                    let (caller_memory, data) =
                                        memory.data_and_store_mut(&mut caller);
                                    let (_, _tables) = get(data);
                                    caller_memory.store(
                                        arg5 + 12,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                        let vec25 = message23;
                        let ptr25 = func_canonical_abi_realloc
                            .call(&mut caller, (0, 0, 1, vec25.len() as i32))?;
                        let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                        let (_, _tables) = get(data);
                        caller_memory.store_many(ptr25, vec25.as_bytes())?;
                        caller_memory.store(
                            arg5 + 28,
                            wit_bindgen_wasmtime::rt::as_i32(vec25.len() as i32),
                        )?;
                        caller_memory.store(arg5 + 24, wit_bindgen_wasmtime::rt::as_i32(ptr25))?;
                        match extra23 {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg5 + 32,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                let vec31 = e;
                                let len31 = vec31.len() as i32;
                                let result31 = func_canonical_abi_realloc
                                    .call(&mut caller, (0, 0, 8, len31 * 24))?;
                                for (i, e) in vec31.into_iter().enumerate() {
                                    let base = result31 + (i as i32) * 24;
                                    {
                                        let ValueMapItemResult {
                                            key: key26,
                                            value: value26,
                                        } = e;
                                        let vec27 = key26;
                                        let ptr27 = func_canonical_abi_realloc
                                            .call(&mut caller, (0, 0, 1, vec27.len() as i32))?;
                                        let (caller_memory, data) =
                                            memory.data_and_store_mut(&mut caller);
                                        let (_, _tables) = get(data);
                                        caller_memory.store_many(ptr27, vec27.as_bytes())?;
                                        caller_memory.store(
                                            base + 4,
                                            wit_bindgen_wasmtime::rt::as_i32(vec27.len() as i32),
                                        )?;
                                        caller_memory.store(
                                            base + 0,
                                            wit_bindgen_wasmtime::rt::as_i32(ptr27),
                                        )?;
                                        match value26 {
                                            ValueResult::Null => {
                                                let e = ();
                                                {
                                                    caller_memory.store(
                                                        base + 8,
                                                        wit_bindgen_wasmtime::rt::as_i32(0i32)
                                                            as u8,
                                                    )?;
                                                    let () = e;
                                                }
                                            }
                                            ValueResult::Boolean(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(match e {
                                                        true => 1,
                                                        false => 0,
                                                    })
                                                        as u8,
                                                )?;
                                            }
                                            ValueResult::Int8(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(2i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u8,
                                                )?;
                                            }
                                            ValueResult::Int16(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(3i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u16,
                                                )?;
                                            }
                                            ValueResult::Int32(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(4i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Int64(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(5i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i64(
                                                        wit_bindgen_wasmtime::rt::as_i64(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Uint8(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(6i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u8,
                                                )?;
                                            }
                                            ValueResult::Uint16(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(7i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u16,
                                                )?;
                                            }
                                            ValueResult::Uint32(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(8i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Uint64(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(9i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i64(
                                                        wit_bindgen_wasmtime::rt::as_i64(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Floating32(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(10i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_f32(e),
                                                )?;
                                            }
                                            ValueResult::Floating64(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(11i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_f64(e),
                                                )?;
                                            }
                                            ValueResult::Str(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(12i32) as u8,
                                                )?;
                                                let vec28 = e;
                                                let ptr28 = func_canonical_abi_realloc.call(
                                                    &mut caller,
                                                    (0, 0, 1, vec28.len() as i32),
                                                )?;
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory
                                                    .store_many(ptr28, vec28.as_bytes())?;
                                                caller_memory.store(
                                                    base + 20,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        vec28.len() as i32
                                                    ),
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(ptr28),
                                                )?;
                                            }
                                            ValueResult::Bytes(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(13i32) as u8,
                                                )?;
                                                let vec29 = e;
                                                let ptr29 = func_canonical_abi_realloc.call(
                                                    &mut caller,
                                                    (0, 0, 1, (vec29.len() as i32) * 1),
                                                )?;
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store_many(ptr29, &vec29)?;
                                                caller_memory.store(
                                                    base + 20,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        vec29.len() as i32
                                                    ),
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(ptr29),
                                                )?;
                                            }
                                            ValueResult::Raw(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(14i32) as u8,
                                                )?;
                                                let vec30 = e;
                                                let ptr30 = func_canonical_abi_realloc.call(
                                                    &mut caller,
                                                    (0, 0, 1, (vec30.len() as i32) * 1),
                                                )?;
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store_many(ptr30, &vec30)?;
                                                caller_memory.store(
                                                    base + 20,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        vec30.len() as i32
                                                    ),
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(ptr30),
                                                )?;
                                            }
                                        };
                                    }
                                }
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory
                                    .store(arg5 + 40, wit_bindgen_wasmtime::rt::as_i32(len31))?;
                                caller_memory
                                    .store(arg5 + 36, wit_bindgen_wasmtime::rt::as_i32(result31))?;
                            }
                            None => {
                                let e = ();
                                {
                                    caller_memory.store(
                                        arg5 + 32,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                    }
                };
                Ok(())
            },
        )?;
        linker.func_wrap(
            "sql_v1_alpha1",
            "connection::prepare",
            move |mut caller: wasmtime::Caller<'_, T>,
                  arg0: i32,
                  arg1: i32,
                  arg2: i32,
                  arg3: i32| {
                let func = get_func(&mut caller, "canonical_abi_realloc")?;
                let func_canonical_abi_realloc =
                    func.typed::<(i32, i32, i32, i32), i32, _>(&caller)?;
                let memory = &get_memory(&mut caller, "memory")?;
                let (mem, data) = memory.data_and_store_mut(&mut caller);
                let mut _bc = wit_bindgen_wasmtime::BorrowChecker::new(mem);
                let host = get(data);
                let (host, _tables) = host;
                let ptr0 = arg1;
                let len0 = arg2;
                let param0 = _tables
                    .connection_table
                    .get((arg0) as u32)
                    .ok_or_else(|| wasmtime::Trap::new("invalid handle index"))?;
                let param1 = _bc.slice_str(ptr0, len0)?;
                let result = host.connection_prepare(param0, param1);
                match result {
                    Ok(e) => {
                        let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                        let (_, _tables) = get(data);
                        caller_memory
                            .store(arg3 + 0, wit_bindgen_wasmtime::rt::as_i32(0i32) as u8)?;
                        caller_memory.store(
                            arg3 + 4,
                            wit_bindgen_wasmtime::rt::as_i32(
                                _tables.prepared_statement_table.insert(e) as i32,
                            ),
                        )?;
                    }
                    Err(e) => {
                        let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                        let (_, _tables) = get(data);
                        caller_memory
                            .store(arg3 + 0, wit_bindgen_wasmtime::rt::as_i32(1i32) as u8)?;
                        let SqlError {
                            code_numeric: code_numeric1,
                            code_text: code_text1,
                            message: message1,
                            extra: extra1,
                        } = e;
                        match code_numeric1 {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg3 + 4,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                caller_memory.store(
                                    arg3 + 8,
                                    wit_bindgen_wasmtime::rt::as_i32(
                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                    ),
                                )?;
                            }
                            None => {
                                let e = ();
                                {
                                    caller_memory.store(
                                        arg3 + 4,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                        match code_text1 {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg3 + 12,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                let vec2 = e;
                                let ptr2 = func_canonical_abi_realloc
                                    .call(&mut caller, (0, 0, 1, vec2.len() as i32))?;
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store_many(ptr2, vec2.as_bytes())?;
                                caller_memory.store(
                                    arg3 + 20,
                                    wit_bindgen_wasmtime::rt::as_i32(vec2.len() as i32),
                                )?;
                                caller_memory
                                    .store(arg3 + 16, wit_bindgen_wasmtime::rt::as_i32(ptr2))?;
                            }
                            None => {
                                let e = ();
                                {
                                    let (caller_memory, data) =
                                        memory.data_and_store_mut(&mut caller);
                                    let (_, _tables) = get(data);
                                    caller_memory.store(
                                        arg3 + 12,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                        let vec3 = message1;
                        let ptr3 = func_canonical_abi_realloc
                            .call(&mut caller, (0, 0, 1, vec3.len() as i32))?;
                        let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                        let (_, _tables) = get(data);
                        caller_memory.store_many(ptr3, vec3.as_bytes())?;
                        caller_memory.store(
                            arg3 + 28,
                            wit_bindgen_wasmtime::rt::as_i32(vec3.len() as i32),
                        )?;
                        caller_memory.store(arg3 + 24, wit_bindgen_wasmtime::rt::as_i32(ptr3))?;
                        match extra1 {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg3 + 32,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                let vec9 = e;
                                let len9 = vec9.len() as i32;
                                let result9 = func_canonical_abi_realloc
                                    .call(&mut caller, (0, 0, 8, len9 * 24))?;
                                for (i, e) in vec9.into_iter().enumerate() {
                                    let base = result9 + (i as i32) * 24;
                                    {
                                        let ValueMapItemResult {
                                            key: key4,
                                            value: value4,
                                        } = e;
                                        let vec5 = key4;
                                        let ptr5 = func_canonical_abi_realloc
                                            .call(&mut caller, (0, 0, 1, vec5.len() as i32))?;
                                        let (caller_memory, data) =
                                            memory.data_and_store_mut(&mut caller);
                                        let (_, _tables) = get(data);
                                        caller_memory.store_many(ptr5, vec5.as_bytes())?;
                                        caller_memory.store(
                                            base + 4,
                                            wit_bindgen_wasmtime::rt::as_i32(vec5.len() as i32),
                                        )?;
                                        caller_memory.store(
                                            base + 0,
                                            wit_bindgen_wasmtime::rt::as_i32(ptr5),
                                        )?;
                                        match value4 {
                                            ValueResult::Null => {
                                                let e = ();
                                                {
                                                    caller_memory.store(
                                                        base + 8,
                                                        wit_bindgen_wasmtime::rt::as_i32(0i32)
                                                            as u8,
                                                    )?;
                                                    let () = e;
                                                }
                                            }
                                            ValueResult::Boolean(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(match e {
                                                        true => 1,
                                                        false => 0,
                                                    })
                                                        as u8,
                                                )?;
                                            }
                                            ValueResult::Int8(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(2i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u8,
                                                )?;
                                            }
                                            ValueResult::Int16(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(3i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u16,
                                                )?;
                                            }
                                            ValueResult::Int32(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(4i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Int64(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(5i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i64(
                                                        wit_bindgen_wasmtime::rt::as_i64(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Uint8(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(6i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u8,
                                                )?;
                                            }
                                            ValueResult::Uint16(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(7i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u16,
                                                )?;
                                            }
                                            ValueResult::Uint32(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(8i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Uint64(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(9i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i64(
                                                        wit_bindgen_wasmtime::rt::as_i64(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Floating32(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(10i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_f32(e),
                                                )?;
                                            }
                                            ValueResult::Floating64(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(11i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_f64(e),
                                                )?;
                                            }
                                            ValueResult::Str(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(12i32) as u8,
                                                )?;
                                                let vec6 = e;
                                                let ptr6 = func_canonical_abi_realloc.call(
                                                    &mut caller,
                                                    (0, 0, 1, vec6.len() as i32),
                                                )?;
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store_many(ptr6, vec6.as_bytes())?;
                                                caller_memory.store(
                                                    base + 20,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        vec6.len() as i32
                                                    ),
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(ptr6),
                                                )?;
                                            }
                                            ValueResult::Bytes(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(13i32) as u8,
                                                )?;
                                                let vec7 = e;
                                                let ptr7 = func_canonical_abi_realloc.call(
                                                    &mut caller,
                                                    (0, 0, 1, (vec7.len() as i32) * 1),
                                                )?;
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store_many(ptr7, &vec7)?;
                                                caller_memory.store(
                                                    base + 20,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        vec7.len() as i32
                                                    ),
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(ptr7),
                                                )?;
                                            }
                                            ValueResult::Raw(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(14i32) as u8,
                                                )?;
                                                let vec8 = e;
                                                let ptr8 = func_canonical_abi_realloc.call(
                                                    &mut caller,
                                                    (0, 0, 1, (vec8.len() as i32) * 1),
                                                )?;
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store_many(ptr8, &vec8)?;
                                                caller_memory.store(
                                                    base + 20,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        vec8.len() as i32
                                                    ),
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(ptr8),
                                                )?;
                                            }
                                        };
                                    }
                                }
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory
                                    .store(arg3 + 40, wit_bindgen_wasmtime::rt::as_i32(len9))?;
                                caller_memory
                                    .store(arg3 + 36, wit_bindgen_wasmtime::rt::as_i32(result9))?;
                            }
                            None => {
                                let e = ();
                                {
                                    caller_memory.store(
                                        arg3 + 32,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                    }
                };
                Ok(())
            },
        )?;
        linker.func_wrap(
            "sql_v1_alpha1",
            "rows::columns",
            move |mut caller: wasmtime::Caller<'_, T>, arg0: i32, arg1: i32| {
                let func = get_func(&mut caller, "canonical_abi_realloc")?;
                let func_canonical_abi_realloc =
                    func.typed::<(i32, i32, i32, i32), i32, _>(&caller)?;
                let memory = &get_memory(&mut caller, "memory")?;
                let host = get(caller.data_mut());
                let (host, _tables) = host;
                let param0 = _tables
                    .rows_table
                    .get((arg0) as u32)
                    .ok_or_else(|| wasmtime::Trap::new("invalid handle index"))?;
                let result = host.rows_columns(param0);
                match result {
                    Ok(e) => {
                        let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                        let (_, _tables) = get(data);
                        caller_memory
                            .store(arg1 + 0, wit_bindgen_wasmtime::rt::as_i32(0i32) as u8)?;
                        let vec3 = e;
                        let len3 = vec3.len() as i32;
                        let result3 =
                            func_canonical_abi_realloc.call(&mut caller, (0, 0, 4, len3 * 16))?;
                        for (i, e) in vec3.into_iter().enumerate() {
                            let base = result3 + (i as i32) * 16;
                            {
                                let ColumnMeta {
                                    type_name: type_name0,
                                    name: name0,
                                } = e;
                                let vec1 = type_name0;
                                let ptr1 = func_canonical_abi_realloc
                                    .call(&mut caller, (0, 0, 1, vec1.len() as i32))?;
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store_many(ptr1, vec1.as_bytes())?;
                                caller_memory.store(
                                    base + 4,
                                    wit_bindgen_wasmtime::rt::as_i32(vec1.len() as i32),
                                )?;
                                caller_memory
                                    .store(base + 0, wit_bindgen_wasmtime::rt::as_i32(ptr1))?;
                                let vec2 = name0;
                                let ptr2 = func_canonical_abi_realloc
                                    .call(&mut caller, (0, 0, 1, vec2.len() as i32))?;
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store_many(ptr2, vec2.as_bytes())?;
                                caller_memory.store(
                                    base + 12,
                                    wit_bindgen_wasmtime::rt::as_i32(vec2.len() as i32),
                                )?;
                                caller_memory
                                    .store(base + 8, wit_bindgen_wasmtime::rt::as_i32(ptr2))?;
                            }
                        }
                        let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                        let (_, _tables) = get(data);
                        caller_memory.store(arg1 + 8, wit_bindgen_wasmtime::rt::as_i32(len3))?;
                        caller_memory.store(arg1 + 4, wit_bindgen_wasmtime::rt::as_i32(result3))?;
                    }
                    Err(e) => {
                        let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                        let (_, _tables) = get(data);
                        caller_memory
                            .store(arg1 + 0, wit_bindgen_wasmtime::rt::as_i32(1i32) as u8)?;
                        let SqlError {
                            code_numeric: code_numeric4,
                            code_text: code_text4,
                            message: message4,
                            extra: extra4,
                        } = e;
                        match code_numeric4 {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg1 + 4,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                caller_memory.store(
                                    arg1 + 8,
                                    wit_bindgen_wasmtime::rt::as_i32(
                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                    ),
                                )?;
                            }
                            None => {
                                let e = ();
                                {
                                    caller_memory.store(
                                        arg1 + 4,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                        match code_text4 {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg1 + 12,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                let vec5 = e;
                                let ptr5 = func_canonical_abi_realloc
                                    .call(&mut caller, (0, 0, 1, vec5.len() as i32))?;
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store_many(ptr5, vec5.as_bytes())?;
                                caller_memory.store(
                                    arg1 + 20,
                                    wit_bindgen_wasmtime::rt::as_i32(vec5.len() as i32),
                                )?;
                                caller_memory
                                    .store(arg1 + 16, wit_bindgen_wasmtime::rt::as_i32(ptr5))?;
                            }
                            None => {
                                let e = ();
                                {
                                    let (caller_memory, data) =
                                        memory.data_and_store_mut(&mut caller);
                                    let (_, _tables) = get(data);
                                    caller_memory.store(
                                        arg1 + 12,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                        let vec6 = message4;
                        let ptr6 = func_canonical_abi_realloc
                            .call(&mut caller, (0, 0, 1, vec6.len() as i32))?;
                        let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                        let (_, _tables) = get(data);
                        caller_memory.store_many(ptr6, vec6.as_bytes())?;
                        caller_memory.store(
                            arg1 + 28,
                            wit_bindgen_wasmtime::rt::as_i32(vec6.len() as i32),
                        )?;
                        caller_memory.store(arg1 + 24, wit_bindgen_wasmtime::rt::as_i32(ptr6))?;
                        match extra4 {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg1 + 32,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                let vec12 = e;
                                let len12 = vec12.len() as i32;
                                let result12 = func_canonical_abi_realloc
                                    .call(&mut caller, (0, 0, 8, len12 * 24))?;
                                for (i, e) in vec12.into_iter().enumerate() {
                                    let base = result12 + (i as i32) * 24;
                                    {
                                        let ValueMapItemResult {
                                            key: key7,
                                            value: value7,
                                        } = e;
                                        let vec8 = key7;
                                        let ptr8 = func_canonical_abi_realloc
                                            .call(&mut caller, (0, 0, 1, vec8.len() as i32))?;
                                        let (caller_memory, data) =
                                            memory.data_and_store_mut(&mut caller);
                                        let (_, _tables) = get(data);
                                        caller_memory.store_many(ptr8, vec8.as_bytes())?;
                                        caller_memory.store(
                                            base + 4,
                                            wit_bindgen_wasmtime::rt::as_i32(vec8.len() as i32),
                                        )?;
                                        caller_memory.store(
                                            base + 0,
                                            wit_bindgen_wasmtime::rt::as_i32(ptr8),
                                        )?;
                                        match value7 {
                                            ValueResult::Null => {
                                                let e = ();
                                                {
                                                    caller_memory.store(
                                                        base + 8,
                                                        wit_bindgen_wasmtime::rt::as_i32(0i32)
                                                            as u8,
                                                    )?;
                                                    let () = e;
                                                }
                                            }
                                            ValueResult::Boolean(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(match e {
                                                        true => 1,
                                                        false => 0,
                                                    })
                                                        as u8,
                                                )?;
                                            }
                                            ValueResult::Int8(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(2i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u8,
                                                )?;
                                            }
                                            ValueResult::Int16(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(3i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u16,
                                                )?;
                                            }
                                            ValueResult::Int32(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(4i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Int64(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(5i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i64(
                                                        wit_bindgen_wasmtime::rt::as_i64(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Uint8(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(6i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u8,
                                                )?;
                                            }
                                            ValueResult::Uint16(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(7i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u16,
                                                )?;
                                            }
                                            ValueResult::Uint32(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(8i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Uint64(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(9i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i64(
                                                        wit_bindgen_wasmtime::rt::as_i64(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Floating32(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(10i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_f32(e),
                                                )?;
                                            }
                                            ValueResult::Floating64(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(11i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_f64(e),
                                                )?;
                                            }
                                            ValueResult::Str(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(12i32) as u8,
                                                )?;
                                                let vec9 = e;
                                                let ptr9 = func_canonical_abi_realloc.call(
                                                    &mut caller,
                                                    (0, 0, 1, vec9.len() as i32),
                                                )?;
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store_many(ptr9, vec9.as_bytes())?;
                                                caller_memory.store(
                                                    base + 20,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        vec9.len() as i32
                                                    ),
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(ptr9),
                                                )?;
                                            }
                                            ValueResult::Bytes(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(13i32) as u8,
                                                )?;
                                                let vec10 = e;
                                                let ptr10 = func_canonical_abi_realloc.call(
                                                    &mut caller,
                                                    (0, 0, 1, (vec10.len() as i32) * 1),
                                                )?;
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store_many(ptr10, &vec10)?;
                                                caller_memory.store(
                                                    base + 20,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        vec10.len() as i32
                                                    ),
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(ptr10),
                                                )?;
                                            }
                                            ValueResult::Raw(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(14i32) as u8,
                                                )?;
                                                let vec11 = e;
                                                let ptr11 = func_canonical_abi_realloc.call(
                                                    &mut caller,
                                                    (0, 0, 1, (vec11.len() as i32) * 1),
                                                )?;
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store_many(ptr11, &vec11)?;
                                                caller_memory.store(
                                                    base + 20,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        vec11.len() as i32
                                                    ),
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(ptr11),
                                                )?;
                                            }
                                        };
                                    }
                                }
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory
                                    .store(arg1 + 40, wit_bindgen_wasmtime::rt::as_i32(len12))?;
                                caller_memory
                                    .store(arg1 + 36, wit_bindgen_wasmtime::rt::as_i32(result12))?;
                            }
                            None => {
                                let e = ();
                                {
                                    caller_memory.store(
                                        arg1 + 32,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                    }
                };
                Ok(())
            },
        )?;
        linker.func_wrap(
            "sql_v1_alpha1",
            "rows::next",
            move |mut caller: wasmtime::Caller<'_, T>, arg0: i32, arg1: i32| {
                let func = get_func(&mut caller, "canonical_abi_realloc")?;
                let func_canonical_abi_realloc =
                    func.typed::<(i32, i32, i32, i32), i32, _>(&caller)?;
                let memory = &get_memory(&mut caller, "memory")?;
                let host = get(caller.data_mut());
                let (host, _tables) = host;
                let param0 = _tables
                    .rows_table
                    .get((arg0) as u32)
                    .ok_or_else(|| wasmtime::Trap::new("invalid handle index"))?;
                let result = host.rows_next(param0);
                match result {
                    Ok(e) => {
                        let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                        let (_, _tables) = get(data);
                        caller_memory
                            .store(arg1 + 0, wit_bindgen_wasmtime::rt::as_i32(0i32) as u8)?;
                        match e {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg1 + 4,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                caller_memory.store(
                                    arg1 + 8,
                                    wit_bindgen_wasmtime::rt::as_i32(
                                        _tables.row_table.insert(e) as i32
                                    ),
                                )?;
                            }
                            None => {
                                let e = ();
                                {
                                    caller_memory.store(
                                        arg1 + 4,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                    }
                    Err(e) => {
                        let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                        let (_, _tables) = get(data);
                        caller_memory
                            .store(arg1 + 0, wit_bindgen_wasmtime::rt::as_i32(1i32) as u8)?;
                        let SqlError {
                            code_numeric: code_numeric0,
                            code_text: code_text0,
                            message: message0,
                            extra: extra0,
                        } = e;
                        match code_numeric0 {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg1 + 4,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                caller_memory.store(
                                    arg1 + 8,
                                    wit_bindgen_wasmtime::rt::as_i32(
                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                    ),
                                )?;
                            }
                            None => {
                                let e = ();
                                {
                                    caller_memory.store(
                                        arg1 + 4,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                        match code_text0 {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg1 + 12,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                let vec1 = e;
                                let ptr1 = func_canonical_abi_realloc
                                    .call(&mut caller, (0, 0, 1, vec1.len() as i32))?;
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store_many(ptr1, vec1.as_bytes())?;
                                caller_memory.store(
                                    arg1 + 20,
                                    wit_bindgen_wasmtime::rt::as_i32(vec1.len() as i32),
                                )?;
                                caller_memory
                                    .store(arg1 + 16, wit_bindgen_wasmtime::rt::as_i32(ptr1))?;
                            }
                            None => {
                                let e = ();
                                {
                                    let (caller_memory, data) =
                                        memory.data_and_store_mut(&mut caller);
                                    let (_, _tables) = get(data);
                                    caller_memory.store(
                                        arg1 + 12,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                        let vec2 = message0;
                        let ptr2 = func_canonical_abi_realloc
                            .call(&mut caller, (0, 0, 1, vec2.len() as i32))?;
                        let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                        let (_, _tables) = get(data);
                        caller_memory.store_many(ptr2, vec2.as_bytes())?;
                        caller_memory.store(
                            arg1 + 28,
                            wit_bindgen_wasmtime::rt::as_i32(vec2.len() as i32),
                        )?;
                        caller_memory.store(arg1 + 24, wit_bindgen_wasmtime::rt::as_i32(ptr2))?;
                        match extra0 {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg1 + 32,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                let vec8 = e;
                                let len8 = vec8.len() as i32;
                                let result8 = func_canonical_abi_realloc
                                    .call(&mut caller, (0, 0, 8, len8 * 24))?;
                                for (i, e) in vec8.into_iter().enumerate() {
                                    let base = result8 + (i as i32) * 24;
                                    {
                                        let ValueMapItemResult {
                                            key: key3,
                                            value: value3,
                                        } = e;
                                        let vec4 = key3;
                                        let ptr4 = func_canonical_abi_realloc
                                            .call(&mut caller, (0, 0, 1, vec4.len() as i32))?;
                                        let (caller_memory, data) =
                                            memory.data_and_store_mut(&mut caller);
                                        let (_, _tables) = get(data);
                                        caller_memory.store_many(ptr4, vec4.as_bytes())?;
                                        caller_memory.store(
                                            base + 4,
                                            wit_bindgen_wasmtime::rt::as_i32(vec4.len() as i32),
                                        )?;
                                        caller_memory.store(
                                            base + 0,
                                            wit_bindgen_wasmtime::rt::as_i32(ptr4),
                                        )?;
                                        match value3 {
                                            ValueResult::Null => {
                                                let e = ();
                                                {
                                                    caller_memory.store(
                                                        base + 8,
                                                        wit_bindgen_wasmtime::rt::as_i32(0i32)
                                                            as u8,
                                                    )?;
                                                    let () = e;
                                                }
                                            }
                                            ValueResult::Boolean(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(match e {
                                                        true => 1,
                                                        false => 0,
                                                    })
                                                        as u8,
                                                )?;
                                            }
                                            ValueResult::Int8(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(2i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u8,
                                                )?;
                                            }
                                            ValueResult::Int16(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(3i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u16,
                                                )?;
                                            }
                                            ValueResult::Int32(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(4i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Int64(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(5i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i64(
                                                        wit_bindgen_wasmtime::rt::as_i64(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Uint8(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(6i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u8,
                                                )?;
                                            }
                                            ValueResult::Uint16(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(7i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u16,
                                                )?;
                                            }
                                            ValueResult::Uint32(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(8i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Uint64(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(9i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i64(
                                                        wit_bindgen_wasmtime::rt::as_i64(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Floating32(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(10i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_f32(e),
                                                )?;
                                            }
                                            ValueResult::Floating64(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(11i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_f64(e),
                                                )?;
                                            }
                                            ValueResult::Str(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(12i32) as u8,
                                                )?;
                                                let vec5 = e;
                                                let ptr5 = func_canonical_abi_realloc.call(
                                                    &mut caller,
                                                    (0, 0, 1, vec5.len() as i32),
                                                )?;
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store_many(ptr5, vec5.as_bytes())?;
                                                caller_memory.store(
                                                    base + 20,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        vec5.len() as i32
                                                    ),
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(ptr5),
                                                )?;
                                            }
                                            ValueResult::Bytes(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(13i32) as u8,
                                                )?;
                                                let vec6 = e;
                                                let ptr6 = func_canonical_abi_realloc.call(
                                                    &mut caller,
                                                    (0, 0, 1, (vec6.len() as i32) * 1),
                                                )?;
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store_many(ptr6, &vec6)?;
                                                caller_memory.store(
                                                    base + 20,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        vec6.len() as i32
                                                    ),
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(ptr6),
                                                )?;
                                            }
                                            ValueResult::Raw(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(14i32) as u8,
                                                )?;
                                                let vec7 = e;
                                                let ptr7 = func_canonical_abi_realloc.call(
                                                    &mut caller,
                                                    (0, 0, 1, (vec7.len() as i32) * 1),
                                                )?;
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store_many(ptr7, &vec7)?;
                                                caller_memory.store(
                                                    base + 20,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        vec7.len() as i32
                                                    ),
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(ptr7),
                                                )?;
                                            }
                                        };
                                    }
                                }
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory
                                    .store(arg1 + 40, wit_bindgen_wasmtime::rt::as_i32(len8))?;
                                caller_memory
                                    .store(arg1 + 36, wit_bindgen_wasmtime::rt::as_i32(result8))?;
                            }
                            None => {
                                let e = ();
                                {
                                    caller_memory.store(
                                        arg1 + 32,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                    }
                };
                Ok(())
            },
        )?;
        linker.func_wrap(
            "sql_v1_alpha1",
            "rows::next-values",
            move |mut caller: wasmtime::Caller<'_, T>, arg0: i32, arg1: i32| {
                let func = get_func(&mut caller, "canonical_abi_realloc")?;
                let func_canonical_abi_realloc =
                    func.typed::<(i32, i32, i32, i32), i32, _>(&caller)?;
                let memory = &get_memory(&mut caller, "memory")?;
                let host = get(caller.data_mut());
                let (host, _tables) = host;
                let param0 = _tables
                    .rows_table
                    .get((arg0) as u32)
                    .ok_or_else(|| wasmtime::Trap::new("invalid handle index"))?;
                let result = host.rows_next_values(param0);
                match result {
                    Ok(e) => {
                        let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                        let (_, _tables) = get(data);
                        caller_memory
                            .store(arg1 + 0, wit_bindgen_wasmtime::rt::as_i32(0i32) as u8)?;
                        match e {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg1 + 4,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                let vec3 = e;
                                let len3 = vec3.len() as i32;
                                let result3 = func_canonical_abi_realloc
                                    .call(&mut caller, (0, 0, 8, len3 * 16))?;
                                for (i, e) in vec3.into_iter().enumerate() {
                                    let base = result3 + (i as i32) * 16;
                                    {
                                        match e {
                                            ValueResult::Null => {
                                                let e = ();
                                                {
                                                    let (caller_memory, data) =
                                                        memory.data_and_store_mut(&mut caller);
                                                    let (_, _tables) = get(data);
                                                    caller_memory.store(
                                                        base + 0,
                                                        wit_bindgen_wasmtime::rt::as_i32(0i32)
                                                            as u8,
                                                    )?;
                                                    let () = e;
                                                }
                                            }
                                            ValueResult::Boolean(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 0,
                                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(match e {
                                                        true => 1,
                                                        false => 0,
                                                    })
                                                        as u8,
                                                )?;
                                            }
                                            ValueResult::Int8(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 0,
                                                    wit_bindgen_wasmtime::rt::as_i32(2i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u8,
                                                )?;
                                            }
                                            ValueResult::Int16(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 0,
                                                    wit_bindgen_wasmtime::rt::as_i32(3i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u16,
                                                )?;
                                            }
                                            ValueResult::Int32(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 0,
                                                    wit_bindgen_wasmtime::rt::as_i32(4i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Int64(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 0,
                                                    wit_bindgen_wasmtime::rt::as_i32(5i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i64(
                                                        wit_bindgen_wasmtime::rt::as_i64(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Uint8(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 0,
                                                    wit_bindgen_wasmtime::rt::as_i32(6i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u8,
                                                )?;
                                            }
                                            ValueResult::Uint16(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 0,
                                                    wit_bindgen_wasmtime::rt::as_i32(7i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u16,
                                                )?;
                                            }
                                            ValueResult::Uint32(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 0,
                                                    wit_bindgen_wasmtime::rt::as_i32(8i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Uint64(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 0,
                                                    wit_bindgen_wasmtime::rt::as_i32(9i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i64(
                                                        wit_bindgen_wasmtime::rt::as_i64(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Floating32(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 0,
                                                    wit_bindgen_wasmtime::rt::as_i32(10i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_f32(e),
                                                )?;
                                            }
                                            ValueResult::Floating64(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 0,
                                                    wit_bindgen_wasmtime::rt::as_i32(11i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_f64(e),
                                                )?;
                                            }
                                            ValueResult::Str(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 0,
                                                    wit_bindgen_wasmtime::rt::as_i32(12i32) as u8,
                                                )?;
                                                let vec0 = e;
                                                let ptr0 = func_canonical_abi_realloc.call(
                                                    &mut caller,
                                                    (0, 0, 1, vec0.len() as i32),
                                                )?;
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store_many(ptr0, vec0.as_bytes())?;
                                                caller_memory.store(
                                                    base + 12,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        vec0.len() as i32
                                                    ),
                                                )?;
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(ptr0),
                                                )?;
                                            }
                                            ValueResult::Bytes(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 0,
                                                    wit_bindgen_wasmtime::rt::as_i32(13i32) as u8,
                                                )?;
                                                let vec1 = e;
                                                let ptr1 = func_canonical_abi_realloc.call(
                                                    &mut caller,
                                                    (0, 0, 1, (vec1.len() as i32) * 1),
                                                )?;
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store_many(ptr1, &vec1)?;
                                                caller_memory.store(
                                                    base + 12,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        vec1.len() as i32
                                                    ),
                                                )?;
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(ptr1),
                                                )?;
                                            }
                                            ValueResult::Raw(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 0,
                                                    wit_bindgen_wasmtime::rt::as_i32(14i32) as u8,
                                                )?;
                                                let vec2 = e;
                                                let ptr2 = func_canonical_abi_realloc.call(
                                                    &mut caller,
                                                    (0, 0, 1, (vec2.len() as i32) * 1),
                                                )?;
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store_many(ptr2, &vec2)?;
                                                caller_memory.store(
                                                    base + 12,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        vec2.len() as i32
                                                    ),
                                                )?;
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(ptr2),
                                                )?;
                                            }
                                        };
                                    }
                                }
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory
                                    .store(arg1 + 12, wit_bindgen_wasmtime::rt::as_i32(len3))?;
                                caller_memory
                                    .store(arg1 + 8, wit_bindgen_wasmtime::rt::as_i32(result3))?;
                            }
                            None => {
                                let e = ();
                                {
                                    caller_memory.store(
                                        arg1 + 4,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                    }
                    Err(e) => {
                        let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                        let (_, _tables) = get(data);
                        caller_memory
                            .store(arg1 + 0, wit_bindgen_wasmtime::rt::as_i32(1i32) as u8)?;
                        let SqlError {
                            code_numeric: code_numeric4,
                            code_text: code_text4,
                            message: message4,
                            extra: extra4,
                        } = e;
                        match code_numeric4 {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg1 + 4,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                caller_memory.store(
                                    arg1 + 8,
                                    wit_bindgen_wasmtime::rt::as_i32(
                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                    ),
                                )?;
                            }
                            None => {
                                let e = ();
                                {
                                    caller_memory.store(
                                        arg1 + 4,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                        match code_text4 {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg1 + 12,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                let vec5 = e;
                                let ptr5 = func_canonical_abi_realloc
                                    .call(&mut caller, (0, 0, 1, vec5.len() as i32))?;
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store_many(ptr5, vec5.as_bytes())?;
                                caller_memory.store(
                                    arg1 + 20,
                                    wit_bindgen_wasmtime::rt::as_i32(vec5.len() as i32),
                                )?;
                                caller_memory
                                    .store(arg1 + 16, wit_bindgen_wasmtime::rt::as_i32(ptr5))?;
                            }
                            None => {
                                let e = ();
                                {
                                    let (caller_memory, data) =
                                        memory.data_and_store_mut(&mut caller);
                                    let (_, _tables) = get(data);
                                    caller_memory.store(
                                        arg1 + 12,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                        let vec6 = message4;
                        let ptr6 = func_canonical_abi_realloc
                            .call(&mut caller, (0, 0, 1, vec6.len() as i32))?;
                        let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                        let (_, _tables) = get(data);
                        caller_memory.store_many(ptr6, vec6.as_bytes())?;
                        caller_memory.store(
                            arg1 + 28,
                            wit_bindgen_wasmtime::rt::as_i32(vec6.len() as i32),
                        )?;
                        caller_memory.store(arg1 + 24, wit_bindgen_wasmtime::rt::as_i32(ptr6))?;
                        match extra4 {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg1 + 32,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                let vec12 = e;
                                let len12 = vec12.len() as i32;
                                let result12 = func_canonical_abi_realloc
                                    .call(&mut caller, (0, 0, 8, len12 * 24))?;
                                for (i, e) in vec12.into_iter().enumerate() {
                                    let base = result12 + (i as i32) * 24;
                                    {
                                        let ValueMapItemResult {
                                            key: key7,
                                            value: value7,
                                        } = e;
                                        let vec8 = key7;
                                        let ptr8 = func_canonical_abi_realloc
                                            .call(&mut caller, (0, 0, 1, vec8.len() as i32))?;
                                        let (caller_memory, data) =
                                            memory.data_and_store_mut(&mut caller);
                                        let (_, _tables) = get(data);
                                        caller_memory.store_many(ptr8, vec8.as_bytes())?;
                                        caller_memory.store(
                                            base + 4,
                                            wit_bindgen_wasmtime::rt::as_i32(vec8.len() as i32),
                                        )?;
                                        caller_memory.store(
                                            base + 0,
                                            wit_bindgen_wasmtime::rt::as_i32(ptr8),
                                        )?;
                                        match value7 {
                                            ValueResult::Null => {
                                                let e = ();
                                                {
                                                    caller_memory.store(
                                                        base + 8,
                                                        wit_bindgen_wasmtime::rt::as_i32(0i32)
                                                            as u8,
                                                    )?;
                                                    let () = e;
                                                }
                                            }
                                            ValueResult::Boolean(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(match e {
                                                        true => 1,
                                                        false => 0,
                                                    })
                                                        as u8,
                                                )?;
                                            }
                                            ValueResult::Int8(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(2i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u8,
                                                )?;
                                            }
                                            ValueResult::Int16(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(3i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u16,
                                                )?;
                                            }
                                            ValueResult::Int32(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(4i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Int64(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(5i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i64(
                                                        wit_bindgen_wasmtime::rt::as_i64(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Uint8(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(6i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u8,
                                                )?;
                                            }
                                            ValueResult::Uint16(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(7i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u16,
                                                )?;
                                            }
                                            ValueResult::Uint32(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(8i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Uint64(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(9i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i64(
                                                        wit_bindgen_wasmtime::rt::as_i64(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Floating32(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(10i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_f32(e),
                                                )?;
                                            }
                                            ValueResult::Floating64(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(11i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_f64(e),
                                                )?;
                                            }
                                            ValueResult::Str(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(12i32) as u8,
                                                )?;
                                                let vec9 = e;
                                                let ptr9 = func_canonical_abi_realloc.call(
                                                    &mut caller,
                                                    (0, 0, 1, vec9.len() as i32),
                                                )?;
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store_many(ptr9, vec9.as_bytes())?;
                                                caller_memory.store(
                                                    base + 20,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        vec9.len() as i32
                                                    ),
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(ptr9),
                                                )?;
                                            }
                                            ValueResult::Bytes(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(13i32) as u8,
                                                )?;
                                                let vec10 = e;
                                                let ptr10 = func_canonical_abi_realloc.call(
                                                    &mut caller,
                                                    (0, 0, 1, (vec10.len() as i32) * 1),
                                                )?;
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store_many(ptr10, &vec10)?;
                                                caller_memory.store(
                                                    base + 20,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        vec10.len() as i32
                                                    ),
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(ptr10),
                                                )?;
                                            }
                                            ValueResult::Raw(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(14i32) as u8,
                                                )?;
                                                let vec11 = e;
                                                let ptr11 = func_canonical_abi_realloc.call(
                                                    &mut caller,
                                                    (0, 0, 1, (vec11.len() as i32) * 1),
                                                )?;
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store_many(ptr11, &vec11)?;
                                                caller_memory.store(
                                                    base + 20,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        vec11.len() as i32
                                                    ),
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(ptr11),
                                                )?;
                                            }
                                        };
                                    }
                                }
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory
                                    .store(arg1 + 40, wit_bindgen_wasmtime::rt::as_i32(len12))?;
                                caller_memory
                                    .store(arg1 + 36, wit_bindgen_wasmtime::rt::as_i32(result12))?;
                            }
                            None => {
                                let e = ();
                                {
                                    caller_memory.store(
                                        arg1 + 32,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                    }
                };
                Ok(())
            },
        )?;
        linker.func_wrap(
            "sql_v1_alpha1",
            "rows::values",
            move |mut caller: wasmtime::Caller<'_, T>, arg0: i32, arg1: i32| {
                let func = get_func(&mut caller, "canonical_abi_realloc")?;
                let func_canonical_abi_realloc =
                    func.typed::<(i32, i32, i32, i32), i32, _>(&caller)?;
                let memory = &get_memory(&mut caller, "memory")?;
                let host = get(caller.data_mut());
                let (host, _tables) = host;
                let param0 = _tables
                    .rows_table
                    .get((arg0) as u32)
                    .ok_or_else(|| wasmtime::Trap::new("invalid handle index"))?;
                let result = host.rows_values(param0);
                match result {
                    Ok(e) => {
                        let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                        let (_, _tables) = get(data);
                        caller_memory
                            .store(arg1 + 0, wit_bindgen_wasmtime::rt::as_i32(0i32) as u8)?;
                        let vec4 = e;
                        let len4 = vec4.len() as i32;
                        let result4 =
                            func_canonical_abi_realloc.call(&mut caller, (0, 0, 4, len4 * 8))?;
                        for (i, e) in vec4.into_iter().enumerate() {
                            let base = result4 + (i as i32) * 8;
                            {
                                let vec3 = e;
                                let len3 = vec3.len() as i32;
                                let result3 = func_canonical_abi_realloc
                                    .call(&mut caller, (0, 0, 8, len3 * 16))?;
                                for (i, e) in vec3.into_iter().enumerate() {
                                    let base = result3 + (i as i32) * 16;
                                    {
                                        match e {
                                            ValueResult::Null => {
                                                let e = ();
                                                {
                                                    let (caller_memory, data) =
                                                        memory.data_and_store_mut(&mut caller);
                                                    let (_, _tables) = get(data);
                                                    caller_memory.store(
                                                        base + 0,
                                                        wit_bindgen_wasmtime::rt::as_i32(0i32)
                                                            as u8,
                                                    )?;
                                                    let () = e;
                                                }
                                            }
                                            ValueResult::Boolean(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 0,
                                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(match e {
                                                        true => 1,
                                                        false => 0,
                                                    })
                                                        as u8,
                                                )?;
                                            }
                                            ValueResult::Int8(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 0,
                                                    wit_bindgen_wasmtime::rt::as_i32(2i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u8,
                                                )?;
                                            }
                                            ValueResult::Int16(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 0,
                                                    wit_bindgen_wasmtime::rt::as_i32(3i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u16,
                                                )?;
                                            }
                                            ValueResult::Int32(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 0,
                                                    wit_bindgen_wasmtime::rt::as_i32(4i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Int64(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 0,
                                                    wit_bindgen_wasmtime::rt::as_i32(5i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i64(
                                                        wit_bindgen_wasmtime::rt::as_i64(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Uint8(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 0,
                                                    wit_bindgen_wasmtime::rt::as_i32(6i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u8,
                                                )?;
                                            }
                                            ValueResult::Uint16(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 0,
                                                    wit_bindgen_wasmtime::rt::as_i32(7i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u16,
                                                )?;
                                            }
                                            ValueResult::Uint32(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 0,
                                                    wit_bindgen_wasmtime::rt::as_i32(8i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Uint64(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 0,
                                                    wit_bindgen_wasmtime::rt::as_i32(9i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i64(
                                                        wit_bindgen_wasmtime::rt::as_i64(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Floating32(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 0,
                                                    wit_bindgen_wasmtime::rt::as_i32(10i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_f32(e),
                                                )?;
                                            }
                                            ValueResult::Floating64(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 0,
                                                    wit_bindgen_wasmtime::rt::as_i32(11i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_f64(e),
                                                )?;
                                            }
                                            ValueResult::Str(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 0,
                                                    wit_bindgen_wasmtime::rt::as_i32(12i32) as u8,
                                                )?;
                                                let vec0 = e;
                                                let ptr0 = func_canonical_abi_realloc.call(
                                                    &mut caller,
                                                    (0, 0, 1, vec0.len() as i32),
                                                )?;
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store_many(ptr0, vec0.as_bytes())?;
                                                caller_memory.store(
                                                    base + 12,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        vec0.len() as i32
                                                    ),
                                                )?;
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(ptr0),
                                                )?;
                                            }
                                            ValueResult::Bytes(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 0,
                                                    wit_bindgen_wasmtime::rt::as_i32(13i32) as u8,
                                                )?;
                                                let vec1 = e;
                                                let ptr1 = func_canonical_abi_realloc.call(
                                                    &mut caller,
                                                    (0, 0, 1, (vec1.len() as i32) * 1),
                                                )?;
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store_many(ptr1, &vec1)?;
                                                caller_memory.store(
                                                    base + 12,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        vec1.len() as i32
                                                    ),
                                                )?;
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(ptr1),
                                                )?;
                                            }
                                            ValueResult::Raw(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 0,
                                                    wit_bindgen_wasmtime::rt::as_i32(14i32) as u8,
                                                )?;
                                                let vec2 = e;
                                                let ptr2 = func_canonical_abi_realloc.call(
                                                    &mut caller,
                                                    (0, 0, 1, (vec2.len() as i32) * 1),
                                                )?;
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store_many(ptr2, &vec2)?;
                                                caller_memory.store(
                                                    base + 12,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        vec2.len() as i32
                                                    ),
                                                )?;
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(ptr2),
                                                )?;
                                            }
                                        };
                                    }
                                }
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory
                                    .store(base + 4, wit_bindgen_wasmtime::rt::as_i32(len3))?;
                                caller_memory
                                    .store(base + 0, wit_bindgen_wasmtime::rt::as_i32(result3))?;
                            }
                        }
                        let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                        let (_, _tables) = get(data);
                        caller_memory.store(arg1 + 8, wit_bindgen_wasmtime::rt::as_i32(len4))?;
                        caller_memory.store(arg1 + 4, wit_bindgen_wasmtime::rt::as_i32(result4))?;
                    }
                    Err(e) => {
                        let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                        let (_, _tables) = get(data);
                        caller_memory
                            .store(arg1 + 0, wit_bindgen_wasmtime::rt::as_i32(1i32) as u8)?;
                        let SqlError {
                            code_numeric: code_numeric5,
                            code_text: code_text5,
                            message: message5,
                            extra: extra5,
                        } = e;
                        match code_numeric5 {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg1 + 4,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                caller_memory.store(
                                    arg1 + 8,
                                    wit_bindgen_wasmtime::rt::as_i32(
                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                    ),
                                )?;
                            }
                            None => {
                                let e = ();
                                {
                                    caller_memory.store(
                                        arg1 + 4,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                        match code_text5 {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg1 + 12,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                let vec6 = e;
                                let ptr6 = func_canonical_abi_realloc
                                    .call(&mut caller, (0, 0, 1, vec6.len() as i32))?;
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store_many(ptr6, vec6.as_bytes())?;
                                caller_memory.store(
                                    arg1 + 20,
                                    wit_bindgen_wasmtime::rt::as_i32(vec6.len() as i32),
                                )?;
                                caller_memory
                                    .store(arg1 + 16, wit_bindgen_wasmtime::rt::as_i32(ptr6))?;
                            }
                            None => {
                                let e = ();
                                {
                                    let (caller_memory, data) =
                                        memory.data_and_store_mut(&mut caller);
                                    let (_, _tables) = get(data);
                                    caller_memory.store(
                                        arg1 + 12,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                        let vec7 = message5;
                        let ptr7 = func_canonical_abi_realloc
                            .call(&mut caller, (0, 0, 1, vec7.len() as i32))?;
                        let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                        let (_, _tables) = get(data);
                        caller_memory.store_many(ptr7, vec7.as_bytes())?;
                        caller_memory.store(
                            arg1 + 28,
                            wit_bindgen_wasmtime::rt::as_i32(vec7.len() as i32),
                        )?;
                        caller_memory.store(arg1 + 24, wit_bindgen_wasmtime::rt::as_i32(ptr7))?;
                        match extra5 {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg1 + 32,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                let vec13 = e;
                                let len13 = vec13.len() as i32;
                                let result13 = func_canonical_abi_realloc
                                    .call(&mut caller, (0, 0, 8, len13 * 24))?;
                                for (i, e) in vec13.into_iter().enumerate() {
                                    let base = result13 + (i as i32) * 24;
                                    {
                                        let ValueMapItemResult {
                                            key: key8,
                                            value: value8,
                                        } = e;
                                        let vec9 = key8;
                                        let ptr9 = func_canonical_abi_realloc
                                            .call(&mut caller, (0, 0, 1, vec9.len() as i32))?;
                                        let (caller_memory, data) =
                                            memory.data_and_store_mut(&mut caller);
                                        let (_, _tables) = get(data);
                                        caller_memory.store_many(ptr9, vec9.as_bytes())?;
                                        caller_memory.store(
                                            base + 4,
                                            wit_bindgen_wasmtime::rt::as_i32(vec9.len() as i32),
                                        )?;
                                        caller_memory.store(
                                            base + 0,
                                            wit_bindgen_wasmtime::rt::as_i32(ptr9),
                                        )?;
                                        match value8 {
                                            ValueResult::Null => {
                                                let e = ();
                                                {
                                                    caller_memory.store(
                                                        base + 8,
                                                        wit_bindgen_wasmtime::rt::as_i32(0i32)
                                                            as u8,
                                                    )?;
                                                    let () = e;
                                                }
                                            }
                                            ValueResult::Boolean(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(match e {
                                                        true => 1,
                                                        false => 0,
                                                    })
                                                        as u8,
                                                )?;
                                            }
                                            ValueResult::Int8(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(2i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u8,
                                                )?;
                                            }
                                            ValueResult::Int16(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(3i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u16,
                                                )?;
                                            }
                                            ValueResult::Int32(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(4i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Int64(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(5i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i64(
                                                        wit_bindgen_wasmtime::rt::as_i64(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Uint8(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(6i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u8,
                                                )?;
                                            }
                                            ValueResult::Uint16(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(7i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u16,
                                                )?;
                                            }
                                            ValueResult::Uint32(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(8i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Uint64(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(9i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i64(
                                                        wit_bindgen_wasmtime::rt::as_i64(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Floating32(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(10i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_f32(e),
                                                )?;
                                            }
                                            ValueResult::Floating64(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(11i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_f64(e),
                                                )?;
                                            }
                                            ValueResult::Str(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(12i32) as u8,
                                                )?;
                                                let vec10 = e;
                                                let ptr10 = func_canonical_abi_realloc.call(
                                                    &mut caller,
                                                    (0, 0, 1, vec10.len() as i32),
                                                )?;
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory
                                                    .store_many(ptr10, vec10.as_bytes())?;
                                                caller_memory.store(
                                                    base + 20,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        vec10.len() as i32
                                                    ),
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(ptr10),
                                                )?;
                                            }
                                            ValueResult::Bytes(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(13i32) as u8,
                                                )?;
                                                let vec11 = e;
                                                let ptr11 = func_canonical_abi_realloc.call(
                                                    &mut caller,
                                                    (0, 0, 1, (vec11.len() as i32) * 1),
                                                )?;
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store_many(ptr11, &vec11)?;
                                                caller_memory.store(
                                                    base + 20,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        vec11.len() as i32
                                                    ),
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(ptr11),
                                                )?;
                                            }
                                            ValueResult::Raw(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(14i32) as u8,
                                                )?;
                                                let vec12 = e;
                                                let ptr12 = func_canonical_abi_realloc.call(
                                                    &mut caller,
                                                    (0, 0, 1, (vec12.len() as i32) * 1),
                                                )?;
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store_many(ptr12, &vec12)?;
                                                caller_memory.store(
                                                    base + 20,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        vec12.len() as i32
                                                    ),
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(ptr12),
                                                )?;
                                            }
                                        };
                                    }
                                }
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory
                                    .store(arg1 + 40, wit_bindgen_wasmtime::rt::as_i32(len13))?;
                                caller_memory
                                    .store(arg1 + 36, wit_bindgen_wasmtime::rt::as_i32(result13))?;
                            }
                            None => {
                                let e = ();
                                {
                                    caller_memory.store(
                                        arg1 + 32,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                    }
                };
                Ok(())
            },
        )?;
        linker.func_wrap(
            "sql_v1_alpha1",
            "rows::close",
            move |mut caller: wasmtime::Caller<'_, T>, arg0: i32, arg1: i32| {
                let func = get_func(&mut caller, "canonical_abi_realloc")?;
                let func_canonical_abi_realloc =
                    func.typed::<(i32, i32, i32, i32), i32, _>(&caller)?;
                let memory = &get_memory(&mut caller, "memory")?;
                let host = get(caller.data_mut());
                let (host, _tables) = host;
                let param0 = _tables
                    .rows_table
                    .get((arg0) as u32)
                    .ok_or_else(|| wasmtime::Trap::new("invalid handle index"))?;
                let result = host.rows_close(param0);
                match result {
                    Ok(e) => {
                        let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                        let (_, _tables) = get(data);
                        caller_memory
                            .store(arg1 + 0, wit_bindgen_wasmtime::rt::as_i32(0i32) as u8)?;
                        let () = e;
                    }
                    Err(e) => {
                        let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                        let (_, _tables) = get(data);
                        caller_memory
                            .store(arg1 + 0, wit_bindgen_wasmtime::rt::as_i32(1i32) as u8)?;
                        let SqlError {
                            code_numeric: code_numeric0,
                            code_text: code_text0,
                            message: message0,
                            extra: extra0,
                        } = e;
                        match code_numeric0 {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg1 + 4,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                caller_memory.store(
                                    arg1 + 8,
                                    wit_bindgen_wasmtime::rt::as_i32(
                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                    ),
                                )?;
                            }
                            None => {
                                let e = ();
                                {
                                    caller_memory.store(
                                        arg1 + 4,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                        match code_text0 {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg1 + 12,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                let vec1 = e;
                                let ptr1 = func_canonical_abi_realloc
                                    .call(&mut caller, (0, 0, 1, vec1.len() as i32))?;
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store_many(ptr1, vec1.as_bytes())?;
                                caller_memory.store(
                                    arg1 + 20,
                                    wit_bindgen_wasmtime::rt::as_i32(vec1.len() as i32),
                                )?;
                                caller_memory
                                    .store(arg1 + 16, wit_bindgen_wasmtime::rt::as_i32(ptr1))?;
                            }
                            None => {
                                let e = ();
                                {
                                    let (caller_memory, data) =
                                        memory.data_and_store_mut(&mut caller);
                                    let (_, _tables) = get(data);
                                    caller_memory.store(
                                        arg1 + 12,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                        let vec2 = message0;
                        let ptr2 = func_canonical_abi_realloc
                            .call(&mut caller, (0, 0, 1, vec2.len() as i32))?;
                        let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                        let (_, _tables) = get(data);
                        caller_memory.store_many(ptr2, vec2.as_bytes())?;
                        caller_memory.store(
                            arg1 + 28,
                            wit_bindgen_wasmtime::rt::as_i32(vec2.len() as i32),
                        )?;
                        caller_memory.store(arg1 + 24, wit_bindgen_wasmtime::rt::as_i32(ptr2))?;
                        match extra0 {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg1 + 32,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                let vec8 = e;
                                let len8 = vec8.len() as i32;
                                let result8 = func_canonical_abi_realloc
                                    .call(&mut caller, (0, 0, 8, len8 * 24))?;
                                for (i, e) in vec8.into_iter().enumerate() {
                                    let base = result8 + (i as i32) * 24;
                                    {
                                        let ValueMapItemResult {
                                            key: key3,
                                            value: value3,
                                        } = e;
                                        let vec4 = key3;
                                        let ptr4 = func_canonical_abi_realloc
                                            .call(&mut caller, (0, 0, 1, vec4.len() as i32))?;
                                        let (caller_memory, data) =
                                            memory.data_and_store_mut(&mut caller);
                                        let (_, _tables) = get(data);
                                        caller_memory.store_many(ptr4, vec4.as_bytes())?;
                                        caller_memory.store(
                                            base + 4,
                                            wit_bindgen_wasmtime::rt::as_i32(vec4.len() as i32),
                                        )?;
                                        caller_memory.store(
                                            base + 0,
                                            wit_bindgen_wasmtime::rt::as_i32(ptr4),
                                        )?;
                                        match value3 {
                                            ValueResult::Null => {
                                                let e = ();
                                                {
                                                    caller_memory.store(
                                                        base + 8,
                                                        wit_bindgen_wasmtime::rt::as_i32(0i32)
                                                            as u8,
                                                    )?;
                                                    let () = e;
                                                }
                                            }
                                            ValueResult::Boolean(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(match e {
                                                        true => 1,
                                                        false => 0,
                                                    })
                                                        as u8,
                                                )?;
                                            }
                                            ValueResult::Int8(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(2i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u8,
                                                )?;
                                            }
                                            ValueResult::Int16(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(3i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u16,
                                                )?;
                                            }
                                            ValueResult::Int32(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(4i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Int64(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(5i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i64(
                                                        wit_bindgen_wasmtime::rt::as_i64(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Uint8(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(6i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u8,
                                                )?;
                                            }
                                            ValueResult::Uint16(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(7i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u16,
                                                )?;
                                            }
                                            ValueResult::Uint32(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(8i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Uint64(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(9i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i64(
                                                        wit_bindgen_wasmtime::rt::as_i64(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Floating32(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(10i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_f32(e),
                                                )?;
                                            }
                                            ValueResult::Floating64(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(11i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_f64(e),
                                                )?;
                                            }
                                            ValueResult::Str(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(12i32) as u8,
                                                )?;
                                                let vec5 = e;
                                                let ptr5 = func_canonical_abi_realloc.call(
                                                    &mut caller,
                                                    (0, 0, 1, vec5.len() as i32),
                                                )?;
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store_many(ptr5, vec5.as_bytes())?;
                                                caller_memory.store(
                                                    base + 20,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        vec5.len() as i32
                                                    ),
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(ptr5),
                                                )?;
                                            }
                                            ValueResult::Bytes(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(13i32) as u8,
                                                )?;
                                                let vec6 = e;
                                                let ptr6 = func_canonical_abi_realloc.call(
                                                    &mut caller,
                                                    (0, 0, 1, (vec6.len() as i32) * 1),
                                                )?;
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store_many(ptr6, &vec6)?;
                                                caller_memory.store(
                                                    base + 20,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        vec6.len() as i32
                                                    ),
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(ptr6),
                                                )?;
                                            }
                                            ValueResult::Raw(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(14i32) as u8,
                                                )?;
                                                let vec7 = e;
                                                let ptr7 = func_canonical_abi_realloc.call(
                                                    &mut caller,
                                                    (0, 0, 1, (vec7.len() as i32) * 1),
                                                )?;
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store_many(ptr7, &vec7)?;
                                                caller_memory.store(
                                                    base + 20,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        vec7.len() as i32
                                                    ),
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(ptr7),
                                                )?;
                                            }
                                        };
                                    }
                                }
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory
                                    .store(arg1 + 40, wit_bindgen_wasmtime::rt::as_i32(len8))?;
                                caller_memory
                                    .store(arg1 + 36, wit_bindgen_wasmtime::rt::as_i32(result8))?;
                            }
                            None => {
                                let e = ();
                                {
                                    caller_memory.store(
                                        arg1 + 32,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                    }
                };
                Ok(())
            },
        )?;
        linker.func_wrap(
            "sql_v1_alpha1",
            "row::get-bool",
            move |mut caller: wasmtime::Caller<'_, T>, arg0: i32, arg1: i32, arg2: i32| {
                let func = get_func(&mut caller, "canonical_abi_realloc")?;
                let func_canonical_abi_realloc =
                    func.typed::<(i32, i32, i32, i32), i32, _>(&caller)?;
                let memory = &get_memory(&mut caller, "memory")?;
                let host = get(caller.data_mut());
                let (host, _tables) = host;
                let param0 = _tables
                    .row_table
                    .get((arg0) as u32)
                    .ok_or_else(|| wasmtime::Trap::new("invalid handle index"))?;
                let param1 = arg1 as u32;
                let result = host.row_get_bool(param0, param1);
                match result {
                    Ok(e) => {
                        let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                        let (_, _tables) = get(data);
                        caller_memory
                            .store(arg2 + 0, wit_bindgen_wasmtime::rt::as_i32(0i32) as u8)?;
                        caller_memory.store(
                            arg2 + 4,
                            wit_bindgen_wasmtime::rt::as_i32(match e {
                                true => 1,
                                false => 0,
                            }) as u8,
                        )?;
                    }
                    Err(e) => {
                        let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                        let (_, _tables) = get(data);
                        caller_memory
                            .store(arg2 + 0, wit_bindgen_wasmtime::rt::as_i32(1i32) as u8)?;
                        let SqlError {
                            code_numeric: code_numeric0,
                            code_text: code_text0,
                            message: message0,
                            extra: extra0,
                        } = e;
                        match code_numeric0 {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg2 + 4,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                caller_memory.store(
                                    arg2 + 8,
                                    wit_bindgen_wasmtime::rt::as_i32(
                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                    ),
                                )?;
                            }
                            None => {
                                let e = ();
                                {
                                    caller_memory.store(
                                        arg2 + 4,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                        match code_text0 {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg2 + 12,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                let vec1 = e;
                                let ptr1 = func_canonical_abi_realloc
                                    .call(&mut caller, (0, 0, 1, vec1.len() as i32))?;
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store_many(ptr1, vec1.as_bytes())?;
                                caller_memory.store(
                                    arg2 + 20,
                                    wit_bindgen_wasmtime::rt::as_i32(vec1.len() as i32),
                                )?;
                                caller_memory
                                    .store(arg2 + 16, wit_bindgen_wasmtime::rt::as_i32(ptr1))?;
                            }
                            None => {
                                let e = ();
                                {
                                    let (caller_memory, data) =
                                        memory.data_and_store_mut(&mut caller);
                                    let (_, _tables) = get(data);
                                    caller_memory.store(
                                        arg2 + 12,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                        let vec2 = message0;
                        let ptr2 = func_canonical_abi_realloc
                            .call(&mut caller, (0, 0, 1, vec2.len() as i32))?;
                        let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                        let (_, _tables) = get(data);
                        caller_memory.store_many(ptr2, vec2.as_bytes())?;
                        caller_memory.store(
                            arg2 + 28,
                            wit_bindgen_wasmtime::rt::as_i32(vec2.len() as i32),
                        )?;
                        caller_memory.store(arg2 + 24, wit_bindgen_wasmtime::rt::as_i32(ptr2))?;
                        match extra0 {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg2 + 32,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                let vec8 = e;
                                let len8 = vec8.len() as i32;
                                let result8 = func_canonical_abi_realloc
                                    .call(&mut caller, (0, 0, 8, len8 * 24))?;
                                for (i, e) in vec8.into_iter().enumerate() {
                                    let base = result8 + (i as i32) * 24;
                                    {
                                        let ValueMapItemResult {
                                            key: key3,
                                            value: value3,
                                        } = e;
                                        let vec4 = key3;
                                        let ptr4 = func_canonical_abi_realloc
                                            .call(&mut caller, (0, 0, 1, vec4.len() as i32))?;
                                        let (caller_memory, data) =
                                            memory.data_and_store_mut(&mut caller);
                                        let (_, _tables) = get(data);
                                        caller_memory.store_many(ptr4, vec4.as_bytes())?;
                                        caller_memory.store(
                                            base + 4,
                                            wit_bindgen_wasmtime::rt::as_i32(vec4.len() as i32),
                                        )?;
                                        caller_memory.store(
                                            base + 0,
                                            wit_bindgen_wasmtime::rt::as_i32(ptr4),
                                        )?;
                                        match value3 {
                                            ValueResult::Null => {
                                                let e = ();
                                                {
                                                    caller_memory.store(
                                                        base + 8,
                                                        wit_bindgen_wasmtime::rt::as_i32(0i32)
                                                            as u8,
                                                    )?;
                                                    let () = e;
                                                }
                                            }
                                            ValueResult::Boolean(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(match e {
                                                        true => 1,
                                                        false => 0,
                                                    })
                                                        as u8,
                                                )?;
                                            }
                                            ValueResult::Int8(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(2i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u8,
                                                )?;
                                            }
                                            ValueResult::Int16(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(3i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u16,
                                                )?;
                                            }
                                            ValueResult::Int32(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(4i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Int64(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(5i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i64(
                                                        wit_bindgen_wasmtime::rt::as_i64(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Uint8(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(6i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u8,
                                                )?;
                                            }
                                            ValueResult::Uint16(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(7i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u16,
                                                )?;
                                            }
                                            ValueResult::Uint32(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(8i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Uint64(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(9i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i64(
                                                        wit_bindgen_wasmtime::rt::as_i64(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Floating32(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(10i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_f32(e),
                                                )?;
                                            }
                                            ValueResult::Floating64(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(11i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_f64(e),
                                                )?;
                                            }
                                            ValueResult::Str(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(12i32) as u8,
                                                )?;
                                                let vec5 = e;
                                                let ptr5 = func_canonical_abi_realloc.call(
                                                    &mut caller,
                                                    (0, 0, 1, vec5.len() as i32),
                                                )?;
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store_many(ptr5, vec5.as_bytes())?;
                                                caller_memory.store(
                                                    base + 20,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        vec5.len() as i32
                                                    ),
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(ptr5),
                                                )?;
                                            }
                                            ValueResult::Bytes(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(13i32) as u8,
                                                )?;
                                                let vec6 = e;
                                                let ptr6 = func_canonical_abi_realloc.call(
                                                    &mut caller,
                                                    (0, 0, 1, (vec6.len() as i32) * 1),
                                                )?;
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store_many(ptr6, &vec6)?;
                                                caller_memory.store(
                                                    base + 20,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        vec6.len() as i32
                                                    ),
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(ptr6),
                                                )?;
                                            }
                                            ValueResult::Raw(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(14i32) as u8,
                                                )?;
                                                let vec7 = e;
                                                let ptr7 = func_canonical_abi_realloc.call(
                                                    &mut caller,
                                                    (0, 0, 1, (vec7.len() as i32) * 1),
                                                )?;
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store_many(ptr7, &vec7)?;
                                                caller_memory.store(
                                                    base + 20,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        vec7.len() as i32
                                                    ),
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(ptr7),
                                                )?;
                                            }
                                        };
                                    }
                                }
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory
                                    .store(arg2 + 40, wit_bindgen_wasmtime::rt::as_i32(len8))?;
                                caller_memory
                                    .store(arg2 + 36, wit_bindgen_wasmtime::rt::as_i32(result8))?;
                            }
                            None => {
                                let e = ();
                                {
                                    caller_memory.store(
                                        arg2 + 32,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                    }
                };
                Ok(())
            },
        )?;
        linker.func_wrap(
            "sql_v1_alpha1",
            "row::get-int8",
            move |mut caller: wasmtime::Caller<'_, T>, arg0: i32, arg1: i32, arg2: i32| {
                let func = get_func(&mut caller, "canonical_abi_realloc")?;
                let func_canonical_abi_realloc =
                    func.typed::<(i32, i32, i32, i32), i32, _>(&caller)?;
                let memory = &get_memory(&mut caller, "memory")?;
                let host = get(caller.data_mut());
                let (host, _tables) = host;
                let param0 = _tables
                    .row_table
                    .get((arg0) as u32)
                    .ok_or_else(|| wasmtime::Trap::new("invalid handle index"))?;
                let param1 = arg1 as u32;
                let result = host.row_get_int8(param0, param1);
                match result {
                    Ok(e) => {
                        let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                        let (_, _tables) = get(data);
                        caller_memory
                            .store(arg2 + 0, wit_bindgen_wasmtime::rt::as_i32(0i32) as u8)?;
                        caller_memory.store(
                            arg2 + 4,
                            wit_bindgen_wasmtime::rt::as_i32(wit_bindgen_wasmtime::rt::as_i32(e))
                                as u8,
                        )?;
                    }
                    Err(e) => {
                        let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                        let (_, _tables) = get(data);
                        caller_memory
                            .store(arg2 + 0, wit_bindgen_wasmtime::rt::as_i32(1i32) as u8)?;
                        let SqlError {
                            code_numeric: code_numeric0,
                            code_text: code_text0,
                            message: message0,
                            extra: extra0,
                        } = e;
                        match code_numeric0 {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg2 + 4,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                caller_memory.store(
                                    arg2 + 8,
                                    wit_bindgen_wasmtime::rt::as_i32(
                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                    ),
                                )?;
                            }
                            None => {
                                let e = ();
                                {
                                    caller_memory.store(
                                        arg2 + 4,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                        match code_text0 {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg2 + 12,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                let vec1 = e;
                                let ptr1 = func_canonical_abi_realloc
                                    .call(&mut caller, (0, 0, 1, vec1.len() as i32))?;
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store_many(ptr1, vec1.as_bytes())?;
                                caller_memory.store(
                                    arg2 + 20,
                                    wit_bindgen_wasmtime::rt::as_i32(vec1.len() as i32),
                                )?;
                                caller_memory
                                    .store(arg2 + 16, wit_bindgen_wasmtime::rt::as_i32(ptr1))?;
                            }
                            None => {
                                let e = ();
                                {
                                    let (caller_memory, data) =
                                        memory.data_and_store_mut(&mut caller);
                                    let (_, _tables) = get(data);
                                    caller_memory.store(
                                        arg2 + 12,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                        let vec2 = message0;
                        let ptr2 = func_canonical_abi_realloc
                            .call(&mut caller, (0, 0, 1, vec2.len() as i32))?;
                        let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                        let (_, _tables) = get(data);
                        caller_memory.store_many(ptr2, vec2.as_bytes())?;
                        caller_memory.store(
                            arg2 + 28,
                            wit_bindgen_wasmtime::rt::as_i32(vec2.len() as i32),
                        )?;
                        caller_memory.store(arg2 + 24, wit_bindgen_wasmtime::rt::as_i32(ptr2))?;
                        match extra0 {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg2 + 32,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                let vec8 = e;
                                let len8 = vec8.len() as i32;
                                let result8 = func_canonical_abi_realloc
                                    .call(&mut caller, (0, 0, 8, len8 * 24))?;
                                for (i, e) in vec8.into_iter().enumerate() {
                                    let base = result8 + (i as i32) * 24;
                                    {
                                        let ValueMapItemResult {
                                            key: key3,
                                            value: value3,
                                        } = e;
                                        let vec4 = key3;
                                        let ptr4 = func_canonical_abi_realloc
                                            .call(&mut caller, (0, 0, 1, vec4.len() as i32))?;
                                        let (caller_memory, data) =
                                            memory.data_and_store_mut(&mut caller);
                                        let (_, _tables) = get(data);
                                        caller_memory.store_many(ptr4, vec4.as_bytes())?;
                                        caller_memory.store(
                                            base + 4,
                                            wit_bindgen_wasmtime::rt::as_i32(vec4.len() as i32),
                                        )?;
                                        caller_memory.store(
                                            base + 0,
                                            wit_bindgen_wasmtime::rt::as_i32(ptr4),
                                        )?;
                                        match value3 {
                                            ValueResult::Null => {
                                                let e = ();
                                                {
                                                    caller_memory.store(
                                                        base + 8,
                                                        wit_bindgen_wasmtime::rt::as_i32(0i32)
                                                            as u8,
                                                    )?;
                                                    let () = e;
                                                }
                                            }
                                            ValueResult::Boolean(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(match e {
                                                        true => 1,
                                                        false => 0,
                                                    })
                                                        as u8,
                                                )?;
                                            }
                                            ValueResult::Int8(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(2i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u8,
                                                )?;
                                            }
                                            ValueResult::Int16(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(3i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u16,
                                                )?;
                                            }
                                            ValueResult::Int32(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(4i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Int64(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(5i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i64(
                                                        wit_bindgen_wasmtime::rt::as_i64(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Uint8(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(6i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u8,
                                                )?;
                                            }
                                            ValueResult::Uint16(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(7i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u16,
                                                )?;
                                            }
                                            ValueResult::Uint32(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(8i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Uint64(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(9i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i64(
                                                        wit_bindgen_wasmtime::rt::as_i64(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Floating32(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(10i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_f32(e),
                                                )?;
                                            }
                                            ValueResult::Floating64(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(11i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_f64(e),
                                                )?;
                                            }
                                            ValueResult::Str(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(12i32) as u8,
                                                )?;
                                                let vec5 = e;
                                                let ptr5 = func_canonical_abi_realloc.call(
                                                    &mut caller,
                                                    (0, 0, 1, vec5.len() as i32),
                                                )?;
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store_many(ptr5, vec5.as_bytes())?;
                                                caller_memory.store(
                                                    base + 20,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        vec5.len() as i32
                                                    ),
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(ptr5),
                                                )?;
                                            }
                                            ValueResult::Bytes(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(13i32) as u8,
                                                )?;
                                                let vec6 = e;
                                                let ptr6 = func_canonical_abi_realloc.call(
                                                    &mut caller,
                                                    (0, 0, 1, (vec6.len() as i32) * 1),
                                                )?;
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store_many(ptr6, &vec6)?;
                                                caller_memory.store(
                                                    base + 20,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        vec6.len() as i32
                                                    ),
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(ptr6),
                                                )?;
                                            }
                                            ValueResult::Raw(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(14i32) as u8,
                                                )?;
                                                let vec7 = e;
                                                let ptr7 = func_canonical_abi_realloc.call(
                                                    &mut caller,
                                                    (0, 0, 1, (vec7.len() as i32) * 1),
                                                )?;
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store_many(ptr7, &vec7)?;
                                                caller_memory.store(
                                                    base + 20,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        vec7.len() as i32
                                                    ),
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(ptr7),
                                                )?;
                                            }
                                        };
                                    }
                                }
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory
                                    .store(arg2 + 40, wit_bindgen_wasmtime::rt::as_i32(len8))?;
                                caller_memory
                                    .store(arg2 + 36, wit_bindgen_wasmtime::rt::as_i32(result8))?;
                            }
                            None => {
                                let e = ();
                                {
                                    caller_memory.store(
                                        arg2 + 32,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                    }
                };
                Ok(())
            },
        )?;
        linker.func_wrap(
            "sql_v1_alpha1",
            "row::get-int16",
            move |mut caller: wasmtime::Caller<'_, T>, arg0: i32, arg1: i32, arg2: i32| {
                let func = get_func(&mut caller, "canonical_abi_realloc")?;
                let func_canonical_abi_realloc =
                    func.typed::<(i32, i32, i32, i32), i32, _>(&caller)?;
                let memory = &get_memory(&mut caller, "memory")?;
                let host = get(caller.data_mut());
                let (host, _tables) = host;
                let param0 = _tables
                    .row_table
                    .get((arg0) as u32)
                    .ok_or_else(|| wasmtime::Trap::new("invalid handle index"))?;
                let param1 = arg1 as u32;
                let result = host.row_get_int16(param0, param1);
                match result {
                    Ok(e) => {
                        let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                        let (_, _tables) = get(data);
                        caller_memory
                            .store(arg2 + 0, wit_bindgen_wasmtime::rt::as_i32(0i32) as u8)?;
                        caller_memory.store(
                            arg2 + 4,
                            wit_bindgen_wasmtime::rt::as_i32(wit_bindgen_wasmtime::rt::as_i32(e))
                                as u16,
                        )?;
                    }
                    Err(e) => {
                        let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                        let (_, _tables) = get(data);
                        caller_memory
                            .store(arg2 + 0, wit_bindgen_wasmtime::rt::as_i32(1i32) as u8)?;
                        let SqlError {
                            code_numeric: code_numeric0,
                            code_text: code_text0,
                            message: message0,
                            extra: extra0,
                        } = e;
                        match code_numeric0 {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg2 + 4,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                caller_memory.store(
                                    arg2 + 8,
                                    wit_bindgen_wasmtime::rt::as_i32(
                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                    ),
                                )?;
                            }
                            None => {
                                let e = ();
                                {
                                    caller_memory.store(
                                        arg2 + 4,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                        match code_text0 {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg2 + 12,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                let vec1 = e;
                                let ptr1 = func_canonical_abi_realloc
                                    .call(&mut caller, (0, 0, 1, vec1.len() as i32))?;
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store_many(ptr1, vec1.as_bytes())?;
                                caller_memory.store(
                                    arg2 + 20,
                                    wit_bindgen_wasmtime::rt::as_i32(vec1.len() as i32),
                                )?;
                                caller_memory
                                    .store(arg2 + 16, wit_bindgen_wasmtime::rt::as_i32(ptr1))?;
                            }
                            None => {
                                let e = ();
                                {
                                    let (caller_memory, data) =
                                        memory.data_and_store_mut(&mut caller);
                                    let (_, _tables) = get(data);
                                    caller_memory.store(
                                        arg2 + 12,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                        let vec2 = message0;
                        let ptr2 = func_canonical_abi_realloc
                            .call(&mut caller, (0, 0, 1, vec2.len() as i32))?;
                        let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                        let (_, _tables) = get(data);
                        caller_memory.store_many(ptr2, vec2.as_bytes())?;
                        caller_memory.store(
                            arg2 + 28,
                            wit_bindgen_wasmtime::rt::as_i32(vec2.len() as i32),
                        )?;
                        caller_memory.store(arg2 + 24, wit_bindgen_wasmtime::rt::as_i32(ptr2))?;
                        match extra0 {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg2 + 32,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                let vec8 = e;
                                let len8 = vec8.len() as i32;
                                let result8 = func_canonical_abi_realloc
                                    .call(&mut caller, (0, 0, 8, len8 * 24))?;
                                for (i, e) in vec8.into_iter().enumerate() {
                                    let base = result8 + (i as i32) * 24;
                                    {
                                        let ValueMapItemResult {
                                            key: key3,
                                            value: value3,
                                        } = e;
                                        let vec4 = key3;
                                        let ptr4 = func_canonical_abi_realloc
                                            .call(&mut caller, (0, 0, 1, vec4.len() as i32))?;
                                        let (caller_memory, data) =
                                            memory.data_and_store_mut(&mut caller);
                                        let (_, _tables) = get(data);
                                        caller_memory.store_many(ptr4, vec4.as_bytes())?;
                                        caller_memory.store(
                                            base + 4,
                                            wit_bindgen_wasmtime::rt::as_i32(vec4.len() as i32),
                                        )?;
                                        caller_memory.store(
                                            base + 0,
                                            wit_bindgen_wasmtime::rt::as_i32(ptr4),
                                        )?;
                                        match value3 {
                                            ValueResult::Null => {
                                                let e = ();
                                                {
                                                    caller_memory.store(
                                                        base + 8,
                                                        wit_bindgen_wasmtime::rt::as_i32(0i32)
                                                            as u8,
                                                    )?;
                                                    let () = e;
                                                }
                                            }
                                            ValueResult::Boolean(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(match e {
                                                        true => 1,
                                                        false => 0,
                                                    })
                                                        as u8,
                                                )?;
                                            }
                                            ValueResult::Int8(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(2i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u8,
                                                )?;
                                            }
                                            ValueResult::Int16(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(3i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u16,
                                                )?;
                                            }
                                            ValueResult::Int32(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(4i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Int64(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(5i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i64(
                                                        wit_bindgen_wasmtime::rt::as_i64(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Uint8(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(6i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u8,
                                                )?;
                                            }
                                            ValueResult::Uint16(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(7i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u16,
                                                )?;
                                            }
                                            ValueResult::Uint32(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(8i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Uint64(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(9i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i64(
                                                        wit_bindgen_wasmtime::rt::as_i64(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Floating32(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(10i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_f32(e),
                                                )?;
                                            }
                                            ValueResult::Floating64(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(11i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_f64(e),
                                                )?;
                                            }
                                            ValueResult::Str(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(12i32) as u8,
                                                )?;
                                                let vec5 = e;
                                                let ptr5 = func_canonical_abi_realloc.call(
                                                    &mut caller,
                                                    (0, 0, 1, vec5.len() as i32),
                                                )?;
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store_many(ptr5, vec5.as_bytes())?;
                                                caller_memory.store(
                                                    base + 20,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        vec5.len() as i32
                                                    ),
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(ptr5),
                                                )?;
                                            }
                                            ValueResult::Bytes(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(13i32) as u8,
                                                )?;
                                                let vec6 = e;
                                                let ptr6 = func_canonical_abi_realloc.call(
                                                    &mut caller,
                                                    (0, 0, 1, (vec6.len() as i32) * 1),
                                                )?;
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store_many(ptr6, &vec6)?;
                                                caller_memory.store(
                                                    base + 20,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        vec6.len() as i32
                                                    ),
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(ptr6),
                                                )?;
                                            }
                                            ValueResult::Raw(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(14i32) as u8,
                                                )?;
                                                let vec7 = e;
                                                let ptr7 = func_canonical_abi_realloc.call(
                                                    &mut caller,
                                                    (0, 0, 1, (vec7.len() as i32) * 1),
                                                )?;
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store_many(ptr7, &vec7)?;
                                                caller_memory.store(
                                                    base + 20,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        vec7.len() as i32
                                                    ),
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(ptr7),
                                                )?;
                                            }
                                        };
                                    }
                                }
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory
                                    .store(arg2 + 40, wit_bindgen_wasmtime::rt::as_i32(len8))?;
                                caller_memory
                                    .store(arg2 + 36, wit_bindgen_wasmtime::rt::as_i32(result8))?;
                            }
                            None => {
                                let e = ();
                                {
                                    caller_memory.store(
                                        arg2 + 32,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                    }
                };
                Ok(())
            },
        )?;
        linker.func_wrap(
            "sql_v1_alpha1",
            "row::get-int32",
            move |mut caller: wasmtime::Caller<'_, T>, arg0: i32, arg1: i32, arg2: i32| {
                let func = get_func(&mut caller, "canonical_abi_realloc")?;
                let func_canonical_abi_realloc =
                    func.typed::<(i32, i32, i32, i32), i32, _>(&caller)?;
                let memory = &get_memory(&mut caller, "memory")?;
                let host = get(caller.data_mut());
                let (host, _tables) = host;
                let param0 = _tables
                    .row_table
                    .get((arg0) as u32)
                    .ok_or_else(|| wasmtime::Trap::new("invalid handle index"))?;
                let param1 = arg1 as u32;
                let result = host.row_get_int32(param0, param1);
                match result {
                    Ok(e) => {
                        let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                        let (_, _tables) = get(data);
                        caller_memory
                            .store(arg2 + 0, wit_bindgen_wasmtime::rt::as_i32(0i32) as u8)?;
                        caller_memory.store(
                            arg2 + 4,
                            wit_bindgen_wasmtime::rt::as_i32(wit_bindgen_wasmtime::rt::as_i32(e)),
                        )?;
                    }
                    Err(e) => {
                        let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                        let (_, _tables) = get(data);
                        caller_memory
                            .store(arg2 + 0, wit_bindgen_wasmtime::rt::as_i32(1i32) as u8)?;
                        let SqlError {
                            code_numeric: code_numeric0,
                            code_text: code_text0,
                            message: message0,
                            extra: extra0,
                        } = e;
                        match code_numeric0 {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg2 + 4,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                caller_memory.store(
                                    arg2 + 8,
                                    wit_bindgen_wasmtime::rt::as_i32(
                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                    ),
                                )?;
                            }
                            None => {
                                let e = ();
                                {
                                    caller_memory.store(
                                        arg2 + 4,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                        match code_text0 {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg2 + 12,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                let vec1 = e;
                                let ptr1 = func_canonical_abi_realloc
                                    .call(&mut caller, (0, 0, 1, vec1.len() as i32))?;
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store_many(ptr1, vec1.as_bytes())?;
                                caller_memory.store(
                                    arg2 + 20,
                                    wit_bindgen_wasmtime::rt::as_i32(vec1.len() as i32),
                                )?;
                                caller_memory
                                    .store(arg2 + 16, wit_bindgen_wasmtime::rt::as_i32(ptr1))?;
                            }
                            None => {
                                let e = ();
                                {
                                    let (caller_memory, data) =
                                        memory.data_and_store_mut(&mut caller);
                                    let (_, _tables) = get(data);
                                    caller_memory.store(
                                        arg2 + 12,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                        let vec2 = message0;
                        let ptr2 = func_canonical_abi_realloc
                            .call(&mut caller, (0, 0, 1, vec2.len() as i32))?;
                        let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                        let (_, _tables) = get(data);
                        caller_memory.store_many(ptr2, vec2.as_bytes())?;
                        caller_memory.store(
                            arg2 + 28,
                            wit_bindgen_wasmtime::rt::as_i32(vec2.len() as i32),
                        )?;
                        caller_memory.store(arg2 + 24, wit_bindgen_wasmtime::rt::as_i32(ptr2))?;
                        match extra0 {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg2 + 32,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                let vec8 = e;
                                let len8 = vec8.len() as i32;
                                let result8 = func_canonical_abi_realloc
                                    .call(&mut caller, (0, 0, 8, len8 * 24))?;
                                for (i, e) in vec8.into_iter().enumerate() {
                                    let base = result8 + (i as i32) * 24;
                                    {
                                        let ValueMapItemResult {
                                            key: key3,
                                            value: value3,
                                        } = e;
                                        let vec4 = key3;
                                        let ptr4 = func_canonical_abi_realloc
                                            .call(&mut caller, (0, 0, 1, vec4.len() as i32))?;
                                        let (caller_memory, data) =
                                            memory.data_and_store_mut(&mut caller);
                                        let (_, _tables) = get(data);
                                        caller_memory.store_many(ptr4, vec4.as_bytes())?;
                                        caller_memory.store(
                                            base + 4,
                                            wit_bindgen_wasmtime::rt::as_i32(vec4.len() as i32),
                                        )?;
                                        caller_memory.store(
                                            base + 0,
                                            wit_bindgen_wasmtime::rt::as_i32(ptr4),
                                        )?;
                                        match value3 {
                                            ValueResult::Null => {
                                                let e = ();
                                                {
                                                    caller_memory.store(
                                                        base + 8,
                                                        wit_bindgen_wasmtime::rt::as_i32(0i32)
                                                            as u8,
                                                    )?;
                                                    let () = e;
                                                }
                                            }
                                            ValueResult::Boolean(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(match e {
                                                        true => 1,
                                                        false => 0,
                                                    })
                                                        as u8,
                                                )?;
                                            }
                                            ValueResult::Int8(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(2i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u8,
                                                )?;
                                            }
                                            ValueResult::Int16(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(3i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u16,
                                                )?;
                                            }
                                            ValueResult::Int32(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(4i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Int64(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(5i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i64(
                                                        wit_bindgen_wasmtime::rt::as_i64(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Uint8(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(6i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u8,
                                                )?;
                                            }
                                            ValueResult::Uint16(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(7i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u16,
                                                )?;
                                            }
                                            ValueResult::Uint32(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(8i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Uint64(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(9i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i64(
                                                        wit_bindgen_wasmtime::rt::as_i64(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Floating32(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(10i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_f32(e),
                                                )?;
                                            }
                                            ValueResult::Floating64(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(11i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_f64(e),
                                                )?;
                                            }
                                            ValueResult::Str(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(12i32) as u8,
                                                )?;
                                                let vec5 = e;
                                                let ptr5 = func_canonical_abi_realloc.call(
                                                    &mut caller,
                                                    (0, 0, 1, vec5.len() as i32),
                                                )?;
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store_many(ptr5, vec5.as_bytes())?;
                                                caller_memory.store(
                                                    base + 20,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        vec5.len() as i32
                                                    ),
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(ptr5),
                                                )?;
                                            }
                                            ValueResult::Bytes(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(13i32) as u8,
                                                )?;
                                                let vec6 = e;
                                                let ptr6 = func_canonical_abi_realloc.call(
                                                    &mut caller,
                                                    (0, 0, 1, (vec6.len() as i32) * 1),
                                                )?;
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store_many(ptr6, &vec6)?;
                                                caller_memory.store(
                                                    base + 20,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        vec6.len() as i32
                                                    ),
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(ptr6),
                                                )?;
                                            }
                                            ValueResult::Raw(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(14i32) as u8,
                                                )?;
                                                let vec7 = e;
                                                let ptr7 = func_canonical_abi_realloc.call(
                                                    &mut caller,
                                                    (0, 0, 1, (vec7.len() as i32) * 1),
                                                )?;
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store_many(ptr7, &vec7)?;
                                                caller_memory.store(
                                                    base + 20,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        vec7.len() as i32
                                                    ),
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(ptr7),
                                                )?;
                                            }
                                        };
                                    }
                                }
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory
                                    .store(arg2 + 40, wit_bindgen_wasmtime::rt::as_i32(len8))?;
                                caller_memory
                                    .store(arg2 + 36, wit_bindgen_wasmtime::rt::as_i32(result8))?;
                            }
                            None => {
                                let e = ();
                                {
                                    caller_memory.store(
                                        arg2 + 32,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                    }
                };
                Ok(())
            },
        )?;
        linker.func_wrap(
            "sql_v1_alpha1",
            "row::get-int64",
            move |mut caller: wasmtime::Caller<'_, T>, arg0: i32, arg1: i64, arg2: i32| {
                let func = get_func(&mut caller, "canonical_abi_realloc")?;
                let func_canonical_abi_realloc =
                    func.typed::<(i32, i32, i32, i32), i32, _>(&caller)?;
                let memory = &get_memory(&mut caller, "memory")?;
                let host = get(caller.data_mut());
                let (host, _tables) = host;
                let param0 = _tables
                    .row_table
                    .get((arg0) as u32)
                    .ok_or_else(|| wasmtime::Trap::new("invalid handle index"))?;
                let param1 = arg1 as u64;
                let result = host.row_get_int64(param0, param1);
                match result {
                    Ok(e) => {
                        let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                        let (_, _tables) = get(data);
                        caller_memory
                            .store(arg2 + 0, wit_bindgen_wasmtime::rt::as_i32(0i32) as u8)?;
                        caller_memory.store(
                            arg2 + 8,
                            wit_bindgen_wasmtime::rt::as_i64(wit_bindgen_wasmtime::rt::as_i64(e)),
                        )?;
                    }
                    Err(e) => {
                        let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                        let (_, _tables) = get(data);
                        caller_memory
                            .store(arg2 + 0, wit_bindgen_wasmtime::rt::as_i32(1i32) as u8)?;
                        let SqlError {
                            code_numeric: code_numeric0,
                            code_text: code_text0,
                            message: message0,
                            extra: extra0,
                        } = e;
                        match code_numeric0 {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg2 + 8,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                caller_memory.store(
                                    arg2 + 12,
                                    wit_bindgen_wasmtime::rt::as_i32(
                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                    ),
                                )?;
                            }
                            None => {
                                let e = ();
                                {
                                    caller_memory.store(
                                        arg2 + 8,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                        match code_text0 {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg2 + 16,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                let vec1 = e;
                                let ptr1 = func_canonical_abi_realloc
                                    .call(&mut caller, (0, 0, 1, vec1.len() as i32))?;
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store_many(ptr1, vec1.as_bytes())?;
                                caller_memory.store(
                                    arg2 + 24,
                                    wit_bindgen_wasmtime::rt::as_i32(vec1.len() as i32),
                                )?;
                                caller_memory
                                    .store(arg2 + 20, wit_bindgen_wasmtime::rt::as_i32(ptr1))?;
                            }
                            None => {
                                let e = ();
                                {
                                    let (caller_memory, data) =
                                        memory.data_and_store_mut(&mut caller);
                                    let (_, _tables) = get(data);
                                    caller_memory.store(
                                        arg2 + 16,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                        let vec2 = message0;
                        let ptr2 = func_canonical_abi_realloc
                            .call(&mut caller, (0, 0, 1, vec2.len() as i32))?;
                        let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                        let (_, _tables) = get(data);
                        caller_memory.store_many(ptr2, vec2.as_bytes())?;
                        caller_memory.store(
                            arg2 + 32,
                            wit_bindgen_wasmtime::rt::as_i32(vec2.len() as i32),
                        )?;
                        caller_memory.store(arg2 + 28, wit_bindgen_wasmtime::rt::as_i32(ptr2))?;
                        match extra0 {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg2 + 36,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                let vec8 = e;
                                let len8 = vec8.len() as i32;
                                let result8 = func_canonical_abi_realloc
                                    .call(&mut caller, (0, 0, 8, len8 * 24))?;
                                for (i, e) in vec8.into_iter().enumerate() {
                                    let base = result8 + (i as i32) * 24;
                                    {
                                        let ValueMapItemResult {
                                            key: key3,
                                            value: value3,
                                        } = e;
                                        let vec4 = key3;
                                        let ptr4 = func_canonical_abi_realloc
                                            .call(&mut caller, (0, 0, 1, vec4.len() as i32))?;
                                        let (caller_memory, data) =
                                            memory.data_and_store_mut(&mut caller);
                                        let (_, _tables) = get(data);
                                        caller_memory.store_many(ptr4, vec4.as_bytes())?;
                                        caller_memory.store(
                                            base + 4,
                                            wit_bindgen_wasmtime::rt::as_i32(vec4.len() as i32),
                                        )?;
                                        caller_memory.store(
                                            base + 0,
                                            wit_bindgen_wasmtime::rt::as_i32(ptr4),
                                        )?;
                                        match value3 {
                                            ValueResult::Null => {
                                                let e = ();
                                                {
                                                    caller_memory.store(
                                                        base + 8,
                                                        wit_bindgen_wasmtime::rt::as_i32(0i32)
                                                            as u8,
                                                    )?;
                                                    let () = e;
                                                }
                                            }
                                            ValueResult::Boolean(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(match e {
                                                        true => 1,
                                                        false => 0,
                                                    })
                                                        as u8,
                                                )?;
                                            }
                                            ValueResult::Int8(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(2i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u8,
                                                )?;
                                            }
                                            ValueResult::Int16(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(3i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u16,
                                                )?;
                                            }
                                            ValueResult::Int32(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(4i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Int64(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(5i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i64(
                                                        wit_bindgen_wasmtime::rt::as_i64(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Uint8(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(6i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u8,
                                                )?;
                                            }
                                            ValueResult::Uint16(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(7i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u16,
                                                )?;
                                            }
                                            ValueResult::Uint32(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(8i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Uint64(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(9i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i64(
                                                        wit_bindgen_wasmtime::rt::as_i64(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Floating32(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(10i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_f32(e),
                                                )?;
                                            }
                                            ValueResult::Floating64(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(11i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_f64(e),
                                                )?;
                                            }
                                            ValueResult::Str(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(12i32) as u8,
                                                )?;
                                                let vec5 = e;
                                                let ptr5 = func_canonical_abi_realloc.call(
                                                    &mut caller,
                                                    (0, 0, 1, vec5.len() as i32),
                                                )?;
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store_many(ptr5, vec5.as_bytes())?;
                                                caller_memory.store(
                                                    base + 20,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        vec5.len() as i32
                                                    ),
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(ptr5),
                                                )?;
                                            }
                                            ValueResult::Bytes(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(13i32) as u8,
                                                )?;
                                                let vec6 = e;
                                                let ptr6 = func_canonical_abi_realloc.call(
                                                    &mut caller,
                                                    (0, 0, 1, (vec6.len() as i32) * 1),
                                                )?;
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store_many(ptr6, &vec6)?;
                                                caller_memory.store(
                                                    base + 20,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        vec6.len() as i32
                                                    ),
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(ptr6),
                                                )?;
                                            }
                                            ValueResult::Raw(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(14i32) as u8,
                                                )?;
                                                let vec7 = e;
                                                let ptr7 = func_canonical_abi_realloc.call(
                                                    &mut caller,
                                                    (0, 0, 1, (vec7.len() as i32) * 1),
                                                )?;
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store_many(ptr7, &vec7)?;
                                                caller_memory.store(
                                                    base + 20,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        vec7.len() as i32
                                                    ),
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(ptr7),
                                                )?;
                                            }
                                        };
                                    }
                                }
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory
                                    .store(arg2 + 44, wit_bindgen_wasmtime::rt::as_i32(len8))?;
                                caller_memory
                                    .store(arg2 + 40, wit_bindgen_wasmtime::rt::as_i32(result8))?;
                            }
                            None => {
                                let e = ();
                                {
                                    caller_memory.store(
                                        arg2 + 36,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                    }
                };
                Ok(())
            },
        )?;
        linker.func_wrap(
            "sql_v1_alpha1",
            "row::get-uint8",
            move |mut caller: wasmtime::Caller<'_, T>, arg0: i32, arg1: i32, arg2: i32| {
                let func = get_func(&mut caller, "canonical_abi_realloc")?;
                let func_canonical_abi_realloc =
                    func.typed::<(i32, i32, i32, i32), i32, _>(&caller)?;
                let memory = &get_memory(&mut caller, "memory")?;
                let host = get(caller.data_mut());
                let (host, _tables) = host;
                let param0 = _tables
                    .row_table
                    .get((arg0) as u32)
                    .ok_or_else(|| wasmtime::Trap::new("invalid handle index"))?;
                let param1 = arg1 as u32;
                let result = host.row_get_uint8(param0, param1);
                match result {
                    Ok(e) => {
                        let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                        let (_, _tables) = get(data);
                        caller_memory
                            .store(arg2 + 0, wit_bindgen_wasmtime::rt::as_i32(0i32) as u8)?;
                        caller_memory.store(
                            arg2 + 4,
                            wit_bindgen_wasmtime::rt::as_i32(wit_bindgen_wasmtime::rt::as_i32(e))
                                as u8,
                        )?;
                    }
                    Err(e) => {
                        let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                        let (_, _tables) = get(data);
                        caller_memory
                            .store(arg2 + 0, wit_bindgen_wasmtime::rt::as_i32(1i32) as u8)?;
                        let SqlError {
                            code_numeric: code_numeric0,
                            code_text: code_text0,
                            message: message0,
                            extra: extra0,
                        } = e;
                        match code_numeric0 {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg2 + 4,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                caller_memory.store(
                                    arg2 + 8,
                                    wit_bindgen_wasmtime::rt::as_i32(
                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                    ),
                                )?;
                            }
                            None => {
                                let e = ();
                                {
                                    caller_memory.store(
                                        arg2 + 4,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                        match code_text0 {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg2 + 12,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                let vec1 = e;
                                let ptr1 = func_canonical_abi_realloc
                                    .call(&mut caller, (0, 0, 1, vec1.len() as i32))?;
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store_many(ptr1, vec1.as_bytes())?;
                                caller_memory.store(
                                    arg2 + 20,
                                    wit_bindgen_wasmtime::rt::as_i32(vec1.len() as i32),
                                )?;
                                caller_memory
                                    .store(arg2 + 16, wit_bindgen_wasmtime::rt::as_i32(ptr1))?;
                            }
                            None => {
                                let e = ();
                                {
                                    let (caller_memory, data) =
                                        memory.data_and_store_mut(&mut caller);
                                    let (_, _tables) = get(data);
                                    caller_memory.store(
                                        arg2 + 12,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                        let vec2 = message0;
                        let ptr2 = func_canonical_abi_realloc
                            .call(&mut caller, (0, 0, 1, vec2.len() as i32))?;
                        let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                        let (_, _tables) = get(data);
                        caller_memory.store_many(ptr2, vec2.as_bytes())?;
                        caller_memory.store(
                            arg2 + 28,
                            wit_bindgen_wasmtime::rt::as_i32(vec2.len() as i32),
                        )?;
                        caller_memory.store(arg2 + 24, wit_bindgen_wasmtime::rt::as_i32(ptr2))?;
                        match extra0 {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg2 + 32,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                let vec8 = e;
                                let len8 = vec8.len() as i32;
                                let result8 = func_canonical_abi_realloc
                                    .call(&mut caller, (0, 0, 8, len8 * 24))?;
                                for (i, e) in vec8.into_iter().enumerate() {
                                    let base = result8 + (i as i32) * 24;
                                    {
                                        let ValueMapItemResult {
                                            key: key3,
                                            value: value3,
                                        } = e;
                                        let vec4 = key3;
                                        let ptr4 = func_canonical_abi_realloc
                                            .call(&mut caller, (0, 0, 1, vec4.len() as i32))?;
                                        let (caller_memory, data) =
                                            memory.data_and_store_mut(&mut caller);
                                        let (_, _tables) = get(data);
                                        caller_memory.store_many(ptr4, vec4.as_bytes())?;
                                        caller_memory.store(
                                            base + 4,
                                            wit_bindgen_wasmtime::rt::as_i32(vec4.len() as i32),
                                        )?;
                                        caller_memory.store(
                                            base + 0,
                                            wit_bindgen_wasmtime::rt::as_i32(ptr4),
                                        )?;
                                        match value3 {
                                            ValueResult::Null => {
                                                let e = ();
                                                {
                                                    caller_memory.store(
                                                        base + 8,
                                                        wit_bindgen_wasmtime::rt::as_i32(0i32)
                                                            as u8,
                                                    )?;
                                                    let () = e;
                                                }
                                            }
                                            ValueResult::Boolean(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(match e {
                                                        true => 1,
                                                        false => 0,
                                                    })
                                                        as u8,
                                                )?;
                                            }
                                            ValueResult::Int8(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(2i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u8,
                                                )?;
                                            }
                                            ValueResult::Int16(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(3i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u16,
                                                )?;
                                            }
                                            ValueResult::Int32(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(4i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Int64(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(5i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i64(
                                                        wit_bindgen_wasmtime::rt::as_i64(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Uint8(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(6i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u8,
                                                )?;
                                            }
                                            ValueResult::Uint16(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(7i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u16,
                                                )?;
                                            }
                                            ValueResult::Uint32(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(8i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Uint64(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(9i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i64(
                                                        wit_bindgen_wasmtime::rt::as_i64(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Floating32(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(10i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_f32(e),
                                                )?;
                                            }
                                            ValueResult::Floating64(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(11i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_f64(e),
                                                )?;
                                            }
                                            ValueResult::Str(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(12i32) as u8,
                                                )?;
                                                let vec5 = e;
                                                let ptr5 = func_canonical_abi_realloc.call(
                                                    &mut caller,
                                                    (0, 0, 1, vec5.len() as i32),
                                                )?;
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store_many(ptr5, vec5.as_bytes())?;
                                                caller_memory.store(
                                                    base + 20,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        vec5.len() as i32
                                                    ),
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(ptr5),
                                                )?;
                                            }
                                            ValueResult::Bytes(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(13i32) as u8,
                                                )?;
                                                let vec6 = e;
                                                let ptr6 = func_canonical_abi_realloc.call(
                                                    &mut caller,
                                                    (0, 0, 1, (vec6.len() as i32) * 1),
                                                )?;
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store_many(ptr6, &vec6)?;
                                                caller_memory.store(
                                                    base + 20,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        vec6.len() as i32
                                                    ),
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(ptr6),
                                                )?;
                                            }
                                            ValueResult::Raw(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(14i32) as u8,
                                                )?;
                                                let vec7 = e;
                                                let ptr7 = func_canonical_abi_realloc.call(
                                                    &mut caller,
                                                    (0, 0, 1, (vec7.len() as i32) * 1),
                                                )?;
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store_many(ptr7, &vec7)?;
                                                caller_memory.store(
                                                    base + 20,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        vec7.len() as i32
                                                    ),
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(ptr7),
                                                )?;
                                            }
                                        };
                                    }
                                }
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory
                                    .store(arg2 + 40, wit_bindgen_wasmtime::rt::as_i32(len8))?;
                                caller_memory
                                    .store(arg2 + 36, wit_bindgen_wasmtime::rt::as_i32(result8))?;
                            }
                            None => {
                                let e = ();
                                {
                                    caller_memory.store(
                                        arg2 + 32,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                    }
                };
                Ok(())
            },
        )?;
        linker.func_wrap(
            "sql_v1_alpha1",
            "row::get-uint16",
            move |mut caller: wasmtime::Caller<'_, T>, arg0: i32, arg1: i32, arg2: i32| {
                let func = get_func(&mut caller, "canonical_abi_realloc")?;
                let func_canonical_abi_realloc =
                    func.typed::<(i32, i32, i32, i32), i32, _>(&caller)?;
                let memory = &get_memory(&mut caller, "memory")?;
                let host = get(caller.data_mut());
                let (host, _tables) = host;
                let param0 = _tables
                    .row_table
                    .get((arg0) as u32)
                    .ok_or_else(|| wasmtime::Trap::new("invalid handle index"))?;
                let param1 = arg1 as u32;
                let result = host.row_get_uint16(param0, param1);
                match result {
                    Ok(e) => {
                        let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                        let (_, _tables) = get(data);
                        caller_memory
                            .store(arg2 + 0, wit_bindgen_wasmtime::rt::as_i32(0i32) as u8)?;
                        caller_memory.store(
                            arg2 + 4,
                            wit_bindgen_wasmtime::rt::as_i32(wit_bindgen_wasmtime::rt::as_i32(e))
                                as u16,
                        )?;
                    }
                    Err(e) => {
                        let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                        let (_, _tables) = get(data);
                        caller_memory
                            .store(arg2 + 0, wit_bindgen_wasmtime::rt::as_i32(1i32) as u8)?;
                        let SqlError {
                            code_numeric: code_numeric0,
                            code_text: code_text0,
                            message: message0,
                            extra: extra0,
                        } = e;
                        match code_numeric0 {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg2 + 4,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                caller_memory.store(
                                    arg2 + 8,
                                    wit_bindgen_wasmtime::rt::as_i32(
                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                    ),
                                )?;
                            }
                            None => {
                                let e = ();
                                {
                                    caller_memory.store(
                                        arg2 + 4,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                        match code_text0 {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg2 + 12,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                let vec1 = e;
                                let ptr1 = func_canonical_abi_realloc
                                    .call(&mut caller, (0, 0, 1, vec1.len() as i32))?;
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store_many(ptr1, vec1.as_bytes())?;
                                caller_memory.store(
                                    arg2 + 20,
                                    wit_bindgen_wasmtime::rt::as_i32(vec1.len() as i32),
                                )?;
                                caller_memory
                                    .store(arg2 + 16, wit_bindgen_wasmtime::rt::as_i32(ptr1))?;
                            }
                            None => {
                                let e = ();
                                {
                                    let (caller_memory, data) =
                                        memory.data_and_store_mut(&mut caller);
                                    let (_, _tables) = get(data);
                                    caller_memory.store(
                                        arg2 + 12,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                        let vec2 = message0;
                        let ptr2 = func_canonical_abi_realloc
                            .call(&mut caller, (0, 0, 1, vec2.len() as i32))?;
                        let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                        let (_, _tables) = get(data);
                        caller_memory.store_many(ptr2, vec2.as_bytes())?;
                        caller_memory.store(
                            arg2 + 28,
                            wit_bindgen_wasmtime::rt::as_i32(vec2.len() as i32),
                        )?;
                        caller_memory.store(arg2 + 24, wit_bindgen_wasmtime::rt::as_i32(ptr2))?;
                        match extra0 {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg2 + 32,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                let vec8 = e;
                                let len8 = vec8.len() as i32;
                                let result8 = func_canonical_abi_realloc
                                    .call(&mut caller, (0, 0, 8, len8 * 24))?;
                                for (i, e) in vec8.into_iter().enumerate() {
                                    let base = result8 + (i as i32) * 24;
                                    {
                                        let ValueMapItemResult {
                                            key: key3,
                                            value: value3,
                                        } = e;
                                        let vec4 = key3;
                                        let ptr4 = func_canonical_abi_realloc
                                            .call(&mut caller, (0, 0, 1, vec4.len() as i32))?;
                                        let (caller_memory, data) =
                                            memory.data_and_store_mut(&mut caller);
                                        let (_, _tables) = get(data);
                                        caller_memory.store_many(ptr4, vec4.as_bytes())?;
                                        caller_memory.store(
                                            base + 4,
                                            wit_bindgen_wasmtime::rt::as_i32(vec4.len() as i32),
                                        )?;
                                        caller_memory.store(
                                            base + 0,
                                            wit_bindgen_wasmtime::rt::as_i32(ptr4),
                                        )?;
                                        match value3 {
                                            ValueResult::Null => {
                                                let e = ();
                                                {
                                                    caller_memory.store(
                                                        base + 8,
                                                        wit_bindgen_wasmtime::rt::as_i32(0i32)
                                                            as u8,
                                                    )?;
                                                    let () = e;
                                                }
                                            }
                                            ValueResult::Boolean(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(match e {
                                                        true => 1,
                                                        false => 0,
                                                    })
                                                        as u8,
                                                )?;
                                            }
                                            ValueResult::Int8(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(2i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u8,
                                                )?;
                                            }
                                            ValueResult::Int16(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(3i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u16,
                                                )?;
                                            }
                                            ValueResult::Int32(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(4i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Int64(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(5i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i64(
                                                        wit_bindgen_wasmtime::rt::as_i64(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Uint8(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(6i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u8,
                                                )?;
                                            }
                                            ValueResult::Uint16(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(7i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u16,
                                                )?;
                                            }
                                            ValueResult::Uint32(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(8i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Uint64(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(9i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i64(
                                                        wit_bindgen_wasmtime::rt::as_i64(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Floating32(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(10i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_f32(e),
                                                )?;
                                            }
                                            ValueResult::Floating64(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(11i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_f64(e),
                                                )?;
                                            }
                                            ValueResult::Str(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(12i32) as u8,
                                                )?;
                                                let vec5 = e;
                                                let ptr5 = func_canonical_abi_realloc.call(
                                                    &mut caller,
                                                    (0, 0, 1, vec5.len() as i32),
                                                )?;
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store_many(ptr5, vec5.as_bytes())?;
                                                caller_memory.store(
                                                    base + 20,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        vec5.len() as i32
                                                    ),
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(ptr5),
                                                )?;
                                            }
                                            ValueResult::Bytes(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(13i32) as u8,
                                                )?;
                                                let vec6 = e;
                                                let ptr6 = func_canonical_abi_realloc.call(
                                                    &mut caller,
                                                    (0, 0, 1, (vec6.len() as i32) * 1),
                                                )?;
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store_many(ptr6, &vec6)?;
                                                caller_memory.store(
                                                    base + 20,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        vec6.len() as i32
                                                    ),
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(ptr6),
                                                )?;
                                            }
                                            ValueResult::Raw(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(14i32) as u8,
                                                )?;
                                                let vec7 = e;
                                                let ptr7 = func_canonical_abi_realloc.call(
                                                    &mut caller,
                                                    (0, 0, 1, (vec7.len() as i32) * 1),
                                                )?;
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store_many(ptr7, &vec7)?;
                                                caller_memory.store(
                                                    base + 20,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        vec7.len() as i32
                                                    ),
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(ptr7),
                                                )?;
                                            }
                                        };
                                    }
                                }
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory
                                    .store(arg2 + 40, wit_bindgen_wasmtime::rt::as_i32(len8))?;
                                caller_memory
                                    .store(arg2 + 36, wit_bindgen_wasmtime::rt::as_i32(result8))?;
                            }
                            None => {
                                let e = ();
                                {
                                    caller_memory.store(
                                        arg2 + 32,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                    }
                };
                Ok(())
            },
        )?;
        linker.func_wrap(
            "sql_v1_alpha1",
            "row::get-uint32",
            move |mut caller: wasmtime::Caller<'_, T>, arg0: i32, arg1: i32, arg2: i32| {
                let func = get_func(&mut caller, "canonical_abi_realloc")?;
                let func_canonical_abi_realloc =
                    func.typed::<(i32, i32, i32, i32), i32, _>(&caller)?;
                let memory = &get_memory(&mut caller, "memory")?;
                let host = get(caller.data_mut());
                let (host, _tables) = host;
                let param0 = _tables
                    .row_table
                    .get((arg0) as u32)
                    .ok_or_else(|| wasmtime::Trap::new("invalid handle index"))?;
                let param1 = arg1 as u32;
                let result = host.row_get_uint32(param0, param1);
                match result {
                    Ok(e) => {
                        let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                        let (_, _tables) = get(data);
                        caller_memory
                            .store(arg2 + 0, wit_bindgen_wasmtime::rt::as_i32(0i32) as u8)?;
                        caller_memory.store(
                            arg2 + 4,
                            wit_bindgen_wasmtime::rt::as_i32(wit_bindgen_wasmtime::rt::as_i32(e)),
                        )?;
                    }
                    Err(e) => {
                        let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                        let (_, _tables) = get(data);
                        caller_memory
                            .store(arg2 + 0, wit_bindgen_wasmtime::rt::as_i32(1i32) as u8)?;
                        let SqlError {
                            code_numeric: code_numeric0,
                            code_text: code_text0,
                            message: message0,
                            extra: extra0,
                        } = e;
                        match code_numeric0 {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg2 + 4,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                caller_memory.store(
                                    arg2 + 8,
                                    wit_bindgen_wasmtime::rt::as_i32(
                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                    ),
                                )?;
                            }
                            None => {
                                let e = ();
                                {
                                    caller_memory.store(
                                        arg2 + 4,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                        match code_text0 {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg2 + 12,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                let vec1 = e;
                                let ptr1 = func_canonical_abi_realloc
                                    .call(&mut caller, (0, 0, 1, vec1.len() as i32))?;
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store_many(ptr1, vec1.as_bytes())?;
                                caller_memory.store(
                                    arg2 + 20,
                                    wit_bindgen_wasmtime::rt::as_i32(vec1.len() as i32),
                                )?;
                                caller_memory
                                    .store(arg2 + 16, wit_bindgen_wasmtime::rt::as_i32(ptr1))?;
                            }
                            None => {
                                let e = ();
                                {
                                    let (caller_memory, data) =
                                        memory.data_and_store_mut(&mut caller);
                                    let (_, _tables) = get(data);
                                    caller_memory.store(
                                        arg2 + 12,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                        let vec2 = message0;
                        let ptr2 = func_canonical_abi_realloc
                            .call(&mut caller, (0, 0, 1, vec2.len() as i32))?;
                        let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                        let (_, _tables) = get(data);
                        caller_memory.store_many(ptr2, vec2.as_bytes())?;
                        caller_memory.store(
                            arg2 + 28,
                            wit_bindgen_wasmtime::rt::as_i32(vec2.len() as i32),
                        )?;
                        caller_memory.store(arg2 + 24, wit_bindgen_wasmtime::rt::as_i32(ptr2))?;
                        match extra0 {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg2 + 32,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                let vec8 = e;
                                let len8 = vec8.len() as i32;
                                let result8 = func_canonical_abi_realloc
                                    .call(&mut caller, (0, 0, 8, len8 * 24))?;
                                for (i, e) in vec8.into_iter().enumerate() {
                                    let base = result8 + (i as i32) * 24;
                                    {
                                        let ValueMapItemResult {
                                            key: key3,
                                            value: value3,
                                        } = e;
                                        let vec4 = key3;
                                        let ptr4 = func_canonical_abi_realloc
                                            .call(&mut caller, (0, 0, 1, vec4.len() as i32))?;
                                        let (caller_memory, data) =
                                            memory.data_and_store_mut(&mut caller);
                                        let (_, _tables) = get(data);
                                        caller_memory.store_many(ptr4, vec4.as_bytes())?;
                                        caller_memory.store(
                                            base + 4,
                                            wit_bindgen_wasmtime::rt::as_i32(vec4.len() as i32),
                                        )?;
                                        caller_memory.store(
                                            base + 0,
                                            wit_bindgen_wasmtime::rt::as_i32(ptr4),
                                        )?;
                                        match value3 {
                                            ValueResult::Null => {
                                                let e = ();
                                                {
                                                    caller_memory.store(
                                                        base + 8,
                                                        wit_bindgen_wasmtime::rt::as_i32(0i32)
                                                            as u8,
                                                    )?;
                                                    let () = e;
                                                }
                                            }
                                            ValueResult::Boolean(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(match e {
                                                        true => 1,
                                                        false => 0,
                                                    })
                                                        as u8,
                                                )?;
                                            }
                                            ValueResult::Int8(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(2i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u8,
                                                )?;
                                            }
                                            ValueResult::Int16(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(3i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u16,
                                                )?;
                                            }
                                            ValueResult::Int32(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(4i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Int64(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(5i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i64(
                                                        wit_bindgen_wasmtime::rt::as_i64(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Uint8(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(6i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u8,
                                                )?;
                                            }
                                            ValueResult::Uint16(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(7i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u16,
                                                )?;
                                            }
                                            ValueResult::Uint32(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(8i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Uint64(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(9i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i64(
                                                        wit_bindgen_wasmtime::rt::as_i64(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Floating32(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(10i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_f32(e),
                                                )?;
                                            }
                                            ValueResult::Floating64(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(11i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_f64(e),
                                                )?;
                                            }
                                            ValueResult::Str(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(12i32) as u8,
                                                )?;
                                                let vec5 = e;
                                                let ptr5 = func_canonical_abi_realloc.call(
                                                    &mut caller,
                                                    (0, 0, 1, vec5.len() as i32),
                                                )?;
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store_many(ptr5, vec5.as_bytes())?;
                                                caller_memory.store(
                                                    base + 20,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        vec5.len() as i32
                                                    ),
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(ptr5),
                                                )?;
                                            }
                                            ValueResult::Bytes(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(13i32) as u8,
                                                )?;
                                                let vec6 = e;
                                                let ptr6 = func_canonical_abi_realloc.call(
                                                    &mut caller,
                                                    (0, 0, 1, (vec6.len() as i32) * 1),
                                                )?;
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store_many(ptr6, &vec6)?;
                                                caller_memory.store(
                                                    base + 20,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        vec6.len() as i32
                                                    ),
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(ptr6),
                                                )?;
                                            }
                                            ValueResult::Raw(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(14i32) as u8,
                                                )?;
                                                let vec7 = e;
                                                let ptr7 = func_canonical_abi_realloc.call(
                                                    &mut caller,
                                                    (0, 0, 1, (vec7.len() as i32) * 1),
                                                )?;
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store_many(ptr7, &vec7)?;
                                                caller_memory.store(
                                                    base + 20,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        vec7.len() as i32
                                                    ),
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(ptr7),
                                                )?;
                                            }
                                        };
                                    }
                                }
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory
                                    .store(arg2 + 40, wit_bindgen_wasmtime::rt::as_i32(len8))?;
                                caller_memory
                                    .store(arg2 + 36, wit_bindgen_wasmtime::rt::as_i32(result8))?;
                            }
                            None => {
                                let e = ();
                                {
                                    caller_memory.store(
                                        arg2 + 32,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                    }
                };
                Ok(())
            },
        )?;
        linker.func_wrap(
            "sql_v1_alpha1",
            "row::get-uint64",
            move |mut caller: wasmtime::Caller<'_, T>, arg0: i32, arg1: i64, arg2: i32| {
                let func = get_func(&mut caller, "canonical_abi_realloc")?;
                let func_canonical_abi_realloc =
                    func.typed::<(i32, i32, i32, i32), i32, _>(&caller)?;
                let memory = &get_memory(&mut caller, "memory")?;
                let host = get(caller.data_mut());
                let (host, _tables) = host;
                let param0 = _tables
                    .row_table
                    .get((arg0) as u32)
                    .ok_or_else(|| wasmtime::Trap::new("invalid handle index"))?;
                let param1 = arg1 as u64;
                let result = host.row_get_uint64(param0, param1);
                match result {
                    Ok(e) => {
                        let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                        let (_, _tables) = get(data);
                        caller_memory
                            .store(arg2 + 0, wit_bindgen_wasmtime::rt::as_i32(0i32) as u8)?;
                        caller_memory.store(
                            arg2 + 8,
                            wit_bindgen_wasmtime::rt::as_i64(wit_bindgen_wasmtime::rt::as_i64(e)),
                        )?;
                    }
                    Err(e) => {
                        let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                        let (_, _tables) = get(data);
                        caller_memory
                            .store(arg2 + 0, wit_bindgen_wasmtime::rt::as_i32(1i32) as u8)?;
                        let SqlError {
                            code_numeric: code_numeric0,
                            code_text: code_text0,
                            message: message0,
                            extra: extra0,
                        } = e;
                        match code_numeric0 {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg2 + 8,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                caller_memory.store(
                                    arg2 + 12,
                                    wit_bindgen_wasmtime::rt::as_i32(
                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                    ),
                                )?;
                            }
                            None => {
                                let e = ();
                                {
                                    caller_memory.store(
                                        arg2 + 8,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                        match code_text0 {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg2 + 16,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                let vec1 = e;
                                let ptr1 = func_canonical_abi_realloc
                                    .call(&mut caller, (0, 0, 1, vec1.len() as i32))?;
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store_many(ptr1, vec1.as_bytes())?;
                                caller_memory.store(
                                    arg2 + 24,
                                    wit_bindgen_wasmtime::rt::as_i32(vec1.len() as i32),
                                )?;
                                caller_memory
                                    .store(arg2 + 20, wit_bindgen_wasmtime::rt::as_i32(ptr1))?;
                            }
                            None => {
                                let e = ();
                                {
                                    let (caller_memory, data) =
                                        memory.data_and_store_mut(&mut caller);
                                    let (_, _tables) = get(data);
                                    caller_memory.store(
                                        arg2 + 16,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                        let vec2 = message0;
                        let ptr2 = func_canonical_abi_realloc
                            .call(&mut caller, (0, 0, 1, vec2.len() as i32))?;
                        let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                        let (_, _tables) = get(data);
                        caller_memory.store_many(ptr2, vec2.as_bytes())?;
                        caller_memory.store(
                            arg2 + 32,
                            wit_bindgen_wasmtime::rt::as_i32(vec2.len() as i32),
                        )?;
                        caller_memory.store(arg2 + 28, wit_bindgen_wasmtime::rt::as_i32(ptr2))?;
                        match extra0 {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg2 + 36,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                let vec8 = e;
                                let len8 = vec8.len() as i32;
                                let result8 = func_canonical_abi_realloc
                                    .call(&mut caller, (0, 0, 8, len8 * 24))?;
                                for (i, e) in vec8.into_iter().enumerate() {
                                    let base = result8 + (i as i32) * 24;
                                    {
                                        let ValueMapItemResult {
                                            key: key3,
                                            value: value3,
                                        } = e;
                                        let vec4 = key3;
                                        let ptr4 = func_canonical_abi_realloc
                                            .call(&mut caller, (0, 0, 1, vec4.len() as i32))?;
                                        let (caller_memory, data) =
                                            memory.data_and_store_mut(&mut caller);
                                        let (_, _tables) = get(data);
                                        caller_memory.store_many(ptr4, vec4.as_bytes())?;
                                        caller_memory.store(
                                            base + 4,
                                            wit_bindgen_wasmtime::rt::as_i32(vec4.len() as i32),
                                        )?;
                                        caller_memory.store(
                                            base + 0,
                                            wit_bindgen_wasmtime::rt::as_i32(ptr4),
                                        )?;
                                        match value3 {
                                            ValueResult::Null => {
                                                let e = ();
                                                {
                                                    caller_memory.store(
                                                        base + 8,
                                                        wit_bindgen_wasmtime::rt::as_i32(0i32)
                                                            as u8,
                                                    )?;
                                                    let () = e;
                                                }
                                            }
                                            ValueResult::Boolean(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(match e {
                                                        true => 1,
                                                        false => 0,
                                                    })
                                                        as u8,
                                                )?;
                                            }
                                            ValueResult::Int8(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(2i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u8,
                                                )?;
                                            }
                                            ValueResult::Int16(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(3i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u16,
                                                )?;
                                            }
                                            ValueResult::Int32(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(4i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Int64(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(5i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i64(
                                                        wit_bindgen_wasmtime::rt::as_i64(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Uint8(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(6i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u8,
                                                )?;
                                            }
                                            ValueResult::Uint16(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(7i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u16,
                                                )?;
                                            }
                                            ValueResult::Uint32(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(8i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Uint64(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(9i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i64(
                                                        wit_bindgen_wasmtime::rt::as_i64(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Floating32(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(10i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_f32(e),
                                                )?;
                                            }
                                            ValueResult::Floating64(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(11i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_f64(e),
                                                )?;
                                            }
                                            ValueResult::Str(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(12i32) as u8,
                                                )?;
                                                let vec5 = e;
                                                let ptr5 = func_canonical_abi_realloc.call(
                                                    &mut caller,
                                                    (0, 0, 1, vec5.len() as i32),
                                                )?;
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store_many(ptr5, vec5.as_bytes())?;
                                                caller_memory.store(
                                                    base + 20,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        vec5.len() as i32
                                                    ),
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(ptr5),
                                                )?;
                                            }
                                            ValueResult::Bytes(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(13i32) as u8,
                                                )?;
                                                let vec6 = e;
                                                let ptr6 = func_canonical_abi_realloc.call(
                                                    &mut caller,
                                                    (0, 0, 1, (vec6.len() as i32) * 1),
                                                )?;
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store_many(ptr6, &vec6)?;
                                                caller_memory.store(
                                                    base + 20,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        vec6.len() as i32
                                                    ),
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(ptr6),
                                                )?;
                                            }
                                            ValueResult::Raw(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(14i32) as u8,
                                                )?;
                                                let vec7 = e;
                                                let ptr7 = func_canonical_abi_realloc.call(
                                                    &mut caller,
                                                    (0, 0, 1, (vec7.len() as i32) * 1),
                                                )?;
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store_many(ptr7, &vec7)?;
                                                caller_memory.store(
                                                    base + 20,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        vec7.len() as i32
                                                    ),
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(ptr7),
                                                )?;
                                            }
                                        };
                                    }
                                }
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory
                                    .store(arg2 + 44, wit_bindgen_wasmtime::rt::as_i32(len8))?;
                                caller_memory
                                    .store(arg2 + 40, wit_bindgen_wasmtime::rt::as_i32(result8))?;
                            }
                            None => {
                                let e = ();
                                {
                                    caller_memory.store(
                                        arg2 + 36,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                    }
                };
                Ok(())
            },
        )?;
        linker.func_wrap(
            "sql_v1_alpha1",
            "row::get-float32",
            move |mut caller: wasmtime::Caller<'_, T>, arg0: i32, arg1: i32, arg2: i32| {
                let func = get_func(&mut caller, "canonical_abi_realloc")?;
                let func_canonical_abi_realloc =
                    func.typed::<(i32, i32, i32, i32), i32, _>(&caller)?;
                let memory = &get_memory(&mut caller, "memory")?;
                let host = get(caller.data_mut());
                let (host, _tables) = host;
                let param0 = _tables
                    .row_table
                    .get((arg0) as u32)
                    .ok_or_else(|| wasmtime::Trap::new("invalid handle index"))?;
                let param1 = arg1 as u32;
                let result = host.row_get_float32(param0, param1);
                match result {
                    Ok(e) => {
                        let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                        let (_, _tables) = get(data);
                        caller_memory
                            .store(arg2 + 0, wit_bindgen_wasmtime::rt::as_i32(0i32) as u8)?;
                        caller_memory.store(arg2 + 4, wit_bindgen_wasmtime::rt::as_f32(e))?;
                    }
                    Err(e) => {
                        let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                        let (_, _tables) = get(data);
                        caller_memory
                            .store(arg2 + 0, wit_bindgen_wasmtime::rt::as_i32(1i32) as u8)?;
                        let SqlError {
                            code_numeric: code_numeric0,
                            code_text: code_text0,
                            message: message0,
                            extra: extra0,
                        } = e;
                        match code_numeric0 {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg2 + 4,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                caller_memory.store(
                                    arg2 + 8,
                                    wit_bindgen_wasmtime::rt::as_i32(
                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                    ),
                                )?;
                            }
                            None => {
                                let e = ();
                                {
                                    caller_memory.store(
                                        arg2 + 4,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                        match code_text0 {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg2 + 12,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                let vec1 = e;
                                let ptr1 = func_canonical_abi_realloc
                                    .call(&mut caller, (0, 0, 1, vec1.len() as i32))?;
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store_many(ptr1, vec1.as_bytes())?;
                                caller_memory.store(
                                    arg2 + 20,
                                    wit_bindgen_wasmtime::rt::as_i32(vec1.len() as i32),
                                )?;
                                caller_memory
                                    .store(arg2 + 16, wit_bindgen_wasmtime::rt::as_i32(ptr1))?;
                            }
                            None => {
                                let e = ();
                                {
                                    let (caller_memory, data) =
                                        memory.data_and_store_mut(&mut caller);
                                    let (_, _tables) = get(data);
                                    caller_memory.store(
                                        arg2 + 12,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                        let vec2 = message0;
                        let ptr2 = func_canonical_abi_realloc
                            .call(&mut caller, (0, 0, 1, vec2.len() as i32))?;
                        let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                        let (_, _tables) = get(data);
                        caller_memory.store_many(ptr2, vec2.as_bytes())?;
                        caller_memory.store(
                            arg2 + 28,
                            wit_bindgen_wasmtime::rt::as_i32(vec2.len() as i32),
                        )?;
                        caller_memory.store(arg2 + 24, wit_bindgen_wasmtime::rt::as_i32(ptr2))?;
                        match extra0 {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg2 + 32,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                let vec8 = e;
                                let len8 = vec8.len() as i32;
                                let result8 = func_canonical_abi_realloc
                                    .call(&mut caller, (0, 0, 8, len8 * 24))?;
                                for (i, e) in vec8.into_iter().enumerate() {
                                    let base = result8 + (i as i32) * 24;
                                    {
                                        let ValueMapItemResult {
                                            key: key3,
                                            value: value3,
                                        } = e;
                                        let vec4 = key3;
                                        let ptr4 = func_canonical_abi_realloc
                                            .call(&mut caller, (0, 0, 1, vec4.len() as i32))?;
                                        let (caller_memory, data) =
                                            memory.data_and_store_mut(&mut caller);
                                        let (_, _tables) = get(data);
                                        caller_memory.store_many(ptr4, vec4.as_bytes())?;
                                        caller_memory.store(
                                            base + 4,
                                            wit_bindgen_wasmtime::rt::as_i32(vec4.len() as i32),
                                        )?;
                                        caller_memory.store(
                                            base + 0,
                                            wit_bindgen_wasmtime::rt::as_i32(ptr4),
                                        )?;
                                        match value3 {
                                            ValueResult::Null => {
                                                let e = ();
                                                {
                                                    caller_memory.store(
                                                        base + 8,
                                                        wit_bindgen_wasmtime::rt::as_i32(0i32)
                                                            as u8,
                                                    )?;
                                                    let () = e;
                                                }
                                            }
                                            ValueResult::Boolean(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(match e {
                                                        true => 1,
                                                        false => 0,
                                                    })
                                                        as u8,
                                                )?;
                                            }
                                            ValueResult::Int8(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(2i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u8,
                                                )?;
                                            }
                                            ValueResult::Int16(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(3i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u16,
                                                )?;
                                            }
                                            ValueResult::Int32(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(4i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Int64(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(5i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i64(
                                                        wit_bindgen_wasmtime::rt::as_i64(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Uint8(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(6i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u8,
                                                )?;
                                            }
                                            ValueResult::Uint16(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(7i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u16,
                                                )?;
                                            }
                                            ValueResult::Uint32(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(8i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Uint64(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(9i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i64(
                                                        wit_bindgen_wasmtime::rt::as_i64(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Floating32(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(10i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_f32(e),
                                                )?;
                                            }
                                            ValueResult::Floating64(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(11i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_f64(e),
                                                )?;
                                            }
                                            ValueResult::Str(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(12i32) as u8,
                                                )?;
                                                let vec5 = e;
                                                let ptr5 = func_canonical_abi_realloc.call(
                                                    &mut caller,
                                                    (0, 0, 1, vec5.len() as i32),
                                                )?;
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store_many(ptr5, vec5.as_bytes())?;
                                                caller_memory.store(
                                                    base + 20,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        vec5.len() as i32
                                                    ),
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(ptr5),
                                                )?;
                                            }
                                            ValueResult::Bytes(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(13i32) as u8,
                                                )?;
                                                let vec6 = e;
                                                let ptr6 = func_canonical_abi_realloc.call(
                                                    &mut caller,
                                                    (0, 0, 1, (vec6.len() as i32) * 1),
                                                )?;
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store_many(ptr6, &vec6)?;
                                                caller_memory.store(
                                                    base + 20,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        vec6.len() as i32
                                                    ),
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(ptr6),
                                                )?;
                                            }
                                            ValueResult::Raw(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(14i32) as u8,
                                                )?;
                                                let vec7 = e;
                                                let ptr7 = func_canonical_abi_realloc.call(
                                                    &mut caller,
                                                    (0, 0, 1, (vec7.len() as i32) * 1),
                                                )?;
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store_many(ptr7, &vec7)?;
                                                caller_memory.store(
                                                    base + 20,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        vec7.len() as i32
                                                    ),
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(ptr7),
                                                )?;
                                            }
                                        };
                                    }
                                }
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory
                                    .store(arg2 + 40, wit_bindgen_wasmtime::rt::as_i32(len8))?;
                                caller_memory
                                    .store(arg2 + 36, wit_bindgen_wasmtime::rt::as_i32(result8))?;
                            }
                            None => {
                                let e = ();
                                {
                                    caller_memory.store(
                                        arg2 + 32,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                    }
                };
                Ok(())
            },
        )?;
        linker.func_wrap(
            "sql_v1_alpha1",
            "row::get-float64",
            move |mut caller: wasmtime::Caller<'_, T>, arg0: i32, arg1: i32, arg2: i32| {
                let func = get_func(&mut caller, "canonical_abi_realloc")?;
                let func_canonical_abi_realloc =
                    func.typed::<(i32, i32, i32, i32), i32, _>(&caller)?;
                let memory = &get_memory(&mut caller, "memory")?;
                let host = get(caller.data_mut());
                let (host, _tables) = host;
                let param0 = _tables
                    .row_table
                    .get((arg0) as u32)
                    .ok_or_else(|| wasmtime::Trap::new("invalid handle index"))?;
                let param1 = arg1 as u32;
                let result = host.row_get_float64(param0, param1);
                match result {
                    Ok(e) => {
                        let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                        let (_, _tables) = get(data);
                        caller_memory
                            .store(arg2 + 0, wit_bindgen_wasmtime::rt::as_i32(0i32) as u8)?;
                        caller_memory.store(arg2 + 8, wit_bindgen_wasmtime::rt::as_f64(e))?;
                    }
                    Err(e) => {
                        let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                        let (_, _tables) = get(data);
                        caller_memory
                            .store(arg2 + 0, wit_bindgen_wasmtime::rt::as_i32(1i32) as u8)?;
                        let SqlError {
                            code_numeric: code_numeric0,
                            code_text: code_text0,
                            message: message0,
                            extra: extra0,
                        } = e;
                        match code_numeric0 {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg2 + 8,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                caller_memory.store(
                                    arg2 + 12,
                                    wit_bindgen_wasmtime::rt::as_i32(
                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                    ),
                                )?;
                            }
                            None => {
                                let e = ();
                                {
                                    caller_memory.store(
                                        arg2 + 8,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                        match code_text0 {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg2 + 16,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                let vec1 = e;
                                let ptr1 = func_canonical_abi_realloc
                                    .call(&mut caller, (0, 0, 1, vec1.len() as i32))?;
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store_many(ptr1, vec1.as_bytes())?;
                                caller_memory.store(
                                    arg2 + 24,
                                    wit_bindgen_wasmtime::rt::as_i32(vec1.len() as i32),
                                )?;
                                caller_memory
                                    .store(arg2 + 20, wit_bindgen_wasmtime::rt::as_i32(ptr1))?;
                            }
                            None => {
                                let e = ();
                                {
                                    let (caller_memory, data) =
                                        memory.data_and_store_mut(&mut caller);
                                    let (_, _tables) = get(data);
                                    caller_memory.store(
                                        arg2 + 16,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                        let vec2 = message0;
                        let ptr2 = func_canonical_abi_realloc
                            .call(&mut caller, (0, 0, 1, vec2.len() as i32))?;
                        let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                        let (_, _tables) = get(data);
                        caller_memory.store_many(ptr2, vec2.as_bytes())?;
                        caller_memory.store(
                            arg2 + 32,
                            wit_bindgen_wasmtime::rt::as_i32(vec2.len() as i32),
                        )?;
                        caller_memory.store(arg2 + 28, wit_bindgen_wasmtime::rt::as_i32(ptr2))?;
                        match extra0 {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg2 + 36,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                let vec8 = e;
                                let len8 = vec8.len() as i32;
                                let result8 = func_canonical_abi_realloc
                                    .call(&mut caller, (0, 0, 8, len8 * 24))?;
                                for (i, e) in vec8.into_iter().enumerate() {
                                    let base = result8 + (i as i32) * 24;
                                    {
                                        let ValueMapItemResult {
                                            key: key3,
                                            value: value3,
                                        } = e;
                                        let vec4 = key3;
                                        let ptr4 = func_canonical_abi_realloc
                                            .call(&mut caller, (0, 0, 1, vec4.len() as i32))?;
                                        let (caller_memory, data) =
                                            memory.data_and_store_mut(&mut caller);
                                        let (_, _tables) = get(data);
                                        caller_memory.store_many(ptr4, vec4.as_bytes())?;
                                        caller_memory.store(
                                            base + 4,
                                            wit_bindgen_wasmtime::rt::as_i32(vec4.len() as i32),
                                        )?;
                                        caller_memory.store(
                                            base + 0,
                                            wit_bindgen_wasmtime::rt::as_i32(ptr4),
                                        )?;
                                        match value3 {
                                            ValueResult::Null => {
                                                let e = ();
                                                {
                                                    caller_memory.store(
                                                        base + 8,
                                                        wit_bindgen_wasmtime::rt::as_i32(0i32)
                                                            as u8,
                                                    )?;
                                                    let () = e;
                                                }
                                            }
                                            ValueResult::Boolean(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(match e {
                                                        true => 1,
                                                        false => 0,
                                                    })
                                                        as u8,
                                                )?;
                                            }
                                            ValueResult::Int8(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(2i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u8,
                                                )?;
                                            }
                                            ValueResult::Int16(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(3i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u16,
                                                )?;
                                            }
                                            ValueResult::Int32(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(4i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Int64(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(5i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i64(
                                                        wit_bindgen_wasmtime::rt::as_i64(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Uint8(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(6i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u8,
                                                )?;
                                            }
                                            ValueResult::Uint16(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(7i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u16,
                                                )?;
                                            }
                                            ValueResult::Uint32(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(8i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Uint64(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(9i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i64(
                                                        wit_bindgen_wasmtime::rt::as_i64(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Floating32(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(10i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_f32(e),
                                                )?;
                                            }
                                            ValueResult::Floating64(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(11i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_f64(e),
                                                )?;
                                            }
                                            ValueResult::Str(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(12i32) as u8,
                                                )?;
                                                let vec5 = e;
                                                let ptr5 = func_canonical_abi_realloc.call(
                                                    &mut caller,
                                                    (0, 0, 1, vec5.len() as i32),
                                                )?;
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store_many(ptr5, vec5.as_bytes())?;
                                                caller_memory.store(
                                                    base + 20,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        vec5.len() as i32
                                                    ),
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(ptr5),
                                                )?;
                                            }
                                            ValueResult::Bytes(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(13i32) as u8,
                                                )?;
                                                let vec6 = e;
                                                let ptr6 = func_canonical_abi_realloc.call(
                                                    &mut caller,
                                                    (0, 0, 1, (vec6.len() as i32) * 1),
                                                )?;
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store_many(ptr6, &vec6)?;
                                                caller_memory.store(
                                                    base + 20,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        vec6.len() as i32
                                                    ),
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(ptr6),
                                                )?;
                                            }
                                            ValueResult::Raw(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(14i32) as u8,
                                                )?;
                                                let vec7 = e;
                                                let ptr7 = func_canonical_abi_realloc.call(
                                                    &mut caller,
                                                    (0, 0, 1, (vec7.len() as i32) * 1),
                                                )?;
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store_many(ptr7, &vec7)?;
                                                caller_memory.store(
                                                    base + 20,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        vec7.len() as i32
                                                    ),
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(ptr7),
                                                )?;
                                            }
                                        };
                                    }
                                }
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory
                                    .store(arg2 + 44, wit_bindgen_wasmtime::rt::as_i32(len8))?;
                                caller_memory
                                    .store(arg2 + 40, wit_bindgen_wasmtime::rt::as_i32(result8))?;
                            }
                            None => {
                                let e = ();
                                {
                                    caller_memory.store(
                                        arg2 + 36,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                    }
                };
                Ok(())
            },
        )?;
        linker.func_wrap(
            "sql_v1_alpha1",
            "row::get-string",
            move |mut caller: wasmtime::Caller<'_, T>, arg0: i32, arg1: i32, arg2: i32| {
                let func = get_func(&mut caller, "canonical_abi_realloc")?;
                let func_canonical_abi_realloc =
                    func.typed::<(i32, i32, i32, i32), i32, _>(&caller)?;
                let memory = &get_memory(&mut caller, "memory")?;
                let host = get(caller.data_mut());
                let (host, _tables) = host;
                let param0 = _tables
                    .row_table
                    .get((arg0) as u32)
                    .ok_or_else(|| wasmtime::Trap::new("invalid handle index"))?;
                let param1 = arg1 as u32;
                let result = host.row_get_string(param0, param1);
                match result {
                    Ok(e) => {
                        let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                        let (_, _tables) = get(data);
                        caller_memory
                            .store(arg2 + 0, wit_bindgen_wasmtime::rt::as_i32(0i32) as u8)?;
                        let vec0 = e;
                        let ptr0 = func_canonical_abi_realloc
                            .call(&mut caller, (0, 0, 1, vec0.len() as i32))?;
                        let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                        let (_, _tables) = get(data);
                        caller_memory.store_many(ptr0, vec0.as_bytes())?;
                        caller_memory.store(
                            arg2 + 8,
                            wit_bindgen_wasmtime::rt::as_i32(vec0.len() as i32),
                        )?;
                        caller_memory.store(arg2 + 4, wit_bindgen_wasmtime::rt::as_i32(ptr0))?;
                    }
                    Err(e) => {
                        let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                        let (_, _tables) = get(data);
                        caller_memory
                            .store(arg2 + 0, wit_bindgen_wasmtime::rt::as_i32(1i32) as u8)?;
                        let SqlError {
                            code_numeric: code_numeric1,
                            code_text: code_text1,
                            message: message1,
                            extra: extra1,
                        } = e;
                        match code_numeric1 {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg2 + 4,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                caller_memory.store(
                                    arg2 + 8,
                                    wit_bindgen_wasmtime::rt::as_i32(
                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                    ),
                                )?;
                            }
                            None => {
                                let e = ();
                                {
                                    caller_memory.store(
                                        arg2 + 4,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                        match code_text1 {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg2 + 12,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                let vec2 = e;
                                let ptr2 = func_canonical_abi_realloc
                                    .call(&mut caller, (0, 0, 1, vec2.len() as i32))?;
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store_many(ptr2, vec2.as_bytes())?;
                                caller_memory.store(
                                    arg2 + 20,
                                    wit_bindgen_wasmtime::rt::as_i32(vec2.len() as i32),
                                )?;
                                caller_memory
                                    .store(arg2 + 16, wit_bindgen_wasmtime::rt::as_i32(ptr2))?;
                            }
                            None => {
                                let e = ();
                                {
                                    let (caller_memory, data) =
                                        memory.data_and_store_mut(&mut caller);
                                    let (_, _tables) = get(data);
                                    caller_memory.store(
                                        arg2 + 12,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                        let vec3 = message1;
                        let ptr3 = func_canonical_abi_realloc
                            .call(&mut caller, (0, 0, 1, vec3.len() as i32))?;
                        let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                        let (_, _tables) = get(data);
                        caller_memory.store_many(ptr3, vec3.as_bytes())?;
                        caller_memory.store(
                            arg2 + 28,
                            wit_bindgen_wasmtime::rt::as_i32(vec3.len() as i32),
                        )?;
                        caller_memory.store(arg2 + 24, wit_bindgen_wasmtime::rt::as_i32(ptr3))?;
                        match extra1 {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg2 + 32,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                let vec9 = e;
                                let len9 = vec9.len() as i32;
                                let result9 = func_canonical_abi_realloc
                                    .call(&mut caller, (0, 0, 8, len9 * 24))?;
                                for (i, e) in vec9.into_iter().enumerate() {
                                    let base = result9 + (i as i32) * 24;
                                    {
                                        let ValueMapItemResult {
                                            key: key4,
                                            value: value4,
                                        } = e;
                                        let vec5 = key4;
                                        let ptr5 = func_canonical_abi_realloc
                                            .call(&mut caller, (0, 0, 1, vec5.len() as i32))?;
                                        let (caller_memory, data) =
                                            memory.data_and_store_mut(&mut caller);
                                        let (_, _tables) = get(data);
                                        caller_memory.store_many(ptr5, vec5.as_bytes())?;
                                        caller_memory.store(
                                            base + 4,
                                            wit_bindgen_wasmtime::rt::as_i32(vec5.len() as i32),
                                        )?;
                                        caller_memory.store(
                                            base + 0,
                                            wit_bindgen_wasmtime::rt::as_i32(ptr5),
                                        )?;
                                        match value4 {
                                            ValueResult::Null => {
                                                let e = ();
                                                {
                                                    caller_memory.store(
                                                        base + 8,
                                                        wit_bindgen_wasmtime::rt::as_i32(0i32)
                                                            as u8,
                                                    )?;
                                                    let () = e;
                                                }
                                            }
                                            ValueResult::Boolean(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(match e {
                                                        true => 1,
                                                        false => 0,
                                                    })
                                                        as u8,
                                                )?;
                                            }
                                            ValueResult::Int8(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(2i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u8,
                                                )?;
                                            }
                                            ValueResult::Int16(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(3i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u16,
                                                )?;
                                            }
                                            ValueResult::Int32(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(4i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Int64(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(5i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i64(
                                                        wit_bindgen_wasmtime::rt::as_i64(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Uint8(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(6i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u8,
                                                )?;
                                            }
                                            ValueResult::Uint16(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(7i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u16,
                                                )?;
                                            }
                                            ValueResult::Uint32(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(8i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Uint64(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(9i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i64(
                                                        wit_bindgen_wasmtime::rt::as_i64(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Floating32(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(10i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_f32(e),
                                                )?;
                                            }
                                            ValueResult::Floating64(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(11i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_f64(e),
                                                )?;
                                            }
                                            ValueResult::Str(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(12i32) as u8,
                                                )?;
                                                let vec6 = e;
                                                let ptr6 = func_canonical_abi_realloc.call(
                                                    &mut caller,
                                                    (0, 0, 1, vec6.len() as i32),
                                                )?;
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store_many(ptr6, vec6.as_bytes())?;
                                                caller_memory.store(
                                                    base + 20,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        vec6.len() as i32
                                                    ),
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(ptr6),
                                                )?;
                                            }
                                            ValueResult::Bytes(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(13i32) as u8,
                                                )?;
                                                let vec7 = e;
                                                let ptr7 = func_canonical_abi_realloc.call(
                                                    &mut caller,
                                                    (0, 0, 1, (vec7.len() as i32) * 1),
                                                )?;
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store_many(ptr7, &vec7)?;
                                                caller_memory.store(
                                                    base + 20,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        vec7.len() as i32
                                                    ),
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(ptr7),
                                                )?;
                                            }
                                            ValueResult::Raw(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(14i32) as u8,
                                                )?;
                                                let vec8 = e;
                                                let ptr8 = func_canonical_abi_realloc.call(
                                                    &mut caller,
                                                    (0, 0, 1, (vec8.len() as i32) * 1),
                                                )?;
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store_many(ptr8, &vec8)?;
                                                caller_memory.store(
                                                    base + 20,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        vec8.len() as i32
                                                    ),
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(ptr8),
                                                )?;
                                            }
                                        };
                                    }
                                }
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory
                                    .store(arg2 + 40, wit_bindgen_wasmtime::rt::as_i32(len9))?;
                                caller_memory
                                    .store(arg2 + 36, wit_bindgen_wasmtime::rt::as_i32(result9))?;
                            }
                            None => {
                                let e = ();
                                {
                                    caller_memory.store(
                                        arg2 + 32,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                    }
                };
                Ok(())
            },
        )?;
        linker.func_wrap(
            "sql_v1_alpha1",
            "row::get-bytes",
            move |mut caller: wasmtime::Caller<'_, T>, arg0: i32, arg1: i32, arg2: i32| {
                let func = get_func(&mut caller, "canonical_abi_realloc")?;
                let func_canonical_abi_realloc =
                    func.typed::<(i32, i32, i32, i32), i32, _>(&caller)?;
                let memory = &get_memory(&mut caller, "memory")?;
                let host = get(caller.data_mut());
                let (host, _tables) = host;
                let param0 = _tables
                    .row_table
                    .get((arg0) as u32)
                    .ok_or_else(|| wasmtime::Trap::new("invalid handle index"))?;
                let param1 = arg1 as u32;
                let result = host.row_get_bytes(param0, param1);
                match result {
                    Ok(e) => {
                        let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                        let (_, _tables) = get(data);
                        caller_memory
                            .store(arg2 + 0, wit_bindgen_wasmtime::rt::as_i32(0i32) as u8)?;
                        let vec0 = e;
                        let ptr0 = func_canonical_abi_realloc
                            .call(&mut caller, (0, 0, 1, (vec0.len() as i32) * 1))?;
                        let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                        let (_, _tables) = get(data);
                        caller_memory.store_many(ptr0, &vec0)?;
                        caller_memory.store(
                            arg2 + 8,
                            wit_bindgen_wasmtime::rt::as_i32(vec0.len() as i32),
                        )?;
                        caller_memory.store(arg2 + 4, wit_bindgen_wasmtime::rt::as_i32(ptr0))?;
                    }
                    Err(e) => {
                        let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                        let (_, _tables) = get(data);
                        caller_memory
                            .store(arg2 + 0, wit_bindgen_wasmtime::rt::as_i32(1i32) as u8)?;
                        let SqlError {
                            code_numeric: code_numeric1,
                            code_text: code_text1,
                            message: message1,
                            extra: extra1,
                        } = e;
                        match code_numeric1 {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg2 + 4,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                caller_memory.store(
                                    arg2 + 8,
                                    wit_bindgen_wasmtime::rt::as_i32(
                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                    ),
                                )?;
                            }
                            None => {
                                let e = ();
                                {
                                    caller_memory.store(
                                        arg2 + 4,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                        match code_text1 {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg2 + 12,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                let vec2 = e;
                                let ptr2 = func_canonical_abi_realloc
                                    .call(&mut caller, (0, 0, 1, vec2.len() as i32))?;
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store_many(ptr2, vec2.as_bytes())?;
                                caller_memory.store(
                                    arg2 + 20,
                                    wit_bindgen_wasmtime::rt::as_i32(vec2.len() as i32),
                                )?;
                                caller_memory
                                    .store(arg2 + 16, wit_bindgen_wasmtime::rt::as_i32(ptr2))?;
                            }
                            None => {
                                let e = ();
                                {
                                    let (caller_memory, data) =
                                        memory.data_and_store_mut(&mut caller);
                                    let (_, _tables) = get(data);
                                    caller_memory.store(
                                        arg2 + 12,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                        let vec3 = message1;
                        let ptr3 = func_canonical_abi_realloc
                            .call(&mut caller, (0, 0, 1, vec3.len() as i32))?;
                        let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                        let (_, _tables) = get(data);
                        caller_memory.store_many(ptr3, vec3.as_bytes())?;
                        caller_memory.store(
                            arg2 + 28,
                            wit_bindgen_wasmtime::rt::as_i32(vec3.len() as i32),
                        )?;
                        caller_memory.store(arg2 + 24, wit_bindgen_wasmtime::rt::as_i32(ptr3))?;
                        match extra1 {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg2 + 32,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                let vec9 = e;
                                let len9 = vec9.len() as i32;
                                let result9 = func_canonical_abi_realloc
                                    .call(&mut caller, (0, 0, 8, len9 * 24))?;
                                for (i, e) in vec9.into_iter().enumerate() {
                                    let base = result9 + (i as i32) * 24;
                                    {
                                        let ValueMapItemResult {
                                            key: key4,
                                            value: value4,
                                        } = e;
                                        let vec5 = key4;
                                        let ptr5 = func_canonical_abi_realloc
                                            .call(&mut caller, (0, 0, 1, vec5.len() as i32))?;
                                        let (caller_memory, data) =
                                            memory.data_and_store_mut(&mut caller);
                                        let (_, _tables) = get(data);
                                        caller_memory.store_many(ptr5, vec5.as_bytes())?;
                                        caller_memory.store(
                                            base + 4,
                                            wit_bindgen_wasmtime::rt::as_i32(vec5.len() as i32),
                                        )?;
                                        caller_memory.store(
                                            base + 0,
                                            wit_bindgen_wasmtime::rt::as_i32(ptr5),
                                        )?;
                                        match value4 {
                                            ValueResult::Null => {
                                                let e = ();
                                                {
                                                    caller_memory.store(
                                                        base + 8,
                                                        wit_bindgen_wasmtime::rt::as_i32(0i32)
                                                            as u8,
                                                    )?;
                                                    let () = e;
                                                }
                                            }
                                            ValueResult::Boolean(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(match e {
                                                        true => 1,
                                                        false => 0,
                                                    })
                                                        as u8,
                                                )?;
                                            }
                                            ValueResult::Int8(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(2i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u8,
                                                )?;
                                            }
                                            ValueResult::Int16(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(3i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u16,
                                                )?;
                                            }
                                            ValueResult::Int32(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(4i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Int64(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(5i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i64(
                                                        wit_bindgen_wasmtime::rt::as_i64(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Uint8(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(6i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u8,
                                                )?;
                                            }
                                            ValueResult::Uint16(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(7i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u16,
                                                )?;
                                            }
                                            ValueResult::Uint32(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(8i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Uint64(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(9i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i64(
                                                        wit_bindgen_wasmtime::rt::as_i64(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Floating32(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(10i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_f32(e),
                                                )?;
                                            }
                                            ValueResult::Floating64(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(11i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_f64(e),
                                                )?;
                                            }
                                            ValueResult::Str(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(12i32) as u8,
                                                )?;
                                                let vec6 = e;
                                                let ptr6 = func_canonical_abi_realloc.call(
                                                    &mut caller,
                                                    (0, 0, 1, vec6.len() as i32),
                                                )?;
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store_many(ptr6, vec6.as_bytes())?;
                                                caller_memory.store(
                                                    base + 20,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        vec6.len() as i32
                                                    ),
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(ptr6),
                                                )?;
                                            }
                                            ValueResult::Bytes(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(13i32) as u8,
                                                )?;
                                                let vec7 = e;
                                                let ptr7 = func_canonical_abi_realloc.call(
                                                    &mut caller,
                                                    (0, 0, 1, (vec7.len() as i32) * 1),
                                                )?;
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store_many(ptr7, &vec7)?;
                                                caller_memory.store(
                                                    base + 20,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        vec7.len() as i32
                                                    ),
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(ptr7),
                                                )?;
                                            }
                                            ValueResult::Raw(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(14i32) as u8,
                                                )?;
                                                let vec8 = e;
                                                let ptr8 = func_canonical_abi_realloc.call(
                                                    &mut caller,
                                                    (0, 0, 1, (vec8.len() as i32) * 1),
                                                )?;
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store_many(ptr8, &vec8)?;
                                                caller_memory.store(
                                                    base + 20,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        vec8.len() as i32
                                                    ),
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(ptr8),
                                                )?;
                                            }
                                        };
                                    }
                                }
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory
                                    .store(arg2 + 40, wit_bindgen_wasmtime::rt::as_i32(len9))?;
                                caller_memory
                                    .store(arg2 + 36, wit_bindgen_wasmtime::rt::as_i32(result9))?;
                            }
                            None => {
                                let e = ();
                                {
                                    caller_memory.store(
                                        arg2 + 32,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                    }
                };
                Ok(())
            },
        )?;
        linker.func_wrap(
            "sql_v1_alpha1",
            "row::get-raw",
            move |mut caller: wasmtime::Caller<'_, T>, arg0: i32, arg1: i32, arg2: i32| {
                let func = get_func(&mut caller, "canonical_abi_realloc")?;
                let func_canonical_abi_realloc =
                    func.typed::<(i32, i32, i32, i32), i32, _>(&caller)?;
                let memory = &get_memory(&mut caller, "memory")?;
                let host = get(caller.data_mut());
                let (host, _tables) = host;
                let param0 = _tables
                    .row_table
                    .get((arg0) as u32)
                    .ok_or_else(|| wasmtime::Trap::new("invalid handle index"))?;
                let param1 = arg1 as u32;
                let result = host.row_get_raw(param0, param1);
                match result {
                    Ok(e) => {
                        let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                        let (_, _tables) = get(data);
                        caller_memory
                            .store(arg2 + 0, wit_bindgen_wasmtime::rt::as_i32(0i32) as u8)?;
                        let vec0 = e;
                        let ptr0 = func_canonical_abi_realloc
                            .call(&mut caller, (0, 0, 1, (vec0.len() as i32) * 1))?;
                        let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                        let (_, _tables) = get(data);
                        caller_memory.store_many(ptr0, &vec0)?;
                        caller_memory.store(
                            arg2 + 8,
                            wit_bindgen_wasmtime::rt::as_i32(vec0.len() as i32),
                        )?;
                        caller_memory.store(arg2 + 4, wit_bindgen_wasmtime::rt::as_i32(ptr0))?;
                    }
                    Err(e) => {
                        let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                        let (_, _tables) = get(data);
                        caller_memory
                            .store(arg2 + 0, wit_bindgen_wasmtime::rt::as_i32(1i32) as u8)?;
                        let SqlError {
                            code_numeric: code_numeric1,
                            code_text: code_text1,
                            message: message1,
                            extra: extra1,
                        } = e;
                        match code_numeric1 {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg2 + 4,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                caller_memory.store(
                                    arg2 + 8,
                                    wit_bindgen_wasmtime::rt::as_i32(
                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                    ),
                                )?;
                            }
                            None => {
                                let e = ();
                                {
                                    caller_memory.store(
                                        arg2 + 4,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                        match code_text1 {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg2 + 12,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                let vec2 = e;
                                let ptr2 = func_canonical_abi_realloc
                                    .call(&mut caller, (0, 0, 1, vec2.len() as i32))?;
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store_many(ptr2, vec2.as_bytes())?;
                                caller_memory.store(
                                    arg2 + 20,
                                    wit_bindgen_wasmtime::rt::as_i32(vec2.len() as i32),
                                )?;
                                caller_memory
                                    .store(arg2 + 16, wit_bindgen_wasmtime::rt::as_i32(ptr2))?;
                            }
                            None => {
                                let e = ();
                                {
                                    let (caller_memory, data) =
                                        memory.data_and_store_mut(&mut caller);
                                    let (_, _tables) = get(data);
                                    caller_memory.store(
                                        arg2 + 12,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                        let vec3 = message1;
                        let ptr3 = func_canonical_abi_realloc
                            .call(&mut caller, (0, 0, 1, vec3.len() as i32))?;
                        let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                        let (_, _tables) = get(data);
                        caller_memory.store_many(ptr3, vec3.as_bytes())?;
                        caller_memory.store(
                            arg2 + 28,
                            wit_bindgen_wasmtime::rt::as_i32(vec3.len() as i32),
                        )?;
                        caller_memory.store(arg2 + 24, wit_bindgen_wasmtime::rt::as_i32(ptr3))?;
                        match extra1 {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg2 + 32,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                let vec9 = e;
                                let len9 = vec9.len() as i32;
                                let result9 = func_canonical_abi_realloc
                                    .call(&mut caller, (0, 0, 8, len9 * 24))?;
                                for (i, e) in vec9.into_iter().enumerate() {
                                    let base = result9 + (i as i32) * 24;
                                    {
                                        let ValueMapItemResult {
                                            key: key4,
                                            value: value4,
                                        } = e;
                                        let vec5 = key4;
                                        let ptr5 = func_canonical_abi_realloc
                                            .call(&mut caller, (0, 0, 1, vec5.len() as i32))?;
                                        let (caller_memory, data) =
                                            memory.data_and_store_mut(&mut caller);
                                        let (_, _tables) = get(data);
                                        caller_memory.store_many(ptr5, vec5.as_bytes())?;
                                        caller_memory.store(
                                            base + 4,
                                            wit_bindgen_wasmtime::rt::as_i32(vec5.len() as i32),
                                        )?;
                                        caller_memory.store(
                                            base + 0,
                                            wit_bindgen_wasmtime::rt::as_i32(ptr5),
                                        )?;
                                        match value4 {
                                            ValueResult::Null => {
                                                let e = ();
                                                {
                                                    caller_memory.store(
                                                        base + 8,
                                                        wit_bindgen_wasmtime::rt::as_i32(0i32)
                                                            as u8,
                                                    )?;
                                                    let () = e;
                                                }
                                            }
                                            ValueResult::Boolean(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(match e {
                                                        true => 1,
                                                        false => 0,
                                                    })
                                                        as u8,
                                                )?;
                                            }
                                            ValueResult::Int8(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(2i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u8,
                                                )?;
                                            }
                                            ValueResult::Int16(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(3i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u16,
                                                )?;
                                            }
                                            ValueResult::Int32(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(4i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Int64(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(5i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i64(
                                                        wit_bindgen_wasmtime::rt::as_i64(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Uint8(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(6i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u8,
                                                )?;
                                            }
                                            ValueResult::Uint16(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(7i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u16,
                                                )?;
                                            }
                                            ValueResult::Uint32(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(8i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Uint64(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(9i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i64(
                                                        wit_bindgen_wasmtime::rt::as_i64(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Floating32(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(10i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_f32(e),
                                                )?;
                                            }
                                            ValueResult::Floating64(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(11i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_f64(e),
                                                )?;
                                            }
                                            ValueResult::Str(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(12i32) as u8,
                                                )?;
                                                let vec6 = e;
                                                let ptr6 = func_canonical_abi_realloc.call(
                                                    &mut caller,
                                                    (0, 0, 1, vec6.len() as i32),
                                                )?;
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store_many(ptr6, vec6.as_bytes())?;
                                                caller_memory.store(
                                                    base + 20,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        vec6.len() as i32
                                                    ),
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(ptr6),
                                                )?;
                                            }
                                            ValueResult::Bytes(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(13i32) as u8,
                                                )?;
                                                let vec7 = e;
                                                let ptr7 = func_canonical_abi_realloc.call(
                                                    &mut caller,
                                                    (0, 0, 1, (vec7.len() as i32) * 1),
                                                )?;
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store_many(ptr7, &vec7)?;
                                                caller_memory.store(
                                                    base + 20,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        vec7.len() as i32
                                                    ),
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(ptr7),
                                                )?;
                                            }
                                            ValueResult::Raw(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(14i32) as u8,
                                                )?;
                                                let vec8 = e;
                                                let ptr8 = func_canonical_abi_realloc.call(
                                                    &mut caller,
                                                    (0, 0, 1, (vec8.len() as i32) * 1),
                                                )?;
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store_many(ptr8, &vec8)?;
                                                caller_memory.store(
                                                    base + 20,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        vec8.len() as i32
                                                    ),
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(ptr8),
                                                )?;
                                            }
                                        };
                                    }
                                }
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory
                                    .store(arg2 + 40, wit_bindgen_wasmtime::rt::as_i32(len9))?;
                                caller_memory
                                    .store(arg2 + 36, wit_bindgen_wasmtime::rt::as_i32(result9))?;
                            }
                            None => {
                                let e = ();
                                {
                                    caller_memory.store(
                                        arg2 + 32,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                    }
                };
                Ok(())
            },
        )?;
        linker.func_wrap(
            "sql_v1_alpha1",
            "row::get-optional-bool",
            move |mut caller: wasmtime::Caller<'_, T>, arg0: i32, arg1: i32, arg2: i32| {
                let func = get_func(&mut caller, "canonical_abi_realloc")?;
                let func_canonical_abi_realloc =
                    func.typed::<(i32, i32, i32, i32), i32, _>(&caller)?;
                let memory = &get_memory(&mut caller, "memory")?;
                let host = get(caller.data_mut());
                let (host, _tables) = host;
                let param0 = _tables
                    .row_table
                    .get((arg0) as u32)
                    .ok_or_else(|| wasmtime::Trap::new("invalid handle index"))?;
                let param1 = arg1 as u32;
                let result = host.row_get_optional_bool(param0, param1);
                match result {
                    Ok(e) => {
                        let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                        let (_, _tables) = get(data);
                        caller_memory
                            .store(arg2 + 0, wit_bindgen_wasmtime::rt::as_i32(0i32) as u8)?;
                        match e {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg2 + 4,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                caller_memory.store(
                                    arg2 + 5,
                                    wit_bindgen_wasmtime::rt::as_i32(match e {
                                        true => 1,
                                        false => 0,
                                    }) as u8,
                                )?;
                            }
                            None => {
                                let e = ();
                                {
                                    caller_memory.store(
                                        arg2 + 4,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                    }
                    Err(e) => {
                        let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                        let (_, _tables) = get(data);
                        caller_memory
                            .store(arg2 + 0, wit_bindgen_wasmtime::rt::as_i32(1i32) as u8)?;
                        let SqlError {
                            code_numeric: code_numeric0,
                            code_text: code_text0,
                            message: message0,
                            extra: extra0,
                        } = e;
                        match code_numeric0 {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg2 + 4,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                caller_memory.store(
                                    arg2 + 8,
                                    wit_bindgen_wasmtime::rt::as_i32(
                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                    ),
                                )?;
                            }
                            None => {
                                let e = ();
                                {
                                    caller_memory.store(
                                        arg2 + 4,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                        match code_text0 {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg2 + 12,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                let vec1 = e;
                                let ptr1 = func_canonical_abi_realloc
                                    .call(&mut caller, (0, 0, 1, vec1.len() as i32))?;
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store_many(ptr1, vec1.as_bytes())?;
                                caller_memory.store(
                                    arg2 + 20,
                                    wit_bindgen_wasmtime::rt::as_i32(vec1.len() as i32),
                                )?;
                                caller_memory
                                    .store(arg2 + 16, wit_bindgen_wasmtime::rt::as_i32(ptr1))?;
                            }
                            None => {
                                let e = ();
                                {
                                    let (caller_memory, data) =
                                        memory.data_and_store_mut(&mut caller);
                                    let (_, _tables) = get(data);
                                    caller_memory.store(
                                        arg2 + 12,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                        let vec2 = message0;
                        let ptr2 = func_canonical_abi_realloc
                            .call(&mut caller, (0, 0, 1, vec2.len() as i32))?;
                        let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                        let (_, _tables) = get(data);
                        caller_memory.store_many(ptr2, vec2.as_bytes())?;
                        caller_memory.store(
                            arg2 + 28,
                            wit_bindgen_wasmtime::rt::as_i32(vec2.len() as i32),
                        )?;
                        caller_memory.store(arg2 + 24, wit_bindgen_wasmtime::rt::as_i32(ptr2))?;
                        match extra0 {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg2 + 32,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                let vec8 = e;
                                let len8 = vec8.len() as i32;
                                let result8 = func_canonical_abi_realloc
                                    .call(&mut caller, (0, 0, 8, len8 * 24))?;
                                for (i, e) in vec8.into_iter().enumerate() {
                                    let base = result8 + (i as i32) * 24;
                                    {
                                        let ValueMapItemResult {
                                            key: key3,
                                            value: value3,
                                        } = e;
                                        let vec4 = key3;
                                        let ptr4 = func_canonical_abi_realloc
                                            .call(&mut caller, (0, 0, 1, vec4.len() as i32))?;
                                        let (caller_memory, data) =
                                            memory.data_and_store_mut(&mut caller);
                                        let (_, _tables) = get(data);
                                        caller_memory.store_many(ptr4, vec4.as_bytes())?;
                                        caller_memory.store(
                                            base + 4,
                                            wit_bindgen_wasmtime::rt::as_i32(vec4.len() as i32),
                                        )?;
                                        caller_memory.store(
                                            base + 0,
                                            wit_bindgen_wasmtime::rt::as_i32(ptr4),
                                        )?;
                                        match value3 {
                                            ValueResult::Null => {
                                                let e = ();
                                                {
                                                    caller_memory.store(
                                                        base + 8,
                                                        wit_bindgen_wasmtime::rt::as_i32(0i32)
                                                            as u8,
                                                    )?;
                                                    let () = e;
                                                }
                                            }
                                            ValueResult::Boolean(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(match e {
                                                        true => 1,
                                                        false => 0,
                                                    })
                                                        as u8,
                                                )?;
                                            }
                                            ValueResult::Int8(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(2i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u8,
                                                )?;
                                            }
                                            ValueResult::Int16(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(3i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u16,
                                                )?;
                                            }
                                            ValueResult::Int32(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(4i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Int64(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(5i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i64(
                                                        wit_bindgen_wasmtime::rt::as_i64(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Uint8(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(6i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u8,
                                                )?;
                                            }
                                            ValueResult::Uint16(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(7i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u16,
                                                )?;
                                            }
                                            ValueResult::Uint32(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(8i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Uint64(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(9i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i64(
                                                        wit_bindgen_wasmtime::rt::as_i64(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Floating32(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(10i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_f32(e),
                                                )?;
                                            }
                                            ValueResult::Floating64(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(11i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_f64(e),
                                                )?;
                                            }
                                            ValueResult::Str(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(12i32) as u8,
                                                )?;
                                                let vec5 = e;
                                                let ptr5 = func_canonical_abi_realloc.call(
                                                    &mut caller,
                                                    (0, 0, 1, vec5.len() as i32),
                                                )?;
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store_many(ptr5, vec5.as_bytes())?;
                                                caller_memory.store(
                                                    base + 20,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        vec5.len() as i32
                                                    ),
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(ptr5),
                                                )?;
                                            }
                                            ValueResult::Bytes(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(13i32) as u8,
                                                )?;
                                                let vec6 = e;
                                                let ptr6 = func_canonical_abi_realloc.call(
                                                    &mut caller,
                                                    (0, 0, 1, (vec6.len() as i32) * 1),
                                                )?;
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store_many(ptr6, &vec6)?;
                                                caller_memory.store(
                                                    base + 20,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        vec6.len() as i32
                                                    ),
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(ptr6),
                                                )?;
                                            }
                                            ValueResult::Raw(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(14i32) as u8,
                                                )?;
                                                let vec7 = e;
                                                let ptr7 = func_canonical_abi_realloc.call(
                                                    &mut caller,
                                                    (0, 0, 1, (vec7.len() as i32) * 1),
                                                )?;
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store_many(ptr7, &vec7)?;
                                                caller_memory.store(
                                                    base + 20,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        vec7.len() as i32
                                                    ),
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(ptr7),
                                                )?;
                                            }
                                        };
                                    }
                                }
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory
                                    .store(arg2 + 40, wit_bindgen_wasmtime::rt::as_i32(len8))?;
                                caller_memory
                                    .store(arg2 + 36, wit_bindgen_wasmtime::rt::as_i32(result8))?;
                            }
                            None => {
                                let e = ();
                                {
                                    caller_memory.store(
                                        arg2 + 32,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                    }
                };
                Ok(())
            },
        )?;
        linker.func_wrap(
            "sql_v1_alpha1",
            "row::get-optional-int8",
            move |mut caller: wasmtime::Caller<'_, T>, arg0: i32, arg1: i32, arg2: i32| {
                let func = get_func(&mut caller, "canonical_abi_realloc")?;
                let func_canonical_abi_realloc =
                    func.typed::<(i32, i32, i32, i32), i32, _>(&caller)?;
                let memory = &get_memory(&mut caller, "memory")?;
                let host = get(caller.data_mut());
                let (host, _tables) = host;
                let param0 = _tables
                    .row_table
                    .get((arg0) as u32)
                    .ok_or_else(|| wasmtime::Trap::new("invalid handle index"))?;
                let param1 = arg1 as u32;
                let result = host.row_get_optional_int8(param0, param1);
                match result {
                    Ok(e) => {
                        let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                        let (_, _tables) = get(data);
                        caller_memory
                            .store(arg2 + 0, wit_bindgen_wasmtime::rt::as_i32(0i32) as u8)?;
                        match e {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg2 + 4,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                caller_memory.store(
                                    arg2 + 5,
                                    wit_bindgen_wasmtime::rt::as_i32(
                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                    ) as u8,
                                )?;
                            }
                            None => {
                                let e = ();
                                {
                                    caller_memory.store(
                                        arg2 + 4,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                    }
                    Err(e) => {
                        let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                        let (_, _tables) = get(data);
                        caller_memory
                            .store(arg2 + 0, wit_bindgen_wasmtime::rt::as_i32(1i32) as u8)?;
                        let SqlError {
                            code_numeric: code_numeric0,
                            code_text: code_text0,
                            message: message0,
                            extra: extra0,
                        } = e;
                        match code_numeric0 {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg2 + 4,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                caller_memory.store(
                                    arg2 + 8,
                                    wit_bindgen_wasmtime::rt::as_i32(
                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                    ),
                                )?;
                            }
                            None => {
                                let e = ();
                                {
                                    caller_memory.store(
                                        arg2 + 4,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                        match code_text0 {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg2 + 12,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                let vec1 = e;
                                let ptr1 = func_canonical_abi_realloc
                                    .call(&mut caller, (0, 0, 1, vec1.len() as i32))?;
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store_many(ptr1, vec1.as_bytes())?;
                                caller_memory.store(
                                    arg2 + 20,
                                    wit_bindgen_wasmtime::rt::as_i32(vec1.len() as i32),
                                )?;
                                caller_memory
                                    .store(arg2 + 16, wit_bindgen_wasmtime::rt::as_i32(ptr1))?;
                            }
                            None => {
                                let e = ();
                                {
                                    let (caller_memory, data) =
                                        memory.data_and_store_mut(&mut caller);
                                    let (_, _tables) = get(data);
                                    caller_memory.store(
                                        arg2 + 12,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                        let vec2 = message0;
                        let ptr2 = func_canonical_abi_realloc
                            .call(&mut caller, (0, 0, 1, vec2.len() as i32))?;
                        let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                        let (_, _tables) = get(data);
                        caller_memory.store_many(ptr2, vec2.as_bytes())?;
                        caller_memory.store(
                            arg2 + 28,
                            wit_bindgen_wasmtime::rt::as_i32(vec2.len() as i32),
                        )?;
                        caller_memory.store(arg2 + 24, wit_bindgen_wasmtime::rt::as_i32(ptr2))?;
                        match extra0 {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg2 + 32,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                let vec8 = e;
                                let len8 = vec8.len() as i32;
                                let result8 = func_canonical_abi_realloc
                                    .call(&mut caller, (0, 0, 8, len8 * 24))?;
                                for (i, e) in vec8.into_iter().enumerate() {
                                    let base = result8 + (i as i32) * 24;
                                    {
                                        let ValueMapItemResult {
                                            key: key3,
                                            value: value3,
                                        } = e;
                                        let vec4 = key3;
                                        let ptr4 = func_canonical_abi_realloc
                                            .call(&mut caller, (0, 0, 1, vec4.len() as i32))?;
                                        let (caller_memory, data) =
                                            memory.data_and_store_mut(&mut caller);
                                        let (_, _tables) = get(data);
                                        caller_memory.store_many(ptr4, vec4.as_bytes())?;
                                        caller_memory.store(
                                            base + 4,
                                            wit_bindgen_wasmtime::rt::as_i32(vec4.len() as i32),
                                        )?;
                                        caller_memory.store(
                                            base + 0,
                                            wit_bindgen_wasmtime::rt::as_i32(ptr4),
                                        )?;
                                        match value3 {
                                            ValueResult::Null => {
                                                let e = ();
                                                {
                                                    caller_memory.store(
                                                        base + 8,
                                                        wit_bindgen_wasmtime::rt::as_i32(0i32)
                                                            as u8,
                                                    )?;
                                                    let () = e;
                                                }
                                            }
                                            ValueResult::Boolean(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(match e {
                                                        true => 1,
                                                        false => 0,
                                                    })
                                                        as u8,
                                                )?;
                                            }
                                            ValueResult::Int8(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(2i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u8,
                                                )?;
                                            }
                                            ValueResult::Int16(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(3i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u16,
                                                )?;
                                            }
                                            ValueResult::Int32(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(4i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Int64(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(5i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i64(
                                                        wit_bindgen_wasmtime::rt::as_i64(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Uint8(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(6i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u8,
                                                )?;
                                            }
                                            ValueResult::Uint16(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(7i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u16,
                                                )?;
                                            }
                                            ValueResult::Uint32(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(8i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Uint64(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(9i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i64(
                                                        wit_bindgen_wasmtime::rt::as_i64(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Floating32(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(10i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_f32(e),
                                                )?;
                                            }
                                            ValueResult::Floating64(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(11i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_f64(e),
                                                )?;
                                            }
                                            ValueResult::Str(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(12i32) as u8,
                                                )?;
                                                let vec5 = e;
                                                let ptr5 = func_canonical_abi_realloc.call(
                                                    &mut caller,
                                                    (0, 0, 1, vec5.len() as i32),
                                                )?;
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store_many(ptr5, vec5.as_bytes())?;
                                                caller_memory.store(
                                                    base + 20,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        vec5.len() as i32
                                                    ),
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(ptr5),
                                                )?;
                                            }
                                            ValueResult::Bytes(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(13i32) as u8,
                                                )?;
                                                let vec6 = e;
                                                let ptr6 = func_canonical_abi_realloc.call(
                                                    &mut caller,
                                                    (0, 0, 1, (vec6.len() as i32) * 1),
                                                )?;
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store_many(ptr6, &vec6)?;
                                                caller_memory.store(
                                                    base + 20,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        vec6.len() as i32
                                                    ),
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(ptr6),
                                                )?;
                                            }
                                            ValueResult::Raw(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(14i32) as u8,
                                                )?;
                                                let vec7 = e;
                                                let ptr7 = func_canonical_abi_realloc.call(
                                                    &mut caller,
                                                    (0, 0, 1, (vec7.len() as i32) * 1),
                                                )?;
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store_many(ptr7, &vec7)?;
                                                caller_memory.store(
                                                    base + 20,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        vec7.len() as i32
                                                    ),
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(ptr7),
                                                )?;
                                            }
                                        };
                                    }
                                }
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory
                                    .store(arg2 + 40, wit_bindgen_wasmtime::rt::as_i32(len8))?;
                                caller_memory
                                    .store(arg2 + 36, wit_bindgen_wasmtime::rt::as_i32(result8))?;
                            }
                            None => {
                                let e = ();
                                {
                                    caller_memory.store(
                                        arg2 + 32,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                    }
                };
                Ok(())
            },
        )?;
        linker.func_wrap(
            "sql_v1_alpha1",
            "row::get-optional-int16",
            move |mut caller: wasmtime::Caller<'_, T>, arg0: i32, arg1: i32, arg2: i32| {
                let func = get_func(&mut caller, "canonical_abi_realloc")?;
                let func_canonical_abi_realloc =
                    func.typed::<(i32, i32, i32, i32), i32, _>(&caller)?;
                let memory = &get_memory(&mut caller, "memory")?;
                let host = get(caller.data_mut());
                let (host, _tables) = host;
                let param0 = _tables
                    .row_table
                    .get((arg0) as u32)
                    .ok_or_else(|| wasmtime::Trap::new("invalid handle index"))?;
                let param1 = arg1 as u32;
                let result = host.row_get_optional_int16(param0, param1);
                match result {
                    Ok(e) => {
                        let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                        let (_, _tables) = get(data);
                        caller_memory
                            .store(arg2 + 0, wit_bindgen_wasmtime::rt::as_i32(0i32) as u8)?;
                        match e {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg2 + 4,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                caller_memory.store(
                                    arg2 + 6,
                                    wit_bindgen_wasmtime::rt::as_i32(
                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                    ) as u16,
                                )?;
                            }
                            None => {
                                let e = ();
                                {
                                    caller_memory.store(
                                        arg2 + 4,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                    }
                    Err(e) => {
                        let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                        let (_, _tables) = get(data);
                        caller_memory
                            .store(arg2 + 0, wit_bindgen_wasmtime::rt::as_i32(1i32) as u8)?;
                        let SqlError {
                            code_numeric: code_numeric0,
                            code_text: code_text0,
                            message: message0,
                            extra: extra0,
                        } = e;
                        match code_numeric0 {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg2 + 4,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                caller_memory.store(
                                    arg2 + 8,
                                    wit_bindgen_wasmtime::rt::as_i32(
                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                    ),
                                )?;
                            }
                            None => {
                                let e = ();
                                {
                                    caller_memory.store(
                                        arg2 + 4,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                        match code_text0 {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg2 + 12,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                let vec1 = e;
                                let ptr1 = func_canonical_abi_realloc
                                    .call(&mut caller, (0, 0, 1, vec1.len() as i32))?;
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store_many(ptr1, vec1.as_bytes())?;
                                caller_memory.store(
                                    arg2 + 20,
                                    wit_bindgen_wasmtime::rt::as_i32(vec1.len() as i32),
                                )?;
                                caller_memory
                                    .store(arg2 + 16, wit_bindgen_wasmtime::rt::as_i32(ptr1))?;
                            }
                            None => {
                                let e = ();
                                {
                                    let (caller_memory, data) =
                                        memory.data_and_store_mut(&mut caller);
                                    let (_, _tables) = get(data);
                                    caller_memory.store(
                                        arg2 + 12,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                        let vec2 = message0;
                        let ptr2 = func_canonical_abi_realloc
                            .call(&mut caller, (0, 0, 1, vec2.len() as i32))?;
                        let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                        let (_, _tables) = get(data);
                        caller_memory.store_many(ptr2, vec2.as_bytes())?;
                        caller_memory.store(
                            arg2 + 28,
                            wit_bindgen_wasmtime::rt::as_i32(vec2.len() as i32),
                        )?;
                        caller_memory.store(arg2 + 24, wit_bindgen_wasmtime::rt::as_i32(ptr2))?;
                        match extra0 {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg2 + 32,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                let vec8 = e;
                                let len8 = vec8.len() as i32;
                                let result8 = func_canonical_abi_realloc
                                    .call(&mut caller, (0, 0, 8, len8 * 24))?;
                                for (i, e) in vec8.into_iter().enumerate() {
                                    let base = result8 + (i as i32) * 24;
                                    {
                                        let ValueMapItemResult {
                                            key: key3,
                                            value: value3,
                                        } = e;
                                        let vec4 = key3;
                                        let ptr4 = func_canonical_abi_realloc
                                            .call(&mut caller, (0, 0, 1, vec4.len() as i32))?;
                                        let (caller_memory, data) =
                                            memory.data_and_store_mut(&mut caller);
                                        let (_, _tables) = get(data);
                                        caller_memory.store_many(ptr4, vec4.as_bytes())?;
                                        caller_memory.store(
                                            base + 4,
                                            wit_bindgen_wasmtime::rt::as_i32(vec4.len() as i32),
                                        )?;
                                        caller_memory.store(
                                            base + 0,
                                            wit_bindgen_wasmtime::rt::as_i32(ptr4),
                                        )?;
                                        match value3 {
                                            ValueResult::Null => {
                                                let e = ();
                                                {
                                                    caller_memory.store(
                                                        base + 8,
                                                        wit_bindgen_wasmtime::rt::as_i32(0i32)
                                                            as u8,
                                                    )?;
                                                    let () = e;
                                                }
                                            }
                                            ValueResult::Boolean(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(match e {
                                                        true => 1,
                                                        false => 0,
                                                    })
                                                        as u8,
                                                )?;
                                            }
                                            ValueResult::Int8(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(2i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u8,
                                                )?;
                                            }
                                            ValueResult::Int16(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(3i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u16,
                                                )?;
                                            }
                                            ValueResult::Int32(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(4i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Int64(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(5i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i64(
                                                        wit_bindgen_wasmtime::rt::as_i64(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Uint8(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(6i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u8,
                                                )?;
                                            }
                                            ValueResult::Uint16(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(7i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u16,
                                                )?;
                                            }
                                            ValueResult::Uint32(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(8i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Uint64(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(9i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i64(
                                                        wit_bindgen_wasmtime::rt::as_i64(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Floating32(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(10i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_f32(e),
                                                )?;
                                            }
                                            ValueResult::Floating64(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(11i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_f64(e),
                                                )?;
                                            }
                                            ValueResult::Str(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(12i32) as u8,
                                                )?;
                                                let vec5 = e;
                                                let ptr5 = func_canonical_abi_realloc.call(
                                                    &mut caller,
                                                    (0, 0, 1, vec5.len() as i32),
                                                )?;
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store_many(ptr5, vec5.as_bytes())?;
                                                caller_memory.store(
                                                    base + 20,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        vec5.len() as i32
                                                    ),
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(ptr5),
                                                )?;
                                            }
                                            ValueResult::Bytes(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(13i32) as u8,
                                                )?;
                                                let vec6 = e;
                                                let ptr6 = func_canonical_abi_realloc.call(
                                                    &mut caller,
                                                    (0, 0, 1, (vec6.len() as i32) * 1),
                                                )?;
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store_many(ptr6, &vec6)?;
                                                caller_memory.store(
                                                    base + 20,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        vec6.len() as i32
                                                    ),
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(ptr6),
                                                )?;
                                            }
                                            ValueResult::Raw(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(14i32) as u8,
                                                )?;
                                                let vec7 = e;
                                                let ptr7 = func_canonical_abi_realloc.call(
                                                    &mut caller,
                                                    (0, 0, 1, (vec7.len() as i32) * 1),
                                                )?;
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store_many(ptr7, &vec7)?;
                                                caller_memory.store(
                                                    base + 20,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        vec7.len() as i32
                                                    ),
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(ptr7),
                                                )?;
                                            }
                                        };
                                    }
                                }
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory
                                    .store(arg2 + 40, wit_bindgen_wasmtime::rt::as_i32(len8))?;
                                caller_memory
                                    .store(arg2 + 36, wit_bindgen_wasmtime::rt::as_i32(result8))?;
                            }
                            None => {
                                let e = ();
                                {
                                    caller_memory.store(
                                        arg2 + 32,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                    }
                };
                Ok(())
            },
        )?;
        linker.func_wrap(
            "sql_v1_alpha1",
            "row::get-optional-int32",
            move |mut caller: wasmtime::Caller<'_, T>, arg0: i32, arg1: i32, arg2: i32| {
                let func = get_func(&mut caller, "canonical_abi_realloc")?;
                let func_canonical_abi_realloc =
                    func.typed::<(i32, i32, i32, i32), i32, _>(&caller)?;
                let memory = &get_memory(&mut caller, "memory")?;
                let host = get(caller.data_mut());
                let (host, _tables) = host;
                let param0 = _tables
                    .row_table
                    .get((arg0) as u32)
                    .ok_or_else(|| wasmtime::Trap::new("invalid handle index"))?;
                let param1 = arg1 as u32;
                let result = host.row_get_optional_int32(param0, param1);
                match result {
                    Ok(e) => {
                        let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                        let (_, _tables) = get(data);
                        caller_memory
                            .store(arg2 + 0, wit_bindgen_wasmtime::rt::as_i32(0i32) as u8)?;
                        match e {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg2 + 4,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                caller_memory.store(
                                    arg2 + 8,
                                    wit_bindgen_wasmtime::rt::as_i32(
                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                    ),
                                )?;
                            }
                            None => {
                                let e = ();
                                {
                                    caller_memory.store(
                                        arg2 + 4,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                    }
                    Err(e) => {
                        let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                        let (_, _tables) = get(data);
                        caller_memory
                            .store(arg2 + 0, wit_bindgen_wasmtime::rt::as_i32(1i32) as u8)?;
                        let SqlError {
                            code_numeric: code_numeric0,
                            code_text: code_text0,
                            message: message0,
                            extra: extra0,
                        } = e;
                        match code_numeric0 {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg2 + 4,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                caller_memory.store(
                                    arg2 + 8,
                                    wit_bindgen_wasmtime::rt::as_i32(
                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                    ),
                                )?;
                            }
                            None => {
                                let e = ();
                                {
                                    caller_memory.store(
                                        arg2 + 4,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                        match code_text0 {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg2 + 12,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                let vec1 = e;
                                let ptr1 = func_canonical_abi_realloc
                                    .call(&mut caller, (0, 0, 1, vec1.len() as i32))?;
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store_many(ptr1, vec1.as_bytes())?;
                                caller_memory.store(
                                    arg2 + 20,
                                    wit_bindgen_wasmtime::rt::as_i32(vec1.len() as i32),
                                )?;
                                caller_memory
                                    .store(arg2 + 16, wit_bindgen_wasmtime::rt::as_i32(ptr1))?;
                            }
                            None => {
                                let e = ();
                                {
                                    let (caller_memory, data) =
                                        memory.data_and_store_mut(&mut caller);
                                    let (_, _tables) = get(data);
                                    caller_memory.store(
                                        arg2 + 12,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                        let vec2 = message0;
                        let ptr2 = func_canonical_abi_realloc
                            .call(&mut caller, (0, 0, 1, vec2.len() as i32))?;
                        let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                        let (_, _tables) = get(data);
                        caller_memory.store_many(ptr2, vec2.as_bytes())?;
                        caller_memory.store(
                            arg2 + 28,
                            wit_bindgen_wasmtime::rt::as_i32(vec2.len() as i32),
                        )?;
                        caller_memory.store(arg2 + 24, wit_bindgen_wasmtime::rt::as_i32(ptr2))?;
                        match extra0 {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg2 + 32,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                let vec8 = e;
                                let len8 = vec8.len() as i32;
                                let result8 = func_canonical_abi_realloc
                                    .call(&mut caller, (0, 0, 8, len8 * 24))?;
                                for (i, e) in vec8.into_iter().enumerate() {
                                    let base = result8 + (i as i32) * 24;
                                    {
                                        let ValueMapItemResult {
                                            key: key3,
                                            value: value3,
                                        } = e;
                                        let vec4 = key3;
                                        let ptr4 = func_canonical_abi_realloc
                                            .call(&mut caller, (0, 0, 1, vec4.len() as i32))?;
                                        let (caller_memory, data) =
                                            memory.data_and_store_mut(&mut caller);
                                        let (_, _tables) = get(data);
                                        caller_memory.store_many(ptr4, vec4.as_bytes())?;
                                        caller_memory.store(
                                            base + 4,
                                            wit_bindgen_wasmtime::rt::as_i32(vec4.len() as i32),
                                        )?;
                                        caller_memory.store(
                                            base + 0,
                                            wit_bindgen_wasmtime::rt::as_i32(ptr4),
                                        )?;
                                        match value3 {
                                            ValueResult::Null => {
                                                let e = ();
                                                {
                                                    caller_memory.store(
                                                        base + 8,
                                                        wit_bindgen_wasmtime::rt::as_i32(0i32)
                                                            as u8,
                                                    )?;
                                                    let () = e;
                                                }
                                            }
                                            ValueResult::Boolean(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(match e {
                                                        true => 1,
                                                        false => 0,
                                                    })
                                                        as u8,
                                                )?;
                                            }
                                            ValueResult::Int8(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(2i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u8,
                                                )?;
                                            }
                                            ValueResult::Int16(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(3i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u16,
                                                )?;
                                            }
                                            ValueResult::Int32(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(4i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Int64(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(5i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i64(
                                                        wit_bindgen_wasmtime::rt::as_i64(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Uint8(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(6i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u8,
                                                )?;
                                            }
                                            ValueResult::Uint16(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(7i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u16,
                                                )?;
                                            }
                                            ValueResult::Uint32(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(8i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Uint64(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(9i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i64(
                                                        wit_bindgen_wasmtime::rt::as_i64(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Floating32(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(10i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_f32(e),
                                                )?;
                                            }
                                            ValueResult::Floating64(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(11i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_f64(e),
                                                )?;
                                            }
                                            ValueResult::Str(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(12i32) as u8,
                                                )?;
                                                let vec5 = e;
                                                let ptr5 = func_canonical_abi_realloc.call(
                                                    &mut caller,
                                                    (0, 0, 1, vec5.len() as i32),
                                                )?;
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store_many(ptr5, vec5.as_bytes())?;
                                                caller_memory.store(
                                                    base + 20,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        vec5.len() as i32
                                                    ),
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(ptr5),
                                                )?;
                                            }
                                            ValueResult::Bytes(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(13i32) as u8,
                                                )?;
                                                let vec6 = e;
                                                let ptr6 = func_canonical_abi_realloc.call(
                                                    &mut caller,
                                                    (0, 0, 1, (vec6.len() as i32) * 1),
                                                )?;
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store_many(ptr6, &vec6)?;
                                                caller_memory.store(
                                                    base + 20,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        vec6.len() as i32
                                                    ),
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(ptr6),
                                                )?;
                                            }
                                            ValueResult::Raw(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(14i32) as u8,
                                                )?;
                                                let vec7 = e;
                                                let ptr7 = func_canonical_abi_realloc.call(
                                                    &mut caller,
                                                    (0, 0, 1, (vec7.len() as i32) * 1),
                                                )?;
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store_many(ptr7, &vec7)?;
                                                caller_memory.store(
                                                    base + 20,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        vec7.len() as i32
                                                    ),
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(ptr7),
                                                )?;
                                            }
                                        };
                                    }
                                }
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory
                                    .store(arg2 + 40, wit_bindgen_wasmtime::rt::as_i32(len8))?;
                                caller_memory
                                    .store(arg2 + 36, wit_bindgen_wasmtime::rt::as_i32(result8))?;
                            }
                            None => {
                                let e = ();
                                {
                                    caller_memory.store(
                                        arg2 + 32,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                    }
                };
                Ok(())
            },
        )?;
        linker.func_wrap(
            "sql_v1_alpha1",
            "row::get-optional-int64",
            move |mut caller: wasmtime::Caller<'_, T>, arg0: i32, arg1: i64, arg2: i32| {
                let func = get_func(&mut caller, "canonical_abi_realloc")?;
                let func_canonical_abi_realloc =
                    func.typed::<(i32, i32, i32, i32), i32, _>(&caller)?;
                let memory = &get_memory(&mut caller, "memory")?;
                let host = get(caller.data_mut());
                let (host, _tables) = host;
                let param0 = _tables
                    .row_table
                    .get((arg0) as u32)
                    .ok_or_else(|| wasmtime::Trap::new("invalid handle index"))?;
                let param1 = arg1 as u64;
                let result = host.row_get_optional_int64(param0, param1);
                match result {
                    Ok(e) => {
                        let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                        let (_, _tables) = get(data);
                        caller_memory
                            .store(arg2 + 0, wit_bindgen_wasmtime::rt::as_i32(0i32) as u8)?;
                        match e {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg2 + 8,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                caller_memory.store(
                                    arg2 + 16,
                                    wit_bindgen_wasmtime::rt::as_i64(
                                        wit_bindgen_wasmtime::rt::as_i64(e),
                                    ),
                                )?;
                            }
                            None => {
                                let e = ();
                                {
                                    caller_memory.store(
                                        arg2 + 8,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                    }
                    Err(e) => {
                        let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                        let (_, _tables) = get(data);
                        caller_memory
                            .store(arg2 + 0, wit_bindgen_wasmtime::rt::as_i32(1i32) as u8)?;
                        let SqlError {
                            code_numeric: code_numeric0,
                            code_text: code_text0,
                            message: message0,
                            extra: extra0,
                        } = e;
                        match code_numeric0 {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg2 + 8,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                caller_memory.store(
                                    arg2 + 12,
                                    wit_bindgen_wasmtime::rt::as_i32(
                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                    ),
                                )?;
                            }
                            None => {
                                let e = ();
                                {
                                    caller_memory.store(
                                        arg2 + 8,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                        match code_text0 {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg2 + 16,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                let vec1 = e;
                                let ptr1 = func_canonical_abi_realloc
                                    .call(&mut caller, (0, 0, 1, vec1.len() as i32))?;
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store_many(ptr1, vec1.as_bytes())?;
                                caller_memory.store(
                                    arg2 + 24,
                                    wit_bindgen_wasmtime::rt::as_i32(vec1.len() as i32),
                                )?;
                                caller_memory
                                    .store(arg2 + 20, wit_bindgen_wasmtime::rt::as_i32(ptr1))?;
                            }
                            None => {
                                let e = ();
                                {
                                    let (caller_memory, data) =
                                        memory.data_and_store_mut(&mut caller);
                                    let (_, _tables) = get(data);
                                    caller_memory.store(
                                        arg2 + 16,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                        let vec2 = message0;
                        let ptr2 = func_canonical_abi_realloc
                            .call(&mut caller, (0, 0, 1, vec2.len() as i32))?;
                        let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                        let (_, _tables) = get(data);
                        caller_memory.store_many(ptr2, vec2.as_bytes())?;
                        caller_memory.store(
                            arg2 + 32,
                            wit_bindgen_wasmtime::rt::as_i32(vec2.len() as i32),
                        )?;
                        caller_memory.store(arg2 + 28, wit_bindgen_wasmtime::rt::as_i32(ptr2))?;
                        match extra0 {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg2 + 36,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                let vec8 = e;
                                let len8 = vec8.len() as i32;
                                let result8 = func_canonical_abi_realloc
                                    .call(&mut caller, (0, 0, 8, len8 * 24))?;
                                for (i, e) in vec8.into_iter().enumerate() {
                                    let base = result8 + (i as i32) * 24;
                                    {
                                        let ValueMapItemResult {
                                            key: key3,
                                            value: value3,
                                        } = e;
                                        let vec4 = key3;
                                        let ptr4 = func_canonical_abi_realloc
                                            .call(&mut caller, (0, 0, 1, vec4.len() as i32))?;
                                        let (caller_memory, data) =
                                            memory.data_and_store_mut(&mut caller);
                                        let (_, _tables) = get(data);
                                        caller_memory.store_many(ptr4, vec4.as_bytes())?;
                                        caller_memory.store(
                                            base + 4,
                                            wit_bindgen_wasmtime::rt::as_i32(vec4.len() as i32),
                                        )?;
                                        caller_memory.store(
                                            base + 0,
                                            wit_bindgen_wasmtime::rt::as_i32(ptr4),
                                        )?;
                                        match value3 {
                                            ValueResult::Null => {
                                                let e = ();
                                                {
                                                    caller_memory.store(
                                                        base + 8,
                                                        wit_bindgen_wasmtime::rt::as_i32(0i32)
                                                            as u8,
                                                    )?;
                                                    let () = e;
                                                }
                                            }
                                            ValueResult::Boolean(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(match e {
                                                        true => 1,
                                                        false => 0,
                                                    })
                                                        as u8,
                                                )?;
                                            }
                                            ValueResult::Int8(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(2i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u8,
                                                )?;
                                            }
                                            ValueResult::Int16(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(3i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u16,
                                                )?;
                                            }
                                            ValueResult::Int32(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(4i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Int64(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(5i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i64(
                                                        wit_bindgen_wasmtime::rt::as_i64(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Uint8(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(6i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u8,
                                                )?;
                                            }
                                            ValueResult::Uint16(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(7i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u16,
                                                )?;
                                            }
                                            ValueResult::Uint32(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(8i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Uint64(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(9i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i64(
                                                        wit_bindgen_wasmtime::rt::as_i64(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Floating32(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(10i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_f32(e),
                                                )?;
                                            }
                                            ValueResult::Floating64(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(11i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_f64(e),
                                                )?;
                                            }
                                            ValueResult::Str(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(12i32) as u8,
                                                )?;
                                                let vec5 = e;
                                                let ptr5 = func_canonical_abi_realloc.call(
                                                    &mut caller,
                                                    (0, 0, 1, vec5.len() as i32),
                                                )?;
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store_many(ptr5, vec5.as_bytes())?;
                                                caller_memory.store(
                                                    base + 20,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        vec5.len() as i32
                                                    ),
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(ptr5),
                                                )?;
                                            }
                                            ValueResult::Bytes(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(13i32) as u8,
                                                )?;
                                                let vec6 = e;
                                                let ptr6 = func_canonical_abi_realloc.call(
                                                    &mut caller,
                                                    (0, 0, 1, (vec6.len() as i32) * 1),
                                                )?;
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store_many(ptr6, &vec6)?;
                                                caller_memory.store(
                                                    base + 20,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        vec6.len() as i32
                                                    ),
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(ptr6),
                                                )?;
                                            }
                                            ValueResult::Raw(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(14i32) as u8,
                                                )?;
                                                let vec7 = e;
                                                let ptr7 = func_canonical_abi_realloc.call(
                                                    &mut caller,
                                                    (0, 0, 1, (vec7.len() as i32) * 1),
                                                )?;
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store_many(ptr7, &vec7)?;
                                                caller_memory.store(
                                                    base + 20,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        vec7.len() as i32
                                                    ),
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(ptr7),
                                                )?;
                                            }
                                        };
                                    }
                                }
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory
                                    .store(arg2 + 44, wit_bindgen_wasmtime::rt::as_i32(len8))?;
                                caller_memory
                                    .store(arg2 + 40, wit_bindgen_wasmtime::rt::as_i32(result8))?;
                            }
                            None => {
                                let e = ();
                                {
                                    caller_memory.store(
                                        arg2 + 36,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                    }
                };
                Ok(())
            },
        )?;
        linker.func_wrap(
            "sql_v1_alpha1",
            "row::get-optional-uint8",
            move |mut caller: wasmtime::Caller<'_, T>, arg0: i32, arg1: i32, arg2: i32| {
                let func = get_func(&mut caller, "canonical_abi_realloc")?;
                let func_canonical_abi_realloc =
                    func.typed::<(i32, i32, i32, i32), i32, _>(&caller)?;
                let memory = &get_memory(&mut caller, "memory")?;
                let host = get(caller.data_mut());
                let (host, _tables) = host;
                let param0 = _tables
                    .row_table
                    .get((arg0) as u32)
                    .ok_or_else(|| wasmtime::Trap::new("invalid handle index"))?;
                let param1 = arg1 as u32;
                let result = host.row_get_optional_uint8(param0, param1);
                match result {
                    Ok(e) => {
                        let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                        let (_, _tables) = get(data);
                        caller_memory
                            .store(arg2 + 0, wit_bindgen_wasmtime::rt::as_i32(0i32) as u8)?;
                        match e {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg2 + 4,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                caller_memory.store(
                                    arg2 + 5,
                                    wit_bindgen_wasmtime::rt::as_i32(
                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                    ) as u8,
                                )?;
                            }
                            None => {
                                let e = ();
                                {
                                    caller_memory.store(
                                        arg2 + 4,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                    }
                    Err(e) => {
                        let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                        let (_, _tables) = get(data);
                        caller_memory
                            .store(arg2 + 0, wit_bindgen_wasmtime::rt::as_i32(1i32) as u8)?;
                        let SqlError {
                            code_numeric: code_numeric0,
                            code_text: code_text0,
                            message: message0,
                            extra: extra0,
                        } = e;
                        match code_numeric0 {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg2 + 4,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                caller_memory.store(
                                    arg2 + 8,
                                    wit_bindgen_wasmtime::rt::as_i32(
                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                    ),
                                )?;
                            }
                            None => {
                                let e = ();
                                {
                                    caller_memory.store(
                                        arg2 + 4,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                        match code_text0 {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg2 + 12,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                let vec1 = e;
                                let ptr1 = func_canonical_abi_realloc
                                    .call(&mut caller, (0, 0, 1, vec1.len() as i32))?;
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store_many(ptr1, vec1.as_bytes())?;
                                caller_memory.store(
                                    arg2 + 20,
                                    wit_bindgen_wasmtime::rt::as_i32(vec1.len() as i32),
                                )?;
                                caller_memory
                                    .store(arg2 + 16, wit_bindgen_wasmtime::rt::as_i32(ptr1))?;
                            }
                            None => {
                                let e = ();
                                {
                                    let (caller_memory, data) =
                                        memory.data_and_store_mut(&mut caller);
                                    let (_, _tables) = get(data);
                                    caller_memory.store(
                                        arg2 + 12,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                        let vec2 = message0;
                        let ptr2 = func_canonical_abi_realloc
                            .call(&mut caller, (0, 0, 1, vec2.len() as i32))?;
                        let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                        let (_, _tables) = get(data);
                        caller_memory.store_many(ptr2, vec2.as_bytes())?;
                        caller_memory.store(
                            arg2 + 28,
                            wit_bindgen_wasmtime::rt::as_i32(vec2.len() as i32),
                        )?;
                        caller_memory.store(arg2 + 24, wit_bindgen_wasmtime::rt::as_i32(ptr2))?;
                        match extra0 {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg2 + 32,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                let vec8 = e;
                                let len8 = vec8.len() as i32;
                                let result8 = func_canonical_abi_realloc
                                    .call(&mut caller, (0, 0, 8, len8 * 24))?;
                                for (i, e) in vec8.into_iter().enumerate() {
                                    let base = result8 + (i as i32) * 24;
                                    {
                                        let ValueMapItemResult {
                                            key: key3,
                                            value: value3,
                                        } = e;
                                        let vec4 = key3;
                                        let ptr4 = func_canonical_abi_realloc
                                            .call(&mut caller, (0, 0, 1, vec4.len() as i32))?;
                                        let (caller_memory, data) =
                                            memory.data_and_store_mut(&mut caller);
                                        let (_, _tables) = get(data);
                                        caller_memory.store_many(ptr4, vec4.as_bytes())?;
                                        caller_memory.store(
                                            base + 4,
                                            wit_bindgen_wasmtime::rt::as_i32(vec4.len() as i32),
                                        )?;
                                        caller_memory.store(
                                            base + 0,
                                            wit_bindgen_wasmtime::rt::as_i32(ptr4),
                                        )?;
                                        match value3 {
                                            ValueResult::Null => {
                                                let e = ();
                                                {
                                                    caller_memory.store(
                                                        base + 8,
                                                        wit_bindgen_wasmtime::rt::as_i32(0i32)
                                                            as u8,
                                                    )?;
                                                    let () = e;
                                                }
                                            }
                                            ValueResult::Boolean(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(match e {
                                                        true => 1,
                                                        false => 0,
                                                    })
                                                        as u8,
                                                )?;
                                            }
                                            ValueResult::Int8(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(2i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u8,
                                                )?;
                                            }
                                            ValueResult::Int16(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(3i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u16,
                                                )?;
                                            }
                                            ValueResult::Int32(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(4i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Int64(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(5i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i64(
                                                        wit_bindgen_wasmtime::rt::as_i64(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Uint8(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(6i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u8,
                                                )?;
                                            }
                                            ValueResult::Uint16(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(7i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u16,
                                                )?;
                                            }
                                            ValueResult::Uint32(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(8i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Uint64(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(9i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i64(
                                                        wit_bindgen_wasmtime::rt::as_i64(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Floating32(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(10i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_f32(e),
                                                )?;
                                            }
                                            ValueResult::Floating64(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(11i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_f64(e),
                                                )?;
                                            }
                                            ValueResult::Str(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(12i32) as u8,
                                                )?;
                                                let vec5 = e;
                                                let ptr5 = func_canonical_abi_realloc.call(
                                                    &mut caller,
                                                    (0, 0, 1, vec5.len() as i32),
                                                )?;
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store_many(ptr5, vec5.as_bytes())?;
                                                caller_memory.store(
                                                    base + 20,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        vec5.len() as i32
                                                    ),
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(ptr5),
                                                )?;
                                            }
                                            ValueResult::Bytes(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(13i32) as u8,
                                                )?;
                                                let vec6 = e;
                                                let ptr6 = func_canonical_abi_realloc.call(
                                                    &mut caller,
                                                    (0, 0, 1, (vec6.len() as i32) * 1),
                                                )?;
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store_many(ptr6, &vec6)?;
                                                caller_memory.store(
                                                    base + 20,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        vec6.len() as i32
                                                    ),
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(ptr6),
                                                )?;
                                            }
                                            ValueResult::Raw(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(14i32) as u8,
                                                )?;
                                                let vec7 = e;
                                                let ptr7 = func_canonical_abi_realloc.call(
                                                    &mut caller,
                                                    (0, 0, 1, (vec7.len() as i32) * 1),
                                                )?;
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store_many(ptr7, &vec7)?;
                                                caller_memory.store(
                                                    base + 20,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        vec7.len() as i32
                                                    ),
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(ptr7),
                                                )?;
                                            }
                                        };
                                    }
                                }
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory
                                    .store(arg2 + 40, wit_bindgen_wasmtime::rt::as_i32(len8))?;
                                caller_memory
                                    .store(arg2 + 36, wit_bindgen_wasmtime::rt::as_i32(result8))?;
                            }
                            None => {
                                let e = ();
                                {
                                    caller_memory.store(
                                        arg2 + 32,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                    }
                };
                Ok(())
            },
        )?;
        linker.func_wrap(
            "sql_v1_alpha1",
            "row::get-optional-uint16",
            move |mut caller: wasmtime::Caller<'_, T>, arg0: i32, arg1: i32, arg2: i32| {
                let func = get_func(&mut caller, "canonical_abi_realloc")?;
                let func_canonical_abi_realloc =
                    func.typed::<(i32, i32, i32, i32), i32, _>(&caller)?;
                let memory = &get_memory(&mut caller, "memory")?;
                let host = get(caller.data_mut());
                let (host, _tables) = host;
                let param0 = _tables
                    .row_table
                    .get((arg0) as u32)
                    .ok_or_else(|| wasmtime::Trap::new("invalid handle index"))?;
                let param1 = arg1 as u32;
                let result = host.row_get_optional_uint16(param0, param1);
                match result {
                    Ok(e) => {
                        let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                        let (_, _tables) = get(data);
                        caller_memory
                            .store(arg2 + 0, wit_bindgen_wasmtime::rt::as_i32(0i32) as u8)?;
                        match e {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg2 + 4,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                caller_memory.store(
                                    arg2 + 6,
                                    wit_bindgen_wasmtime::rt::as_i32(
                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                    ) as u16,
                                )?;
                            }
                            None => {
                                let e = ();
                                {
                                    caller_memory.store(
                                        arg2 + 4,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                    }
                    Err(e) => {
                        let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                        let (_, _tables) = get(data);
                        caller_memory
                            .store(arg2 + 0, wit_bindgen_wasmtime::rt::as_i32(1i32) as u8)?;
                        let SqlError {
                            code_numeric: code_numeric0,
                            code_text: code_text0,
                            message: message0,
                            extra: extra0,
                        } = e;
                        match code_numeric0 {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg2 + 4,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                caller_memory.store(
                                    arg2 + 8,
                                    wit_bindgen_wasmtime::rt::as_i32(
                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                    ),
                                )?;
                            }
                            None => {
                                let e = ();
                                {
                                    caller_memory.store(
                                        arg2 + 4,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                        match code_text0 {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg2 + 12,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                let vec1 = e;
                                let ptr1 = func_canonical_abi_realloc
                                    .call(&mut caller, (0, 0, 1, vec1.len() as i32))?;
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store_many(ptr1, vec1.as_bytes())?;
                                caller_memory.store(
                                    arg2 + 20,
                                    wit_bindgen_wasmtime::rt::as_i32(vec1.len() as i32),
                                )?;
                                caller_memory
                                    .store(arg2 + 16, wit_bindgen_wasmtime::rt::as_i32(ptr1))?;
                            }
                            None => {
                                let e = ();
                                {
                                    let (caller_memory, data) =
                                        memory.data_and_store_mut(&mut caller);
                                    let (_, _tables) = get(data);
                                    caller_memory.store(
                                        arg2 + 12,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                        let vec2 = message0;
                        let ptr2 = func_canonical_abi_realloc
                            .call(&mut caller, (0, 0, 1, vec2.len() as i32))?;
                        let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                        let (_, _tables) = get(data);
                        caller_memory.store_many(ptr2, vec2.as_bytes())?;
                        caller_memory.store(
                            arg2 + 28,
                            wit_bindgen_wasmtime::rt::as_i32(vec2.len() as i32),
                        )?;
                        caller_memory.store(arg2 + 24, wit_bindgen_wasmtime::rt::as_i32(ptr2))?;
                        match extra0 {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg2 + 32,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                let vec8 = e;
                                let len8 = vec8.len() as i32;
                                let result8 = func_canonical_abi_realloc
                                    .call(&mut caller, (0, 0, 8, len8 * 24))?;
                                for (i, e) in vec8.into_iter().enumerate() {
                                    let base = result8 + (i as i32) * 24;
                                    {
                                        let ValueMapItemResult {
                                            key: key3,
                                            value: value3,
                                        } = e;
                                        let vec4 = key3;
                                        let ptr4 = func_canonical_abi_realloc
                                            .call(&mut caller, (0, 0, 1, vec4.len() as i32))?;
                                        let (caller_memory, data) =
                                            memory.data_and_store_mut(&mut caller);
                                        let (_, _tables) = get(data);
                                        caller_memory.store_many(ptr4, vec4.as_bytes())?;
                                        caller_memory.store(
                                            base + 4,
                                            wit_bindgen_wasmtime::rt::as_i32(vec4.len() as i32),
                                        )?;
                                        caller_memory.store(
                                            base + 0,
                                            wit_bindgen_wasmtime::rt::as_i32(ptr4),
                                        )?;
                                        match value3 {
                                            ValueResult::Null => {
                                                let e = ();
                                                {
                                                    caller_memory.store(
                                                        base + 8,
                                                        wit_bindgen_wasmtime::rt::as_i32(0i32)
                                                            as u8,
                                                    )?;
                                                    let () = e;
                                                }
                                            }
                                            ValueResult::Boolean(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(match e {
                                                        true => 1,
                                                        false => 0,
                                                    })
                                                        as u8,
                                                )?;
                                            }
                                            ValueResult::Int8(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(2i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u8,
                                                )?;
                                            }
                                            ValueResult::Int16(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(3i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u16,
                                                )?;
                                            }
                                            ValueResult::Int32(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(4i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Int64(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(5i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i64(
                                                        wit_bindgen_wasmtime::rt::as_i64(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Uint8(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(6i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u8,
                                                )?;
                                            }
                                            ValueResult::Uint16(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(7i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u16,
                                                )?;
                                            }
                                            ValueResult::Uint32(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(8i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Uint64(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(9i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i64(
                                                        wit_bindgen_wasmtime::rt::as_i64(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Floating32(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(10i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_f32(e),
                                                )?;
                                            }
                                            ValueResult::Floating64(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(11i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_f64(e),
                                                )?;
                                            }
                                            ValueResult::Str(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(12i32) as u8,
                                                )?;
                                                let vec5 = e;
                                                let ptr5 = func_canonical_abi_realloc.call(
                                                    &mut caller,
                                                    (0, 0, 1, vec5.len() as i32),
                                                )?;
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store_many(ptr5, vec5.as_bytes())?;
                                                caller_memory.store(
                                                    base + 20,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        vec5.len() as i32
                                                    ),
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(ptr5),
                                                )?;
                                            }
                                            ValueResult::Bytes(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(13i32) as u8,
                                                )?;
                                                let vec6 = e;
                                                let ptr6 = func_canonical_abi_realloc.call(
                                                    &mut caller,
                                                    (0, 0, 1, (vec6.len() as i32) * 1),
                                                )?;
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store_many(ptr6, &vec6)?;
                                                caller_memory.store(
                                                    base + 20,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        vec6.len() as i32
                                                    ),
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(ptr6),
                                                )?;
                                            }
                                            ValueResult::Raw(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(14i32) as u8,
                                                )?;
                                                let vec7 = e;
                                                let ptr7 = func_canonical_abi_realloc.call(
                                                    &mut caller,
                                                    (0, 0, 1, (vec7.len() as i32) * 1),
                                                )?;
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store_many(ptr7, &vec7)?;
                                                caller_memory.store(
                                                    base + 20,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        vec7.len() as i32
                                                    ),
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(ptr7),
                                                )?;
                                            }
                                        };
                                    }
                                }
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory
                                    .store(arg2 + 40, wit_bindgen_wasmtime::rt::as_i32(len8))?;
                                caller_memory
                                    .store(arg2 + 36, wit_bindgen_wasmtime::rt::as_i32(result8))?;
                            }
                            None => {
                                let e = ();
                                {
                                    caller_memory.store(
                                        arg2 + 32,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                    }
                };
                Ok(())
            },
        )?;
        linker.func_wrap(
            "sql_v1_alpha1",
            "row::get-optional-uint32",
            move |mut caller: wasmtime::Caller<'_, T>, arg0: i32, arg1: i32, arg2: i32| {
                let func = get_func(&mut caller, "canonical_abi_realloc")?;
                let func_canonical_abi_realloc =
                    func.typed::<(i32, i32, i32, i32), i32, _>(&caller)?;
                let memory = &get_memory(&mut caller, "memory")?;
                let host = get(caller.data_mut());
                let (host, _tables) = host;
                let param0 = _tables
                    .row_table
                    .get((arg0) as u32)
                    .ok_or_else(|| wasmtime::Trap::new("invalid handle index"))?;
                let param1 = arg1 as u32;
                let result = host.row_get_optional_uint32(param0, param1);
                match result {
                    Ok(e) => {
                        let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                        let (_, _tables) = get(data);
                        caller_memory
                            .store(arg2 + 0, wit_bindgen_wasmtime::rt::as_i32(0i32) as u8)?;
                        match e {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg2 + 4,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                caller_memory.store(
                                    arg2 + 8,
                                    wit_bindgen_wasmtime::rt::as_i32(
                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                    ),
                                )?;
                            }
                            None => {
                                let e = ();
                                {
                                    caller_memory.store(
                                        arg2 + 4,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                    }
                    Err(e) => {
                        let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                        let (_, _tables) = get(data);
                        caller_memory
                            .store(arg2 + 0, wit_bindgen_wasmtime::rt::as_i32(1i32) as u8)?;
                        let SqlError {
                            code_numeric: code_numeric0,
                            code_text: code_text0,
                            message: message0,
                            extra: extra0,
                        } = e;
                        match code_numeric0 {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg2 + 4,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                caller_memory.store(
                                    arg2 + 8,
                                    wit_bindgen_wasmtime::rt::as_i32(
                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                    ),
                                )?;
                            }
                            None => {
                                let e = ();
                                {
                                    caller_memory.store(
                                        arg2 + 4,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                        match code_text0 {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg2 + 12,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                let vec1 = e;
                                let ptr1 = func_canonical_abi_realloc
                                    .call(&mut caller, (0, 0, 1, vec1.len() as i32))?;
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store_many(ptr1, vec1.as_bytes())?;
                                caller_memory.store(
                                    arg2 + 20,
                                    wit_bindgen_wasmtime::rt::as_i32(vec1.len() as i32),
                                )?;
                                caller_memory
                                    .store(arg2 + 16, wit_bindgen_wasmtime::rt::as_i32(ptr1))?;
                            }
                            None => {
                                let e = ();
                                {
                                    let (caller_memory, data) =
                                        memory.data_and_store_mut(&mut caller);
                                    let (_, _tables) = get(data);
                                    caller_memory.store(
                                        arg2 + 12,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                        let vec2 = message0;
                        let ptr2 = func_canonical_abi_realloc
                            .call(&mut caller, (0, 0, 1, vec2.len() as i32))?;
                        let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                        let (_, _tables) = get(data);
                        caller_memory.store_many(ptr2, vec2.as_bytes())?;
                        caller_memory.store(
                            arg2 + 28,
                            wit_bindgen_wasmtime::rt::as_i32(vec2.len() as i32),
                        )?;
                        caller_memory.store(arg2 + 24, wit_bindgen_wasmtime::rt::as_i32(ptr2))?;
                        match extra0 {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg2 + 32,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                let vec8 = e;
                                let len8 = vec8.len() as i32;
                                let result8 = func_canonical_abi_realloc
                                    .call(&mut caller, (0, 0, 8, len8 * 24))?;
                                for (i, e) in vec8.into_iter().enumerate() {
                                    let base = result8 + (i as i32) * 24;
                                    {
                                        let ValueMapItemResult {
                                            key: key3,
                                            value: value3,
                                        } = e;
                                        let vec4 = key3;
                                        let ptr4 = func_canonical_abi_realloc
                                            .call(&mut caller, (0, 0, 1, vec4.len() as i32))?;
                                        let (caller_memory, data) =
                                            memory.data_and_store_mut(&mut caller);
                                        let (_, _tables) = get(data);
                                        caller_memory.store_many(ptr4, vec4.as_bytes())?;
                                        caller_memory.store(
                                            base + 4,
                                            wit_bindgen_wasmtime::rt::as_i32(vec4.len() as i32),
                                        )?;
                                        caller_memory.store(
                                            base + 0,
                                            wit_bindgen_wasmtime::rt::as_i32(ptr4),
                                        )?;
                                        match value3 {
                                            ValueResult::Null => {
                                                let e = ();
                                                {
                                                    caller_memory.store(
                                                        base + 8,
                                                        wit_bindgen_wasmtime::rt::as_i32(0i32)
                                                            as u8,
                                                    )?;
                                                    let () = e;
                                                }
                                            }
                                            ValueResult::Boolean(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(match e {
                                                        true => 1,
                                                        false => 0,
                                                    })
                                                        as u8,
                                                )?;
                                            }
                                            ValueResult::Int8(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(2i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u8,
                                                )?;
                                            }
                                            ValueResult::Int16(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(3i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u16,
                                                )?;
                                            }
                                            ValueResult::Int32(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(4i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Int64(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(5i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i64(
                                                        wit_bindgen_wasmtime::rt::as_i64(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Uint8(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(6i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u8,
                                                )?;
                                            }
                                            ValueResult::Uint16(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(7i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u16,
                                                )?;
                                            }
                                            ValueResult::Uint32(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(8i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Uint64(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(9i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i64(
                                                        wit_bindgen_wasmtime::rt::as_i64(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Floating32(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(10i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_f32(e),
                                                )?;
                                            }
                                            ValueResult::Floating64(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(11i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_f64(e),
                                                )?;
                                            }
                                            ValueResult::Str(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(12i32) as u8,
                                                )?;
                                                let vec5 = e;
                                                let ptr5 = func_canonical_abi_realloc.call(
                                                    &mut caller,
                                                    (0, 0, 1, vec5.len() as i32),
                                                )?;
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store_many(ptr5, vec5.as_bytes())?;
                                                caller_memory.store(
                                                    base + 20,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        vec5.len() as i32
                                                    ),
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(ptr5),
                                                )?;
                                            }
                                            ValueResult::Bytes(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(13i32) as u8,
                                                )?;
                                                let vec6 = e;
                                                let ptr6 = func_canonical_abi_realloc.call(
                                                    &mut caller,
                                                    (0, 0, 1, (vec6.len() as i32) * 1),
                                                )?;
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store_many(ptr6, &vec6)?;
                                                caller_memory.store(
                                                    base + 20,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        vec6.len() as i32
                                                    ),
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(ptr6),
                                                )?;
                                            }
                                            ValueResult::Raw(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(14i32) as u8,
                                                )?;
                                                let vec7 = e;
                                                let ptr7 = func_canonical_abi_realloc.call(
                                                    &mut caller,
                                                    (0, 0, 1, (vec7.len() as i32) * 1),
                                                )?;
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store_many(ptr7, &vec7)?;
                                                caller_memory.store(
                                                    base + 20,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        vec7.len() as i32
                                                    ),
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(ptr7),
                                                )?;
                                            }
                                        };
                                    }
                                }
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory
                                    .store(arg2 + 40, wit_bindgen_wasmtime::rt::as_i32(len8))?;
                                caller_memory
                                    .store(arg2 + 36, wit_bindgen_wasmtime::rt::as_i32(result8))?;
                            }
                            None => {
                                let e = ();
                                {
                                    caller_memory.store(
                                        arg2 + 32,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                    }
                };
                Ok(())
            },
        )?;
        linker.func_wrap(
            "sql_v1_alpha1",
            "row::get-optional-uint64",
            move |mut caller: wasmtime::Caller<'_, T>, arg0: i32, arg1: i64, arg2: i32| {
                let func = get_func(&mut caller, "canonical_abi_realloc")?;
                let func_canonical_abi_realloc =
                    func.typed::<(i32, i32, i32, i32), i32, _>(&caller)?;
                let memory = &get_memory(&mut caller, "memory")?;
                let host = get(caller.data_mut());
                let (host, _tables) = host;
                let param0 = _tables
                    .row_table
                    .get((arg0) as u32)
                    .ok_or_else(|| wasmtime::Trap::new("invalid handle index"))?;
                let param1 = arg1 as u64;
                let result = host.row_get_optional_uint64(param0, param1);
                match result {
                    Ok(e) => {
                        let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                        let (_, _tables) = get(data);
                        caller_memory
                            .store(arg2 + 0, wit_bindgen_wasmtime::rt::as_i32(0i32) as u8)?;
                        match e {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg2 + 8,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                caller_memory.store(
                                    arg2 + 16,
                                    wit_bindgen_wasmtime::rt::as_i64(
                                        wit_bindgen_wasmtime::rt::as_i64(e),
                                    ),
                                )?;
                            }
                            None => {
                                let e = ();
                                {
                                    caller_memory.store(
                                        arg2 + 8,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                    }
                    Err(e) => {
                        let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                        let (_, _tables) = get(data);
                        caller_memory
                            .store(arg2 + 0, wit_bindgen_wasmtime::rt::as_i32(1i32) as u8)?;
                        let SqlError {
                            code_numeric: code_numeric0,
                            code_text: code_text0,
                            message: message0,
                            extra: extra0,
                        } = e;
                        match code_numeric0 {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg2 + 8,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                caller_memory.store(
                                    arg2 + 12,
                                    wit_bindgen_wasmtime::rt::as_i32(
                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                    ),
                                )?;
                            }
                            None => {
                                let e = ();
                                {
                                    caller_memory.store(
                                        arg2 + 8,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                        match code_text0 {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg2 + 16,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                let vec1 = e;
                                let ptr1 = func_canonical_abi_realloc
                                    .call(&mut caller, (0, 0, 1, vec1.len() as i32))?;
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store_many(ptr1, vec1.as_bytes())?;
                                caller_memory.store(
                                    arg2 + 24,
                                    wit_bindgen_wasmtime::rt::as_i32(vec1.len() as i32),
                                )?;
                                caller_memory
                                    .store(arg2 + 20, wit_bindgen_wasmtime::rt::as_i32(ptr1))?;
                            }
                            None => {
                                let e = ();
                                {
                                    let (caller_memory, data) =
                                        memory.data_and_store_mut(&mut caller);
                                    let (_, _tables) = get(data);
                                    caller_memory.store(
                                        arg2 + 16,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                        let vec2 = message0;
                        let ptr2 = func_canonical_abi_realloc
                            .call(&mut caller, (0, 0, 1, vec2.len() as i32))?;
                        let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                        let (_, _tables) = get(data);
                        caller_memory.store_many(ptr2, vec2.as_bytes())?;
                        caller_memory.store(
                            arg2 + 32,
                            wit_bindgen_wasmtime::rt::as_i32(vec2.len() as i32),
                        )?;
                        caller_memory.store(arg2 + 28, wit_bindgen_wasmtime::rt::as_i32(ptr2))?;
                        match extra0 {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg2 + 36,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                let vec8 = e;
                                let len8 = vec8.len() as i32;
                                let result8 = func_canonical_abi_realloc
                                    .call(&mut caller, (0, 0, 8, len8 * 24))?;
                                for (i, e) in vec8.into_iter().enumerate() {
                                    let base = result8 + (i as i32) * 24;
                                    {
                                        let ValueMapItemResult {
                                            key: key3,
                                            value: value3,
                                        } = e;
                                        let vec4 = key3;
                                        let ptr4 = func_canonical_abi_realloc
                                            .call(&mut caller, (0, 0, 1, vec4.len() as i32))?;
                                        let (caller_memory, data) =
                                            memory.data_and_store_mut(&mut caller);
                                        let (_, _tables) = get(data);
                                        caller_memory.store_many(ptr4, vec4.as_bytes())?;
                                        caller_memory.store(
                                            base + 4,
                                            wit_bindgen_wasmtime::rt::as_i32(vec4.len() as i32),
                                        )?;
                                        caller_memory.store(
                                            base + 0,
                                            wit_bindgen_wasmtime::rt::as_i32(ptr4),
                                        )?;
                                        match value3 {
                                            ValueResult::Null => {
                                                let e = ();
                                                {
                                                    caller_memory.store(
                                                        base + 8,
                                                        wit_bindgen_wasmtime::rt::as_i32(0i32)
                                                            as u8,
                                                    )?;
                                                    let () = e;
                                                }
                                            }
                                            ValueResult::Boolean(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(match e {
                                                        true => 1,
                                                        false => 0,
                                                    })
                                                        as u8,
                                                )?;
                                            }
                                            ValueResult::Int8(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(2i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u8,
                                                )?;
                                            }
                                            ValueResult::Int16(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(3i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u16,
                                                )?;
                                            }
                                            ValueResult::Int32(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(4i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Int64(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(5i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i64(
                                                        wit_bindgen_wasmtime::rt::as_i64(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Uint8(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(6i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u8,
                                                )?;
                                            }
                                            ValueResult::Uint16(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(7i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u16,
                                                )?;
                                            }
                                            ValueResult::Uint32(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(8i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Uint64(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(9i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i64(
                                                        wit_bindgen_wasmtime::rt::as_i64(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Floating32(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(10i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_f32(e),
                                                )?;
                                            }
                                            ValueResult::Floating64(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(11i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_f64(e),
                                                )?;
                                            }
                                            ValueResult::Str(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(12i32) as u8,
                                                )?;
                                                let vec5 = e;
                                                let ptr5 = func_canonical_abi_realloc.call(
                                                    &mut caller,
                                                    (0, 0, 1, vec5.len() as i32),
                                                )?;
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store_many(ptr5, vec5.as_bytes())?;
                                                caller_memory.store(
                                                    base + 20,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        vec5.len() as i32
                                                    ),
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(ptr5),
                                                )?;
                                            }
                                            ValueResult::Bytes(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(13i32) as u8,
                                                )?;
                                                let vec6 = e;
                                                let ptr6 = func_canonical_abi_realloc.call(
                                                    &mut caller,
                                                    (0, 0, 1, (vec6.len() as i32) * 1),
                                                )?;
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store_many(ptr6, &vec6)?;
                                                caller_memory.store(
                                                    base + 20,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        vec6.len() as i32
                                                    ),
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(ptr6),
                                                )?;
                                            }
                                            ValueResult::Raw(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(14i32) as u8,
                                                )?;
                                                let vec7 = e;
                                                let ptr7 = func_canonical_abi_realloc.call(
                                                    &mut caller,
                                                    (0, 0, 1, (vec7.len() as i32) * 1),
                                                )?;
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store_many(ptr7, &vec7)?;
                                                caller_memory.store(
                                                    base + 20,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        vec7.len() as i32
                                                    ),
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(ptr7),
                                                )?;
                                            }
                                        };
                                    }
                                }
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory
                                    .store(arg2 + 44, wit_bindgen_wasmtime::rt::as_i32(len8))?;
                                caller_memory
                                    .store(arg2 + 40, wit_bindgen_wasmtime::rt::as_i32(result8))?;
                            }
                            None => {
                                let e = ();
                                {
                                    caller_memory.store(
                                        arg2 + 36,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                    }
                };
                Ok(())
            },
        )?;
        linker.func_wrap(
            "sql_v1_alpha1",
            "row::get-optional-float32",
            move |mut caller: wasmtime::Caller<'_, T>, arg0: i32, arg1: i32, arg2: i32| {
                let func = get_func(&mut caller, "canonical_abi_realloc")?;
                let func_canonical_abi_realloc =
                    func.typed::<(i32, i32, i32, i32), i32, _>(&caller)?;
                let memory = &get_memory(&mut caller, "memory")?;
                let host = get(caller.data_mut());
                let (host, _tables) = host;
                let param0 = _tables
                    .row_table
                    .get((arg0) as u32)
                    .ok_or_else(|| wasmtime::Trap::new("invalid handle index"))?;
                let param1 = arg1 as u32;
                let result = host.row_get_optional_float32(param0, param1);
                match result {
                    Ok(e) => {
                        let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                        let (_, _tables) = get(data);
                        caller_memory
                            .store(arg2 + 0, wit_bindgen_wasmtime::rt::as_i32(0i32) as u8)?;
                        match e {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg2 + 4,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                caller_memory
                                    .store(arg2 + 8, wit_bindgen_wasmtime::rt::as_f32(e))?;
                            }
                            None => {
                                let e = ();
                                {
                                    caller_memory.store(
                                        arg2 + 4,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                    }
                    Err(e) => {
                        let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                        let (_, _tables) = get(data);
                        caller_memory
                            .store(arg2 + 0, wit_bindgen_wasmtime::rt::as_i32(1i32) as u8)?;
                        let SqlError {
                            code_numeric: code_numeric0,
                            code_text: code_text0,
                            message: message0,
                            extra: extra0,
                        } = e;
                        match code_numeric0 {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg2 + 4,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                caller_memory.store(
                                    arg2 + 8,
                                    wit_bindgen_wasmtime::rt::as_i32(
                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                    ),
                                )?;
                            }
                            None => {
                                let e = ();
                                {
                                    caller_memory.store(
                                        arg2 + 4,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                        match code_text0 {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg2 + 12,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                let vec1 = e;
                                let ptr1 = func_canonical_abi_realloc
                                    .call(&mut caller, (0, 0, 1, vec1.len() as i32))?;
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store_many(ptr1, vec1.as_bytes())?;
                                caller_memory.store(
                                    arg2 + 20,
                                    wit_bindgen_wasmtime::rt::as_i32(vec1.len() as i32),
                                )?;
                                caller_memory
                                    .store(arg2 + 16, wit_bindgen_wasmtime::rt::as_i32(ptr1))?;
                            }
                            None => {
                                let e = ();
                                {
                                    let (caller_memory, data) =
                                        memory.data_and_store_mut(&mut caller);
                                    let (_, _tables) = get(data);
                                    caller_memory.store(
                                        arg2 + 12,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                        let vec2 = message0;
                        let ptr2 = func_canonical_abi_realloc
                            .call(&mut caller, (0, 0, 1, vec2.len() as i32))?;
                        let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                        let (_, _tables) = get(data);
                        caller_memory.store_many(ptr2, vec2.as_bytes())?;
                        caller_memory.store(
                            arg2 + 28,
                            wit_bindgen_wasmtime::rt::as_i32(vec2.len() as i32),
                        )?;
                        caller_memory.store(arg2 + 24, wit_bindgen_wasmtime::rt::as_i32(ptr2))?;
                        match extra0 {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg2 + 32,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                let vec8 = e;
                                let len8 = vec8.len() as i32;
                                let result8 = func_canonical_abi_realloc
                                    .call(&mut caller, (0, 0, 8, len8 * 24))?;
                                for (i, e) in vec8.into_iter().enumerate() {
                                    let base = result8 + (i as i32) * 24;
                                    {
                                        let ValueMapItemResult {
                                            key: key3,
                                            value: value3,
                                        } = e;
                                        let vec4 = key3;
                                        let ptr4 = func_canonical_abi_realloc
                                            .call(&mut caller, (0, 0, 1, vec4.len() as i32))?;
                                        let (caller_memory, data) =
                                            memory.data_and_store_mut(&mut caller);
                                        let (_, _tables) = get(data);
                                        caller_memory.store_many(ptr4, vec4.as_bytes())?;
                                        caller_memory.store(
                                            base + 4,
                                            wit_bindgen_wasmtime::rt::as_i32(vec4.len() as i32),
                                        )?;
                                        caller_memory.store(
                                            base + 0,
                                            wit_bindgen_wasmtime::rt::as_i32(ptr4),
                                        )?;
                                        match value3 {
                                            ValueResult::Null => {
                                                let e = ();
                                                {
                                                    caller_memory.store(
                                                        base + 8,
                                                        wit_bindgen_wasmtime::rt::as_i32(0i32)
                                                            as u8,
                                                    )?;
                                                    let () = e;
                                                }
                                            }
                                            ValueResult::Boolean(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(match e {
                                                        true => 1,
                                                        false => 0,
                                                    })
                                                        as u8,
                                                )?;
                                            }
                                            ValueResult::Int8(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(2i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u8,
                                                )?;
                                            }
                                            ValueResult::Int16(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(3i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u16,
                                                )?;
                                            }
                                            ValueResult::Int32(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(4i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Int64(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(5i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i64(
                                                        wit_bindgen_wasmtime::rt::as_i64(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Uint8(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(6i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u8,
                                                )?;
                                            }
                                            ValueResult::Uint16(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(7i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u16,
                                                )?;
                                            }
                                            ValueResult::Uint32(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(8i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Uint64(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(9i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i64(
                                                        wit_bindgen_wasmtime::rt::as_i64(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Floating32(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(10i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_f32(e),
                                                )?;
                                            }
                                            ValueResult::Floating64(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(11i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_f64(e),
                                                )?;
                                            }
                                            ValueResult::Str(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(12i32) as u8,
                                                )?;
                                                let vec5 = e;
                                                let ptr5 = func_canonical_abi_realloc.call(
                                                    &mut caller,
                                                    (0, 0, 1, vec5.len() as i32),
                                                )?;
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store_many(ptr5, vec5.as_bytes())?;
                                                caller_memory.store(
                                                    base + 20,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        vec5.len() as i32
                                                    ),
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(ptr5),
                                                )?;
                                            }
                                            ValueResult::Bytes(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(13i32) as u8,
                                                )?;
                                                let vec6 = e;
                                                let ptr6 = func_canonical_abi_realloc.call(
                                                    &mut caller,
                                                    (0, 0, 1, (vec6.len() as i32) * 1),
                                                )?;
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store_many(ptr6, &vec6)?;
                                                caller_memory.store(
                                                    base + 20,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        vec6.len() as i32
                                                    ),
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(ptr6),
                                                )?;
                                            }
                                            ValueResult::Raw(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(14i32) as u8,
                                                )?;
                                                let vec7 = e;
                                                let ptr7 = func_canonical_abi_realloc.call(
                                                    &mut caller,
                                                    (0, 0, 1, (vec7.len() as i32) * 1),
                                                )?;
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store_many(ptr7, &vec7)?;
                                                caller_memory.store(
                                                    base + 20,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        vec7.len() as i32
                                                    ),
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(ptr7),
                                                )?;
                                            }
                                        };
                                    }
                                }
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory
                                    .store(arg2 + 40, wit_bindgen_wasmtime::rt::as_i32(len8))?;
                                caller_memory
                                    .store(arg2 + 36, wit_bindgen_wasmtime::rt::as_i32(result8))?;
                            }
                            None => {
                                let e = ();
                                {
                                    caller_memory.store(
                                        arg2 + 32,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                    }
                };
                Ok(())
            },
        )?;
        linker.func_wrap(
            "sql_v1_alpha1",
            "row::get-optional-float64",
            move |mut caller: wasmtime::Caller<'_, T>, arg0: i32, arg1: i32, arg2: i32| {
                let func = get_func(&mut caller, "canonical_abi_realloc")?;
                let func_canonical_abi_realloc =
                    func.typed::<(i32, i32, i32, i32), i32, _>(&caller)?;
                let memory = &get_memory(&mut caller, "memory")?;
                let host = get(caller.data_mut());
                let (host, _tables) = host;
                let param0 = _tables
                    .row_table
                    .get((arg0) as u32)
                    .ok_or_else(|| wasmtime::Trap::new("invalid handle index"))?;
                let param1 = arg1 as u32;
                let result = host.row_get_optional_float64(param0, param1);
                match result {
                    Ok(e) => {
                        let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                        let (_, _tables) = get(data);
                        caller_memory
                            .store(arg2 + 0, wit_bindgen_wasmtime::rt::as_i32(0i32) as u8)?;
                        match e {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg2 + 8,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                caller_memory
                                    .store(arg2 + 16, wit_bindgen_wasmtime::rt::as_f64(e))?;
                            }
                            None => {
                                let e = ();
                                {
                                    caller_memory.store(
                                        arg2 + 8,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                    }
                    Err(e) => {
                        let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                        let (_, _tables) = get(data);
                        caller_memory
                            .store(arg2 + 0, wit_bindgen_wasmtime::rt::as_i32(1i32) as u8)?;
                        let SqlError {
                            code_numeric: code_numeric0,
                            code_text: code_text0,
                            message: message0,
                            extra: extra0,
                        } = e;
                        match code_numeric0 {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg2 + 8,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                caller_memory.store(
                                    arg2 + 12,
                                    wit_bindgen_wasmtime::rt::as_i32(
                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                    ),
                                )?;
                            }
                            None => {
                                let e = ();
                                {
                                    caller_memory.store(
                                        arg2 + 8,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                        match code_text0 {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg2 + 16,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                let vec1 = e;
                                let ptr1 = func_canonical_abi_realloc
                                    .call(&mut caller, (0, 0, 1, vec1.len() as i32))?;
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store_many(ptr1, vec1.as_bytes())?;
                                caller_memory.store(
                                    arg2 + 24,
                                    wit_bindgen_wasmtime::rt::as_i32(vec1.len() as i32),
                                )?;
                                caller_memory
                                    .store(arg2 + 20, wit_bindgen_wasmtime::rt::as_i32(ptr1))?;
                            }
                            None => {
                                let e = ();
                                {
                                    let (caller_memory, data) =
                                        memory.data_and_store_mut(&mut caller);
                                    let (_, _tables) = get(data);
                                    caller_memory.store(
                                        arg2 + 16,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                        let vec2 = message0;
                        let ptr2 = func_canonical_abi_realloc
                            .call(&mut caller, (0, 0, 1, vec2.len() as i32))?;
                        let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                        let (_, _tables) = get(data);
                        caller_memory.store_many(ptr2, vec2.as_bytes())?;
                        caller_memory.store(
                            arg2 + 32,
                            wit_bindgen_wasmtime::rt::as_i32(vec2.len() as i32),
                        )?;
                        caller_memory.store(arg2 + 28, wit_bindgen_wasmtime::rt::as_i32(ptr2))?;
                        match extra0 {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg2 + 36,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                let vec8 = e;
                                let len8 = vec8.len() as i32;
                                let result8 = func_canonical_abi_realloc
                                    .call(&mut caller, (0, 0, 8, len8 * 24))?;
                                for (i, e) in vec8.into_iter().enumerate() {
                                    let base = result8 + (i as i32) * 24;
                                    {
                                        let ValueMapItemResult {
                                            key: key3,
                                            value: value3,
                                        } = e;
                                        let vec4 = key3;
                                        let ptr4 = func_canonical_abi_realloc
                                            .call(&mut caller, (0, 0, 1, vec4.len() as i32))?;
                                        let (caller_memory, data) =
                                            memory.data_and_store_mut(&mut caller);
                                        let (_, _tables) = get(data);
                                        caller_memory.store_many(ptr4, vec4.as_bytes())?;
                                        caller_memory.store(
                                            base + 4,
                                            wit_bindgen_wasmtime::rt::as_i32(vec4.len() as i32),
                                        )?;
                                        caller_memory.store(
                                            base + 0,
                                            wit_bindgen_wasmtime::rt::as_i32(ptr4),
                                        )?;
                                        match value3 {
                                            ValueResult::Null => {
                                                let e = ();
                                                {
                                                    caller_memory.store(
                                                        base + 8,
                                                        wit_bindgen_wasmtime::rt::as_i32(0i32)
                                                            as u8,
                                                    )?;
                                                    let () = e;
                                                }
                                            }
                                            ValueResult::Boolean(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(match e {
                                                        true => 1,
                                                        false => 0,
                                                    })
                                                        as u8,
                                                )?;
                                            }
                                            ValueResult::Int8(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(2i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u8,
                                                )?;
                                            }
                                            ValueResult::Int16(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(3i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u16,
                                                )?;
                                            }
                                            ValueResult::Int32(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(4i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Int64(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(5i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i64(
                                                        wit_bindgen_wasmtime::rt::as_i64(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Uint8(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(6i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u8,
                                                )?;
                                            }
                                            ValueResult::Uint16(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(7i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u16,
                                                )?;
                                            }
                                            ValueResult::Uint32(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(8i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Uint64(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(9i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i64(
                                                        wit_bindgen_wasmtime::rt::as_i64(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Floating32(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(10i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_f32(e),
                                                )?;
                                            }
                                            ValueResult::Floating64(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(11i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_f64(e),
                                                )?;
                                            }
                                            ValueResult::Str(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(12i32) as u8,
                                                )?;
                                                let vec5 = e;
                                                let ptr5 = func_canonical_abi_realloc.call(
                                                    &mut caller,
                                                    (0, 0, 1, vec5.len() as i32),
                                                )?;
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store_many(ptr5, vec5.as_bytes())?;
                                                caller_memory.store(
                                                    base + 20,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        vec5.len() as i32
                                                    ),
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(ptr5),
                                                )?;
                                            }
                                            ValueResult::Bytes(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(13i32) as u8,
                                                )?;
                                                let vec6 = e;
                                                let ptr6 = func_canonical_abi_realloc.call(
                                                    &mut caller,
                                                    (0, 0, 1, (vec6.len() as i32) * 1),
                                                )?;
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store_many(ptr6, &vec6)?;
                                                caller_memory.store(
                                                    base + 20,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        vec6.len() as i32
                                                    ),
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(ptr6),
                                                )?;
                                            }
                                            ValueResult::Raw(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(14i32) as u8,
                                                )?;
                                                let vec7 = e;
                                                let ptr7 = func_canonical_abi_realloc.call(
                                                    &mut caller,
                                                    (0, 0, 1, (vec7.len() as i32) * 1),
                                                )?;
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store_many(ptr7, &vec7)?;
                                                caller_memory.store(
                                                    base + 20,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        vec7.len() as i32
                                                    ),
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(ptr7),
                                                )?;
                                            }
                                        };
                                    }
                                }
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory
                                    .store(arg2 + 44, wit_bindgen_wasmtime::rt::as_i32(len8))?;
                                caller_memory
                                    .store(arg2 + 40, wit_bindgen_wasmtime::rt::as_i32(result8))?;
                            }
                            None => {
                                let e = ();
                                {
                                    caller_memory.store(
                                        arg2 + 36,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                    }
                };
                Ok(())
            },
        )?;
        linker.func_wrap(
            "sql_v1_alpha1",
            "row::get-optional-string",
            move |mut caller: wasmtime::Caller<'_, T>, arg0: i32, arg1: i32, arg2: i32| {
                let func = get_func(&mut caller, "canonical_abi_realloc")?;
                let func_canonical_abi_realloc =
                    func.typed::<(i32, i32, i32, i32), i32, _>(&caller)?;
                let memory = &get_memory(&mut caller, "memory")?;
                let host = get(caller.data_mut());
                let (host, _tables) = host;
                let param0 = _tables
                    .row_table
                    .get((arg0) as u32)
                    .ok_or_else(|| wasmtime::Trap::new("invalid handle index"))?;
                let param1 = arg1 as u32;
                let result = host.row_get_optional_string(param0, param1);
                match result {
                    Ok(e) => {
                        let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                        let (_, _tables) = get(data);
                        caller_memory
                            .store(arg2 + 0, wit_bindgen_wasmtime::rt::as_i32(0i32) as u8)?;
                        match e {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg2 + 4,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                let vec0 = e;
                                let ptr0 = func_canonical_abi_realloc
                                    .call(&mut caller, (0, 0, 1, vec0.len() as i32))?;
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store_many(ptr0, vec0.as_bytes())?;
                                caller_memory.store(
                                    arg2 + 12,
                                    wit_bindgen_wasmtime::rt::as_i32(vec0.len() as i32),
                                )?;
                                caller_memory
                                    .store(arg2 + 8, wit_bindgen_wasmtime::rt::as_i32(ptr0))?;
                            }
                            None => {
                                let e = ();
                                {
                                    caller_memory.store(
                                        arg2 + 4,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                    }
                    Err(e) => {
                        let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                        let (_, _tables) = get(data);
                        caller_memory
                            .store(arg2 + 0, wit_bindgen_wasmtime::rt::as_i32(1i32) as u8)?;
                        let SqlError {
                            code_numeric: code_numeric1,
                            code_text: code_text1,
                            message: message1,
                            extra: extra1,
                        } = e;
                        match code_numeric1 {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg2 + 4,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                caller_memory.store(
                                    arg2 + 8,
                                    wit_bindgen_wasmtime::rt::as_i32(
                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                    ),
                                )?;
                            }
                            None => {
                                let e = ();
                                {
                                    caller_memory.store(
                                        arg2 + 4,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                        match code_text1 {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg2 + 12,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                let vec2 = e;
                                let ptr2 = func_canonical_abi_realloc
                                    .call(&mut caller, (0, 0, 1, vec2.len() as i32))?;
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store_many(ptr2, vec2.as_bytes())?;
                                caller_memory.store(
                                    arg2 + 20,
                                    wit_bindgen_wasmtime::rt::as_i32(vec2.len() as i32),
                                )?;
                                caller_memory
                                    .store(arg2 + 16, wit_bindgen_wasmtime::rt::as_i32(ptr2))?;
                            }
                            None => {
                                let e = ();
                                {
                                    let (caller_memory, data) =
                                        memory.data_and_store_mut(&mut caller);
                                    let (_, _tables) = get(data);
                                    caller_memory.store(
                                        arg2 + 12,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                        let vec3 = message1;
                        let ptr3 = func_canonical_abi_realloc
                            .call(&mut caller, (0, 0, 1, vec3.len() as i32))?;
                        let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                        let (_, _tables) = get(data);
                        caller_memory.store_many(ptr3, vec3.as_bytes())?;
                        caller_memory.store(
                            arg2 + 28,
                            wit_bindgen_wasmtime::rt::as_i32(vec3.len() as i32),
                        )?;
                        caller_memory.store(arg2 + 24, wit_bindgen_wasmtime::rt::as_i32(ptr3))?;
                        match extra1 {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg2 + 32,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                let vec9 = e;
                                let len9 = vec9.len() as i32;
                                let result9 = func_canonical_abi_realloc
                                    .call(&mut caller, (0, 0, 8, len9 * 24))?;
                                for (i, e) in vec9.into_iter().enumerate() {
                                    let base = result9 + (i as i32) * 24;
                                    {
                                        let ValueMapItemResult {
                                            key: key4,
                                            value: value4,
                                        } = e;
                                        let vec5 = key4;
                                        let ptr5 = func_canonical_abi_realloc
                                            .call(&mut caller, (0, 0, 1, vec5.len() as i32))?;
                                        let (caller_memory, data) =
                                            memory.data_and_store_mut(&mut caller);
                                        let (_, _tables) = get(data);
                                        caller_memory.store_many(ptr5, vec5.as_bytes())?;
                                        caller_memory.store(
                                            base + 4,
                                            wit_bindgen_wasmtime::rt::as_i32(vec5.len() as i32),
                                        )?;
                                        caller_memory.store(
                                            base + 0,
                                            wit_bindgen_wasmtime::rt::as_i32(ptr5),
                                        )?;
                                        match value4 {
                                            ValueResult::Null => {
                                                let e = ();
                                                {
                                                    caller_memory.store(
                                                        base + 8,
                                                        wit_bindgen_wasmtime::rt::as_i32(0i32)
                                                            as u8,
                                                    )?;
                                                    let () = e;
                                                }
                                            }
                                            ValueResult::Boolean(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(match e {
                                                        true => 1,
                                                        false => 0,
                                                    })
                                                        as u8,
                                                )?;
                                            }
                                            ValueResult::Int8(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(2i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u8,
                                                )?;
                                            }
                                            ValueResult::Int16(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(3i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u16,
                                                )?;
                                            }
                                            ValueResult::Int32(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(4i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Int64(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(5i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i64(
                                                        wit_bindgen_wasmtime::rt::as_i64(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Uint8(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(6i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u8,
                                                )?;
                                            }
                                            ValueResult::Uint16(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(7i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u16,
                                                )?;
                                            }
                                            ValueResult::Uint32(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(8i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Uint64(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(9i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i64(
                                                        wit_bindgen_wasmtime::rt::as_i64(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Floating32(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(10i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_f32(e),
                                                )?;
                                            }
                                            ValueResult::Floating64(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(11i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_f64(e),
                                                )?;
                                            }
                                            ValueResult::Str(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(12i32) as u8,
                                                )?;
                                                let vec6 = e;
                                                let ptr6 = func_canonical_abi_realloc.call(
                                                    &mut caller,
                                                    (0, 0, 1, vec6.len() as i32),
                                                )?;
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store_many(ptr6, vec6.as_bytes())?;
                                                caller_memory.store(
                                                    base + 20,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        vec6.len() as i32
                                                    ),
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(ptr6),
                                                )?;
                                            }
                                            ValueResult::Bytes(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(13i32) as u8,
                                                )?;
                                                let vec7 = e;
                                                let ptr7 = func_canonical_abi_realloc.call(
                                                    &mut caller,
                                                    (0, 0, 1, (vec7.len() as i32) * 1),
                                                )?;
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store_many(ptr7, &vec7)?;
                                                caller_memory.store(
                                                    base + 20,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        vec7.len() as i32
                                                    ),
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(ptr7),
                                                )?;
                                            }
                                            ValueResult::Raw(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(14i32) as u8,
                                                )?;
                                                let vec8 = e;
                                                let ptr8 = func_canonical_abi_realloc.call(
                                                    &mut caller,
                                                    (0, 0, 1, (vec8.len() as i32) * 1),
                                                )?;
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store_many(ptr8, &vec8)?;
                                                caller_memory.store(
                                                    base + 20,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        vec8.len() as i32
                                                    ),
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(ptr8),
                                                )?;
                                            }
                                        };
                                    }
                                }
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory
                                    .store(arg2 + 40, wit_bindgen_wasmtime::rt::as_i32(len9))?;
                                caller_memory
                                    .store(arg2 + 36, wit_bindgen_wasmtime::rt::as_i32(result9))?;
                            }
                            None => {
                                let e = ();
                                {
                                    caller_memory.store(
                                        arg2 + 32,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                    }
                };
                Ok(())
            },
        )?;
        linker.func_wrap(
            "sql_v1_alpha1",
            "row::get-optional-bytes",
            move |mut caller: wasmtime::Caller<'_, T>, arg0: i32, arg1: i32, arg2: i32| {
                let func = get_func(&mut caller, "canonical_abi_realloc")?;
                let func_canonical_abi_realloc =
                    func.typed::<(i32, i32, i32, i32), i32, _>(&caller)?;
                let memory = &get_memory(&mut caller, "memory")?;
                let host = get(caller.data_mut());
                let (host, _tables) = host;
                let param0 = _tables
                    .row_table
                    .get((arg0) as u32)
                    .ok_or_else(|| wasmtime::Trap::new("invalid handle index"))?;
                let param1 = arg1 as u32;
                let result = host.row_get_optional_bytes(param0, param1);
                match result {
                    Ok(e) => {
                        let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                        let (_, _tables) = get(data);
                        caller_memory
                            .store(arg2 + 0, wit_bindgen_wasmtime::rt::as_i32(0i32) as u8)?;
                        match e {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg2 + 4,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                let vec0 = e;
                                let ptr0 = func_canonical_abi_realloc
                                    .call(&mut caller, (0, 0, 1, (vec0.len() as i32) * 1))?;
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store_many(ptr0, &vec0)?;
                                caller_memory.store(
                                    arg2 + 12,
                                    wit_bindgen_wasmtime::rt::as_i32(vec0.len() as i32),
                                )?;
                                caller_memory
                                    .store(arg2 + 8, wit_bindgen_wasmtime::rt::as_i32(ptr0))?;
                            }
                            None => {
                                let e = ();
                                {
                                    caller_memory.store(
                                        arg2 + 4,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                    }
                    Err(e) => {
                        let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                        let (_, _tables) = get(data);
                        caller_memory
                            .store(arg2 + 0, wit_bindgen_wasmtime::rt::as_i32(1i32) as u8)?;
                        let SqlError {
                            code_numeric: code_numeric1,
                            code_text: code_text1,
                            message: message1,
                            extra: extra1,
                        } = e;
                        match code_numeric1 {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg2 + 4,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                caller_memory.store(
                                    arg2 + 8,
                                    wit_bindgen_wasmtime::rt::as_i32(
                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                    ),
                                )?;
                            }
                            None => {
                                let e = ();
                                {
                                    caller_memory.store(
                                        arg2 + 4,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                        match code_text1 {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg2 + 12,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                let vec2 = e;
                                let ptr2 = func_canonical_abi_realloc
                                    .call(&mut caller, (0, 0, 1, vec2.len() as i32))?;
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store_many(ptr2, vec2.as_bytes())?;
                                caller_memory.store(
                                    arg2 + 20,
                                    wit_bindgen_wasmtime::rt::as_i32(vec2.len() as i32),
                                )?;
                                caller_memory
                                    .store(arg2 + 16, wit_bindgen_wasmtime::rt::as_i32(ptr2))?;
                            }
                            None => {
                                let e = ();
                                {
                                    let (caller_memory, data) =
                                        memory.data_and_store_mut(&mut caller);
                                    let (_, _tables) = get(data);
                                    caller_memory.store(
                                        arg2 + 12,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                        let vec3 = message1;
                        let ptr3 = func_canonical_abi_realloc
                            .call(&mut caller, (0, 0, 1, vec3.len() as i32))?;
                        let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                        let (_, _tables) = get(data);
                        caller_memory.store_many(ptr3, vec3.as_bytes())?;
                        caller_memory.store(
                            arg2 + 28,
                            wit_bindgen_wasmtime::rt::as_i32(vec3.len() as i32),
                        )?;
                        caller_memory.store(arg2 + 24, wit_bindgen_wasmtime::rt::as_i32(ptr3))?;
                        match extra1 {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg2 + 32,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                let vec9 = e;
                                let len9 = vec9.len() as i32;
                                let result9 = func_canonical_abi_realloc
                                    .call(&mut caller, (0, 0, 8, len9 * 24))?;
                                for (i, e) in vec9.into_iter().enumerate() {
                                    let base = result9 + (i as i32) * 24;
                                    {
                                        let ValueMapItemResult {
                                            key: key4,
                                            value: value4,
                                        } = e;
                                        let vec5 = key4;
                                        let ptr5 = func_canonical_abi_realloc
                                            .call(&mut caller, (0, 0, 1, vec5.len() as i32))?;
                                        let (caller_memory, data) =
                                            memory.data_and_store_mut(&mut caller);
                                        let (_, _tables) = get(data);
                                        caller_memory.store_many(ptr5, vec5.as_bytes())?;
                                        caller_memory.store(
                                            base + 4,
                                            wit_bindgen_wasmtime::rt::as_i32(vec5.len() as i32),
                                        )?;
                                        caller_memory.store(
                                            base + 0,
                                            wit_bindgen_wasmtime::rt::as_i32(ptr5),
                                        )?;
                                        match value4 {
                                            ValueResult::Null => {
                                                let e = ();
                                                {
                                                    caller_memory.store(
                                                        base + 8,
                                                        wit_bindgen_wasmtime::rt::as_i32(0i32)
                                                            as u8,
                                                    )?;
                                                    let () = e;
                                                }
                                            }
                                            ValueResult::Boolean(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(match e {
                                                        true => 1,
                                                        false => 0,
                                                    })
                                                        as u8,
                                                )?;
                                            }
                                            ValueResult::Int8(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(2i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u8,
                                                )?;
                                            }
                                            ValueResult::Int16(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(3i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u16,
                                                )?;
                                            }
                                            ValueResult::Int32(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(4i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Int64(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(5i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i64(
                                                        wit_bindgen_wasmtime::rt::as_i64(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Uint8(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(6i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u8,
                                                )?;
                                            }
                                            ValueResult::Uint16(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(7i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u16,
                                                )?;
                                            }
                                            ValueResult::Uint32(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(8i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Uint64(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(9i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i64(
                                                        wit_bindgen_wasmtime::rt::as_i64(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Floating32(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(10i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_f32(e),
                                                )?;
                                            }
                                            ValueResult::Floating64(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(11i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_f64(e),
                                                )?;
                                            }
                                            ValueResult::Str(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(12i32) as u8,
                                                )?;
                                                let vec6 = e;
                                                let ptr6 = func_canonical_abi_realloc.call(
                                                    &mut caller,
                                                    (0, 0, 1, vec6.len() as i32),
                                                )?;
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store_many(ptr6, vec6.as_bytes())?;
                                                caller_memory.store(
                                                    base + 20,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        vec6.len() as i32
                                                    ),
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(ptr6),
                                                )?;
                                            }
                                            ValueResult::Bytes(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(13i32) as u8,
                                                )?;
                                                let vec7 = e;
                                                let ptr7 = func_canonical_abi_realloc.call(
                                                    &mut caller,
                                                    (0, 0, 1, (vec7.len() as i32) * 1),
                                                )?;
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store_many(ptr7, &vec7)?;
                                                caller_memory.store(
                                                    base + 20,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        vec7.len() as i32
                                                    ),
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(ptr7),
                                                )?;
                                            }
                                            ValueResult::Raw(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(14i32) as u8,
                                                )?;
                                                let vec8 = e;
                                                let ptr8 = func_canonical_abi_realloc.call(
                                                    &mut caller,
                                                    (0, 0, 1, (vec8.len() as i32) * 1),
                                                )?;
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store_many(ptr8, &vec8)?;
                                                caller_memory.store(
                                                    base + 20,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        vec8.len() as i32
                                                    ),
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(ptr8),
                                                )?;
                                            }
                                        };
                                    }
                                }
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory
                                    .store(arg2 + 40, wit_bindgen_wasmtime::rt::as_i32(len9))?;
                                caller_memory
                                    .store(arg2 + 36, wit_bindgen_wasmtime::rt::as_i32(result9))?;
                            }
                            None => {
                                let e = ();
                                {
                                    caller_memory.store(
                                        arg2 + 32,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                    }
                };
                Ok(())
            },
        )?;
        linker.func_wrap(
            "sql_v1_alpha1",
            "row::get-optional-raw",
            move |mut caller: wasmtime::Caller<'_, T>, arg0: i32, arg1: i32, arg2: i32| {
                let func = get_func(&mut caller, "canonical_abi_realloc")?;
                let func_canonical_abi_realloc =
                    func.typed::<(i32, i32, i32, i32), i32, _>(&caller)?;
                let memory = &get_memory(&mut caller, "memory")?;
                let host = get(caller.data_mut());
                let (host, _tables) = host;
                let param0 = _tables
                    .row_table
                    .get((arg0) as u32)
                    .ok_or_else(|| wasmtime::Trap::new("invalid handle index"))?;
                let param1 = arg1 as u32;
                let result = host.row_get_optional_raw(param0, param1);
                match result {
                    Ok(e) => {
                        let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                        let (_, _tables) = get(data);
                        caller_memory
                            .store(arg2 + 0, wit_bindgen_wasmtime::rt::as_i32(0i32) as u8)?;
                        match e {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg2 + 4,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                let vec0 = e;
                                let ptr0 = func_canonical_abi_realloc
                                    .call(&mut caller, (0, 0, 1, (vec0.len() as i32) * 1))?;
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store_many(ptr0, &vec0)?;
                                caller_memory.store(
                                    arg2 + 12,
                                    wit_bindgen_wasmtime::rt::as_i32(vec0.len() as i32),
                                )?;
                                caller_memory
                                    .store(arg2 + 8, wit_bindgen_wasmtime::rt::as_i32(ptr0))?;
                            }
                            None => {
                                let e = ();
                                {
                                    caller_memory.store(
                                        arg2 + 4,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                    }
                    Err(e) => {
                        let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                        let (_, _tables) = get(data);
                        caller_memory
                            .store(arg2 + 0, wit_bindgen_wasmtime::rt::as_i32(1i32) as u8)?;
                        let SqlError {
                            code_numeric: code_numeric1,
                            code_text: code_text1,
                            message: message1,
                            extra: extra1,
                        } = e;
                        match code_numeric1 {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg2 + 4,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                caller_memory.store(
                                    arg2 + 8,
                                    wit_bindgen_wasmtime::rt::as_i32(
                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                    ),
                                )?;
                            }
                            None => {
                                let e = ();
                                {
                                    caller_memory.store(
                                        arg2 + 4,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                        match code_text1 {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg2 + 12,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                let vec2 = e;
                                let ptr2 = func_canonical_abi_realloc
                                    .call(&mut caller, (0, 0, 1, vec2.len() as i32))?;
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store_many(ptr2, vec2.as_bytes())?;
                                caller_memory.store(
                                    arg2 + 20,
                                    wit_bindgen_wasmtime::rt::as_i32(vec2.len() as i32),
                                )?;
                                caller_memory
                                    .store(arg2 + 16, wit_bindgen_wasmtime::rt::as_i32(ptr2))?;
                            }
                            None => {
                                let e = ();
                                {
                                    let (caller_memory, data) =
                                        memory.data_and_store_mut(&mut caller);
                                    let (_, _tables) = get(data);
                                    caller_memory.store(
                                        arg2 + 12,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                        let vec3 = message1;
                        let ptr3 = func_canonical_abi_realloc
                            .call(&mut caller, (0, 0, 1, vec3.len() as i32))?;
                        let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                        let (_, _tables) = get(data);
                        caller_memory.store_many(ptr3, vec3.as_bytes())?;
                        caller_memory.store(
                            arg2 + 28,
                            wit_bindgen_wasmtime::rt::as_i32(vec3.len() as i32),
                        )?;
                        caller_memory.store(arg2 + 24, wit_bindgen_wasmtime::rt::as_i32(ptr3))?;
                        match extra1 {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg2 + 32,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                let vec9 = e;
                                let len9 = vec9.len() as i32;
                                let result9 = func_canonical_abi_realloc
                                    .call(&mut caller, (0, 0, 8, len9 * 24))?;
                                for (i, e) in vec9.into_iter().enumerate() {
                                    let base = result9 + (i as i32) * 24;
                                    {
                                        let ValueMapItemResult {
                                            key: key4,
                                            value: value4,
                                        } = e;
                                        let vec5 = key4;
                                        let ptr5 = func_canonical_abi_realloc
                                            .call(&mut caller, (0, 0, 1, vec5.len() as i32))?;
                                        let (caller_memory, data) =
                                            memory.data_and_store_mut(&mut caller);
                                        let (_, _tables) = get(data);
                                        caller_memory.store_many(ptr5, vec5.as_bytes())?;
                                        caller_memory.store(
                                            base + 4,
                                            wit_bindgen_wasmtime::rt::as_i32(vec5.len() as i32),
                                        )?;
                                        caller_memory.store(
                                            base + 0,
                                            wit_bindgen_wasmtime::rt::as_i32(ptr5),
                                        )?;
                                        match value4 {
                                            ValueResult::Null => {
                                                let e = ();
                                                {
                                                    caller_memory.store(
                                                        base + 8,
                                                        wit_bindgen_wasmtime::rt::as_i32(0i32)
                                                            as u8,
                                                    )?;
                                                    let () = e;
                                                }
                                            }
                                            ValueResult::Boolean(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(match e {
                                                        true => 1,
                                                        false => 0,
                                                    })
                                                        as u8,
                                                )?;
                                            }
                                            ValueResult::Int8(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(2i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u8,
                                                )?;
                                            }
                                            ValueResult::Int16(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(3i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u16,
                                                )?;
                                            }
                                            ValueResult::Int32(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(4i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Int64(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(5i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i64(
                                                        wit_bindgen_wasmtime::rt::as_i64(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Uint8(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(6i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u8,
                                                )?;
                                            }
                                            ValueResult::Uint16(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(7i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u16,
                                                )?;
                                            }
                                            ValueResult::Uint32(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(8i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Uint64(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(9i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i64(
                                                        wit_bindgen_wasmtime::rt::as_i64(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Floating32(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(10i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_f32(e),
                                                )?;
                                            }
                                            ValueResult::Floating64(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(11i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_f64(e),
                                                )?;
                                            }
                                            ValueResult::Str(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(12i32) as u8,
                                                )?;
                                                let vec6 = e;
                                                let ptr6 = func_canonical_abi_realloc.call(
                                                    &mut caller,
                                                    (0, 0, 1, vec6.len() as i32),
                                                )?;
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store_many(ptr6, vec6.as_bytes())?;
                                                caller_memory.store(
                                                    base + 20,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        vec6.len() as i32
                                                    ),
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(ptr6),
                                                )?;
                                            }
                                            ValueResult::Bytes(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(13i32) as u8,
                                                )?;
                                                let vec7 = e;
                                                let ptr7 = func_canonical_abi_realloc.call(
                                                    &mut caller,
                                                    (0, 0, 1, (vec7.len() as i32) * 1),
                                                )?;
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store_many(ptr7, &vec7)?;
                                                caller_memory.store(
                                                    base + 20,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        vec7.len() as i32
                                                    ),
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(ptr7),
                                                )?;
                                            }
                                            ValueResult::Raw(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(14i32) as u8,
                                                )?;
                                                let vec8 = e;
                                                let ptr8 = func_canonical_abi_realloc.call(
                                                    &mut caller,
                                                    (0, 0, 1, (vec8.len() as i32) * 1),
                                                )?;
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store_many(ptr8, &vec8)?;
                                                caller_memory.store(
                                                    base + 20,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        vec8.len() as i32
                                                    ),
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(ptr8),
                                                )?;
                                            }
                                        };
                                    }
                                }
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory
                                    .store(arg2 + 40, wit_bindgen_wasmtime::rt::as_i32(len9))?;
                                caller_memory
                                    .store(arg2 + 36, wit_bindgen_wasmtime::rt::as_i32(result9))?;
                            }
                            None => {
                                let e = ();
                                {
                                    caller_memory.store(
                                        arg2 + 32,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                    }
                };
                Ok(())
            },
        )?;
        linker.func_wrap(
            "sql_v1_alpha1",
            "row::get-value",
            move |mut caller: wasmtime::Caller<'_, T>, arg0: i32, arg1: i32, arg2: i32| {
                let func = get_func(&mut caller, "canonical_abi_realloc")?;
                let func_canonical_abi_realloc =
                    func.typed::<(i32, i32, i32, i32), i32, _>(&caller)?;
                let memory = &get_memory(&mut caller, "memory")?;
                let host = get(caller.data_mut());
                let (host, _tables) = host;
                let param0 = _tables
                    .row_table
                    .get((arg0) as u32)
                    .ok_or_else(|| wasmtime::Trap::new("invalid handle index"))?;
                let param1 = arg1 as u32;
                let result = host.row_get_value(param0, param1);
                match result {
                    Ok(e) => {
                        let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                        let (_, _tables) = get(data);
                        caller_memory
                            .store(arg2 + 0, wit_bindgen_wasmtime::rt::as_i32(0i32) as u8)?;
                        match e {
                            ValueResult::Null => {
                                let e = ();
                                {
                                    caller_memory.store(
                                        arg2 + 8,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                            ValueResult::Boolean(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg2 + 8,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                caller_memory.store(
                                    arg2 + 16,
                                    wit_bindgen_wasmtime::rt::as_i32(match e {
                                        true => 1,
                                        false => 0,
                                    }) as u8,
                                )?;
                            }
                            ValueResult::Int8(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg2 + 8,
                                    wit_bindgen_wasmtime::rt::as_i32(2i32) as u8,
                                )?;
                                caller_memory.store(
                                    arg2 + 16,
                                    wit_bindgen_wasmtime::rt::as_i32(
                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                    ) as u8,
                                )?;
                            }
                            ValueResult::Int16(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg2 + 8,
                                    wit_bindgen_wasmtime::rt::as_i32(3i32) as u8,
                                )?;
                                caller_memory.store(
                                    arg2 + 16,
                                    wit_bindgen_wasmtime::rt::as_i32(
                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                    ) as u16,
                                )?;
                            }
                            ValueResult::Int32(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg2 + 8,
                                    wit_bindgen_wasmtime::rt::as_i32(4i32) as u8,
                                )?;
                                caller_memory.store(
                                    arg2 + 16,
                                    wit_bindgen_wasmtime::rt::as_i32(
                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                    ),
                                )?;
                            }
                            ValueResult::Int64(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg2 + 8,
                                    wit_bindgen_wasmtime::rt::as_i32(5i32) as u8,
                                )?;
                                caller_memory.store(
                                    arg2 + 16,
                                    wit_bindgen_wasmtime::rt::as_i64(
                                        wit_bindgen_wasmtime::rt::as_i64(e),
                                    ),
                                )?;
                            }
                            ValueResult::Uint8(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg2 + 8,
                                    wit_bindgen_wasmtime::rt::as_i32(6i32) as u8,
                                )?;
                                caller_memory.store(
                                    arg2 + 16,
                                    wit_bindgen_wasmtime::rt::as_i32(
                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                    ) as u8,
                                )?;
                            }
                            ValueResult::Uint16(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg2 + 8,
                                    wit_bindgen_wasmtime::rt::as_i32(7i32) as u8,
                                )?;
                                caller_memory.store(
                                    arg2 + 16,
                                    wit_bindgen_wasmtime::rt::as_i32(
                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                    ) as u16,
                                )?;
                            }
                            ValueResult::Uint32(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg2 + 8,
                                    wit_bindgen_wasmtime::rt::as_i32(8i32) as u8,
                                )?;
                                caller_memory.store(
                                    arg2 + 16,
                                    wit_bindgen_wasmtime::rt::as_i32(
                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                    ),
                                )?;
                            }
                            ValueResult::Uint64(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg2 + 8,
                                    wit_bindgen_wasmtime::rt::as_i32(9i32) as u8,
                                )?;
                                caller_memory.store(
                                    arg2 + 16,
                                    wit_bindgen_wasmtime::rt::as_i64(
                                        wit_bindgen_wasmtime::rt::as_i64(e),
                                    ),
                                )?;
                            }
                            ValueResult::Floating32(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg2 + 8,
                                    wit_bindgen_wasmtime::rt::as_i32(10i32) as u8,
                                )?;
                                caller_memory
                                    .store(arg2 + 16, wit_bindgen_wasmtime::rt::as_f32(e))?;
                            }
                            ValueResult::Floating64(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg2 + 8,
                                    wit_bindgen_wasmtime::rt::as_i32(11i32) as u8,
                                )?;
                                caller_memory
                                    .store(arg2 + 16, wit_bindgen_wasmtime::rt::as_f64(e))?;
                            }
                            ValueResult::Str(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg2 + 8,
                                    wit_bindgen_wasmtime::rt::as_i32(12i32) as u8,
                                )?;
                                let vec0 = e;
                                let ptr0 = func_canonical_abi_realloc
                                    .call(&mut caller, (0, 0, 1, vec0.len() as i32))?;
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store_many(ptr0, vec0.as_bytes())?;
                                caller_memory.store(
                                    arg2 + 20,
                                    wit_bindgen_wasmtime::rt::as_i32(vec0.len() as i32),
                                )?;
                                caller_memory
                                    .store(arg2 + 16, wit_bindgen_wasmtime::rt::as_i32(ptr0))?;
                            }
                            ValueResult::Bytes(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg2 + 8,
                                    wit_bindgen_wasmtime::rt::as_i32(13i32) as u8,
                                )?;
                                let vec1 = e;
                                let ptr1 = func_canonical_abi_realloc
                                    .call(&mut caller, (0, 0, 1, (vec1.len() as i32) * 1))?;
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store_many(ptr1, &vec1)?;
                                caller_memory.store(
                                    arg2 + 20,
                                    wit_bindgen_wasmtime::rt::as_i32(vec1.len() as i32),
                                )?;
                                caller_memory
                                    .store(arg2 + 16, wit_bindgen_wasmtime::rt::as_i32(ptr1))?;
                            }
                            ValueResult::Raw(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg2 + 8,
                                    wit_bindgen_wasmtime::rt::as_i32(14i32) as u8,
                                )?;
                                let vec2 = e;
                                let ptr2 = func_canonical_abi_realloc
                                    .call(&mut caller, (0, 0, 1, (vec2.len() as i32) * 1))?;
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store_many(ptr2, &vec2)?;
                                caller_memory.store(
                                    arg2 + 20,
                                    wit_bindgen_wasmtime::rt::as_i32(vec2.len() as i32),
                                )?;
                                caller_memory
                                    .store(arg2 + 16, wit_bindgen_wasmtime::rt::as_i32(ptr2))?;
                            }
                        };
                    }
                    Err(e) => {
                        let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                        let (_, _tables) = get(data);
                        caller_memory
                            .store(arg2 + 0, wit_bindgen_wasmtime::rt::as_i32(1i32) as u8)?;
                        let SqlError {
                            code_numeric: code_numeric3,
                            code_text: code_text3,
                            message: message3,
                            extra: extra3,
                        } = e;
                        match code_numeric3 {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg2 + 8,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                caller_memory.store(
                                    arg2 + 12,
                                    wit_bindgen_wasmtime::rt::as_i32(
                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                    ),
                                )?;
                            }
                            None => {
                                let e = ();
                                {
                                    caller_memory.store(
                                        arg2 + 8,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                        match code_text3 {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg2 + 16,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                let vec4 = e;
                                let ptr4 = func_canonical_abi_realloc
                                    .call(&mut caller, (0, 0, 1, vec4.len() as i32))?;
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store_many(ptr4, vec4.as_bytes())?;
                                caller_memory.store(
                                    arg2 + 24,
                                    wit_bindgen_wasmtime::rt::as_i32(vec4.len() as i32),
                                )?;
                                caller_memory
                                    .store(arg2 + 20, wit_bindgen_wasmtime::rt::as_i32(ptr4))?;
                            }
                            None => {
                                let e = ();
                                {
                                    let (caller_memory, data) =
                                        memory.data_and_store_mut(&mut caller);
                                    let (_, _tables) = get(data);
                                    caller_memory.store(
                                        arg2 + 16,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                        let vec5 = message3;
                        let ptr5 = func_canonical_abi_realloc
                            .call(&mut caller, (0, 0, 1, vec5.len() as i32))?;
                        let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                        let (_, _tables) = get(data);
                        caller_memory.store_many(ptr5, vec5.as_bytes())?;
                        caller_memory.store(
                            arg2 + 32,
                            wit_bindgen_wasmtime::rt::as_i32(vec5.len() as i32),
                        )?;
                        caller_memory.store(arg2 + 28, wit_bindgen_wasmtime::rt::as_i32(ptr5))?;
                        match extra3 {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg2 + 36,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                let vec11 = e;
                                let len11 = vec11.len() as i32;
                                let result11 = func_canonical_abi_realloc
                                    .call(&mut caller, (0, 0, 8, len11 * 24))?;
                                for (i, e) in vec11.into_iter().enumerate() {
                                    let base = result11 + (i as i32) * 24;
                                    {
                                        let ValueMapItemResult {
                                            key: key6,
                                            value: value6,
                                        } = e;
                                        let vec7 = key6;
                                        let ptr7 = func_canonical_abi_realloc
                                            .call(&mut caller, (0, 0, 1, vec7.len() as i32))?;
                                        let (caller_memory, data) =
                                            memory.data_and_store_mut(&mut caller);
                                        let (_, _tables) = get(data);
                                        caller_memory.store_many(ptr7, vec7.as_bytes())?;
                                        caller_memory.store(
                                            base + 4,
                                            wit_bindgen_wasmtime::rt::as_i32(vec7.len() as i32),
                                        )?;
                                        caller_memory.store(
                                            base + 0,
                                            wit_bindgen_wasmtime::rt::as_i32(ptr7),
                                        )?;
                                        match value6 {
                                            ValueResult::Null => {
                                                let e = ();
                                                {
                                                    caller_memory.store(
                                                        base + 8,
                                                        wit_bindgen_wasmtime::rt::as_i32(0i32)
                                                            as u8,
                                                    )?;
                                                    let () = e;
                                                }
                                            }
                                            ValueResult::Boolean(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(match e {
                                                        true => 1,
                                                        false => 0,
                                                    })
                                                        as u8,
                                                )?;
                                            }
                                            ValueResult::Int8(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(2i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u8,
                                                )?;
                                            }
                                            ValueResult::Int16(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(3i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u16,
                                                )?;
                                            }
                                            ValueResult::Int32(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(4i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Int64(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(5i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i64(
                                                        wit_bindgen_wasmtime::rt::as_i64(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Uint8(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(6i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u8,
                                                )?;
                                            }
                                            ValueResult::Uint16(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(7i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u16,
                                                )?;
                                            }
                                            ValueResult::Uint32(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(8i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Uint64(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(9i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i64(
                                                        wit_bindgen_wasmtime::rt::as_i64(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Floating32(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(10i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_f32(e),
                                                )?;
                                            }
                                            ValueResult::Floating64(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(11i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_f64(e),
                                                )?;
                                            }
                                            ValueResult::Str(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(12i32) as u8,
                                                )?;
                                                let vec8 = e;
                                                let ptr8 = func_canonical_abi_realloc.call(
                                                    &mut caller,
                                                    (0, 0, 1, vec8.len() as i32),
                                                )?;
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store_many(ptr8, vec8.as_bytes())?;
                                                caller_memory.store(
                                                    base + 20,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        vec8.len() as i32
                                                    ),
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(ptr8),
                                                )?;
                                            }
                                            ValueResult::Bytes(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(13i32) as u8,
                                                )?;
                                                let vec9 = e;
                                                let ptr9 = func_canonical_abi_realloc.call(
                                                    &mut caller,
                                                    (0, 0, 1, (vec9.len() as i32) * 1),
                                                )?;
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store_many(ptr9, &vec9)?;
                                                caller_memory.store(
                                                    base + 20,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        vec9.len() as i32
                                                    ),
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(ptr9),
                                                )?;
                                            }
                                            ValueResult::Raw(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(14i32) as u8,
                                                )?;
                                                let vec10 = e;
                                                let ptr10 = func_canonical_abi_realloc.call(
                                                    &mut caller,
                                                    (0, 0, 1, (vec10.len() as i32) * 1),
                                                )?;
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store_many(ptr10, &vec10)?;
                                                caller_memory.store(
                                                    base + 20,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        vec10.len() as i32
                                                    ),
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(ptr10),
                                                )?;
                                            }
                                        };
                                    }
                                }
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory
                                    .store(arg2 + 44, wit_bindgen_wasmtime::rt::as_i32(len11))?;
                                caller_memory
                                    .store(arg2 + 40, wit_bindgen_wasmtime::rt::as_i32(result11))?;
                            }
                            None => {
                                let e = ();
                                {
                                    caller_memory.store(
                                        arg2 + 36,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                    }
                };
                Ok(())
            },
        )?;
        linker.func_wrap(
            "sql_v1_alpha1",
            "prepared-statement::execute",
            move |mut caller: wasmtime::Caller<'_, T>,
                  arg0: i32,
                  arg1: i32,
                  arg2: i32,
                  arg3: i32| {
                let func = get_func(&mut caller, "canonical_abi_realloc")?;
                let func_canonical_abi_realloc =
                    func.typed::<(i32, i32, i32, i32), i32, _>(&caller)?;
                let memory = &get_memory(&mut caller, "memory")?;
                let (mem, data) = memory.data_and_store_mut(&mut caller);
                let mut _bc = wit_bindgen_wasmtime::BorrowChecker::new(mem);
                let host = get(data);
                let (host, _tables) = host;
                let len21 = arg2;
                let base21 = arg1;
                let mut result21 = Vec::with_capacity(len21 as usize);
                for i in 0..len21 {
                    let base = base21 + i * 16;
                    result21.push({
                        let load0 = _bc.load::<u8>(base + 0)?;
                        match i32::from(load0) {
                            0 => ValueParam::Null,
                            1 => ValueParam::Boolean({
                                let load1 = _bc.load::<u8>(base + 8)?;
                                match i32::from(load1) {
                                    0 => false,
                                    1 => true,
                                    _ => return Err(invalid_variant("bool")),
                                }
                            }),
                            2 => ValueParam::Int8({
                                let load2 = _bc.load::<i8>(base + 8)?;
                                i8::try_from(i32::from(load2)).map_err(bad_int)?
                            }),
                            3 => ValueParam::Int16({
                                let load3 = _bc.load::<i16>(base + 8)?;
                                i16::try_from(i32::from(load3)).map_err(bad_int)?
                            }),
                            4 => ValueParam::Int32({
                                let load4 = _bc.load::<i32>(base + 8)?;
                                load4
                            }),
                            5 => ValueParam::Int64({
                                let load5 = _bc.load::<i64>(base + 8)?;
                                load5
                            }),
                            6 => ValueParam::Uint8({
                                let load6 = _bc.load::<u8>(base + 8)?;
                                u8::try_from(i32::from(load6)).map_err(bad_int)?
                            }),
                            7 => ValueParam::Uint16({
                                let load7 = _bc.load::<u16>(base + 8)?;
                                u16::try_from(i32::from(load7)).map_err(bad_int)?
                            }),
                            8 => ValueParam::Uint32({
                                let load8 = _bc.load::<i32>(base + 8)?;
                                load8 as u32
                            }),
                            9 => ValueParam::Uint64({
                                let load9 = _bc.load::<i64>(base + 8)?;
                                load9 as u64
                            }),
                            10 => ValueParam::Floating32({
                                let load10 = _bc.load::<f32>(base + 8)?;
                                load10
                            }),
                            11 => ValueParam::Floating64({
                                let load11 = _bc.load::<f64>(base + 8)?;
                                load11
                            }),
                            12 => ValueParam::Str({
                                let load12 = _bc.load::<i32>(base + 8)?;
                                let load13 = _bc.load::<i32>(base + 12)?;
                                let ptr14 = load12;
                                let len14 = load13;
                                _bc.slice_str(ptr14, len14)?
                            }),
                            13 => ValueParam::Bytes({
                                let load15 = _bc.load::<i32>(base + 8)?;
                                let load16 = _bc.load::<i32>(base + 12)?;
                                let ptr17 = load15;
                                let len17 = load16;
                                _bc.slice(ptr17, len17)?
                            }),
                            14 => ValueParam::Raw({
                                let load18 = _bc.load::<i32>(base + 8)?;
                                let load19 = _bc.load::<i32>(base + 12)?;
                                let ptr20 = load18;
                                let len20 = load19;
                                _bc.slice(ptr20, len20)?
                            }),
                            _ => return Err(invalid_variant("ValueParam")),
                        }
                    });
                }
                let param0 = _tables
                    .prepared_statement_table
                    .get((arg0) as u32)
                    .ok_or_else(|| wasmtime::Trap::new("invalid handle index"))?;
                let param1 = result21;
                let result = host.prepared_statement_execute(param0, param1);
                match result {
                    Ok(e) => {
                        let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                        let (_, _tables) = get(data);
                        caller_memory
                            .store(arg3 + 0, wit_bindgen_wasmtime::rt::as_i32(0i32) as u8)?;
                        let () = e;
                    }
                    Err(e) => {
                        let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                        let (_, _tables) = get(data);
                        caller_memory
                            .store(arg3 + 0, wit_bindgen_wasmtime::rt::as_i32(1i32) as u8)?;
                        let SqlError {
                            code_numeric: code_numeric22,
                            code_text: code_text22,
                            message: message22,
                            extra: extra22,
                        } = e;
                        match code_numeric22 {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg3 + 4,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                caller_memory.store(
                                    arg3 + 8,
                                    wit_bindgen_wasmtime::rt::as_i32(
                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                    ),
                                )?;
                            }
                            None => {
                                let e = ();
                                {
                                    caller_memory.store(
                                        arg3 + 4,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                        match code_text22 {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg3 + 12,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                let vec23 = e;
                                let ptr23 = func_canonical_abi_realloc
                                    .call(&mut caller, (0, 0, 1, vec23.len() as i32))?;
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store_many(ptr23, vec23.as_bytes())?;
                                caller_memory.store(
                                    arg3 + 20,
                                    wit_bindgen_wasmtime::rt::as_i32(vec23.len() as i32),
                                )?;
                                caller_memory
                                    .store(arg3 + 16, wit_bindgen_wasmtime::rt::as_i32(ptr23))?;
                            }
                            None => {
                                let e = ();
                                {
                                    let (caller_memory, data) =
                                        memory.data_and_store_mut(&mut caller);
                                    let (_, _tables) = get(data);
                                    caller_memory.store(
                                        arg3 + 12,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                        let vec24 = message22;
                        let ptr24 = func_canonical_abi_realloc
                            .call(&mut caller, (0, 0, 1, vec24.len() as i32))?;
                        let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                        let (_, _tables) = get(data);
                        caller_memory.store_many(ptr24, vec24.as_bytes())?;
                        caller_memory.store(
                            arg3 + 28,
                            wit_bindgen_wasmtime::rt::as_i32(vec24.len() as i32),
                        )?;
                        caller_memory.store(arg3 + 24, wit_bindgen_wasmtime::rt::as_i32(ptr24))?;
                        match extra22 {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg3 + 32,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                let vec30 = e;
                                let len30 = vec30.len() as i32;
                                let result30 = func_canonical_abi_realloc
                                    .call(&mut caller, (0, 0, 8, len30 * 24))?;
                                for (i, e) in vec30.into_iter().enumerate() {
                                    let base = result30 + (i as i32) * 24;
                                    {
                                        let ValueMapItemResult {
                                            key: key25,
                                            value: value25,
                                        } = e;
                                        let vec26 = key25;
                                        let ptr26 = func_canonical_abi_realloc
                                            .call(&mut caller, (0, 0, 1, vec26.len() as i32))?;
                                        let (caller_memory, data) =
                                            memory.data_and_store_mut(&mut caller);
                                        let (_, _tables) = get(data);
                                        caller_memory.store_many(ptr26, vec26.as_bytes())?;
                                        caller_memory.store(
                                            base + 4,
                                            wit_bindgen_wasmtime::rt::as_i32(vec26.len() as i32),
                                        )?;
                                        caller_memory.store(
                                            base + 0,
                                            wit_bindgen_wasmtime::rt::as_i32(ptr26),
                                        )?;
                                        match value25 {
                                            ValueResult::Null => {
                                                let e = ();
                                                {
                                                    caller_memory.store(
                                                        base + 8,
                                                        wit_bindgen_wasmtime::rt::as_i32(0i32)
                                                            as u8,
                                                    )?;
                                                    let () = e;
                                                }
                                            }
                                            ValueResult::Boolean(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(match e {
                                                        true => 1,
                                                        false => 0,
                                                    })
                                                        as u8,
                                                )?;
                                            }
                                            ValueResult::Int8(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(2i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u8,
                                                )?;
                                            }
                                            ValueResult::Int16(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(3i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u16,
                                                )?;
                                            }
                                            ValueResult::Int32(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(4i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Int64(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(5i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i64(
                                                        wit_bindgen_wasmtime::rt::as_i64(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Uint8(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(6i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u8,
                                                )?;
                                            }
                                            ValueResult::Uint16(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(7i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u16,
                                                )?;
                                            }
                                            ValueResult::Uint32(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(8i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Uint64(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(9i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i64(
                                                        wit_bindgen_wasmtime::rt::as_i64(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Floating32(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(10i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_f32(e),
                                                )?;
                                            }
                                            ValueResult::Floating64(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(11i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_f64(e),
                                                )?;
                                            }
                                            ValueResult::Str(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(12i32) as u8,
                                                )?;
                                                let vec27 = e;
                                                let ptr27 = func_canonical_abi_realloc.call(
                                                    &mut caller,
                                                    (0, 0, 1, vec27.len() as i32),
                                                )?;
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory
                                                    .store_many(ptr27, vec27.as_bytes())?;
                                                caller_memory.store(
                                                    base + 20,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        vec27.len() as i32
                                                    ),
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(ptr27),
                                                )?;
                                            }
                                            ValueResult::Bytes(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(13i32) as u8,
                                                )?;
                                                let vec28 = e;
                                                let ptr28 = func_canonical_abi_realloc.call(
                                                    &mut caller,
                                                    (0, 0, 1, (vec28.len() as i32) * 1),
                                                )?;
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store_many(ptr28, &vec28)?;
                                                caller_memory.store(
                                                    base + 20,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        vec28.len() as i32
                                                    ),
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(ptr28),
                                                )?;
                                            }
                                            ValueResult::Raw(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(14i32) as u8,
                                                )?;
                                                let vec29 = e;
                                                let ptr29 = func_canonical_abi_realloc.call(
                                                    &mut caller,
                                                    (0, 0, 1, (vec29.len() as i32) * 1),
                                                )?;
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store_many(ptr29, &vec29)?;
                                                caller_memory.store(
                                                    base + 20,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        vec29.len() as i32
                                                    ),
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(ptr29),
                                                )?;
                                            }
                                        };
                                    }
                                }
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory
                                    .store(arg3 + 40, wit_bindgen_wasmtime::rt::as_i32(len30))?;
                                caller_memory
                                    .store(arg3 + 36, wit_bindgen_wasmtime::rt::as_i32(result30))?;
                            }
                            None => {
                                let e = ();
                                {
                                    caller_memory.store(
                                        arg3 + 32,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                    }
                };
                Ok(())
            },
        )?;
        linker.func_wrap(
            "sql_v1_alpha1",
            "prepared-statement::query",
            move |mut caller: wasmtime::Caller<'_, T>,
                  arg0: i32,
                  arg1: i32,
                  arg2: i32,
                  arg3: i32| {
                let func = get_func(&mut caller, "canonical_abi_realloc")?;
                let func_canonical_abi_realloc =
                    func.typed::<(i32, i32, i32, i32), i32, _>(&caller)?;
                let memory = &get_memory(&mut caller, "memory")?;
                let (mem, data) = memory.data_and_store_mut(&mut caller);
                let mut _bc = wit_bindgen_wasmtime::BorrowChecker::new(mem);
                let host = get(data);
                let (host, _tables) = host;
                let len21 = arg2;
                let base21 = arg1;
                let mut result21 = Vec::with_capacity(len21 as usize);
                for i in 0..len21 {
                    let base = base21 + i * 16;
                    result21.push({
                        let load0 = _bc.load::<u8>(base + 0)?;
                        match i32::from(load0) {
                            0 => ValueParam::Null,
                            1 => ValueParam::Boolean({
                                let load1 = _bc.load::<u8>(base + 8)?;
                                match i32::from(load1) {
                                    0 => false,
                                    1 => true,
                                    _ => return Err(invalid_variant("bool")),
                                }
                            }),
                            2 => ValueParam::Int8({
                                let load2 = _bc.load::<i8>(base + 8)?;
                                i8::try_from(i32::from(load2)).map_err(bad_int)?
                            }),
                            3 => ValueParam::Int16({
                                let load3 = _bc.load::<i16>(base + 8)?;
                                i16::try_from(i32::from(load3)).map_err(bad_int)?
                            }),
                            4 => ValueParam::Int32({
                                let load4 = _bc.load::<i32>(base + 8)?;
                                load4
                            }),
                            5 => ValueParam::Int64({
                                let load5 = _bc.load::<i64>(base + 8)?;
                                load5
                            }),
                            6 => ValueParam::Uint8({
                                let load6 = _bc.load::<u8>(base + 8)?;
                                u8::try_from(i32::from(load6)).map_err(bad_int)?
                            }),
                            7 => ValueParam::Uint16({
                                let load7 = _bc.load::<u16>(base + 8)?;
                                u16::try_from(i32::from(load7)).map_err(bad_int)?
                            }),
                            8 => ValueParam::Uint32({
                                let load8 = _bc.load::<i32>(base + 8)?;
                                load8 as u32
                            }),
                            9 => ValueParam::Uint64({
                                let load9 = _bc.load::<i64>(base + 8)?;
                                load9 as u64
                            }),
                            10 => ValueParam::Floating32({
                                let load10 = _bc.load::<f32>(base + 8)?;
                                load10
                            }),
                            11 => ValueParam::Floating64({
                                let load11 = _bc.load::<f64>(base + 8)?;
                                load11
                            }),
                            12 => ValueParam::Str({
                                let load12 = _bc.load::<i32>(base + 8)?;
                                let load13 = _bc.load::<i32>(base + 12)?;
                                let ptr14 = load12;
                                let len14 = load13;
                                _bc.slice_str(ptr14, len14)?
                            }),
                            13 => ValueParam::Bytes({
                                let load15 = _bc.load::<i32>(base + 8)?;
                                let load16 = _bc.load::<i32>(base + 12)?;
                                let ptr17 = load15;
                                let len17 = load16;
                                _bc.slice(ptr17, len17)?
                            }),
                            14 => ValueParam::Raw({
                                let load18 = _bc.load::<i32>(base + 8)?;
                                let load19 = _bc.load::<i32>(base + 12)?;
                                let ptr20 = load18;
                                let len20 = load19;
                                _bc.slice(ptr20, len20)?
                            }),
                            _ => return Err(invalid_variant("ValueParam")),
                        }
                    });
                }
                let param0 = _tables
                    .prepared_statement_table
                    .get((arg0) as u32)
                    .ok_or_else(|| wasmtime::Trap::new("invalid handle index"))?;
                let param1 = result21;
                let result = host.prepared_statement_query(param0, param1);
                match result {
                    Ok(e) => {
                        let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                        let (_, _tables) = get(data);
                        caller_memory
                            .store(arg3 + 0, wit_bindgen_wasmtime::rt::as_i32(0i32) as u8)?;
                        caller_memory.store(
                            arg3 + 4,
                            wit_bindgen_wasmtime::rt::as_i32(_tables.rows_table.insert(e) as i32),
                        )?;
                    }
                    Err(e) => {
                        let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                        let (_, _tables) = get(data);
                        caller_memory
                            .store(arg3 + 0, wit_bindgen_wasmtime::rt::as_i32(1i32) as u8)?;
                        let SqlError {
                            code_numeric: code_numeric22,
                            code_text: code_text22,
                            message: message22,
                            extra: extra22,
                        } = e;
                        match code_numeric22 {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg3 + 4,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                caller_memory.store(
                                    arg3 + 8,
                                    wit_bindgen_wasmtime::rt::as_i32(
                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                    ),
                                )?;
                            }
                            None => {
                                let e = ();
                                {
                                    caller_memory.store(
                                        arg3 + 4,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                        match code_text22 {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg3 + 12,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                let vec23 = e;
                                let ptr23 = func_canonical_abi_realloc
                                    .call(&mut caller, (0, 0, 1, vec23.len() as i32))?;
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store_many(ptr23, vec23.as_bytes())?;
                                caller_memory.store(
                                    arg3 + 20,
                                    wit_bindgen_wasmtime::rt::as_i32(vec23.len() as i32),
                                )?;
                                caller_memory
                                    .store(arg3 + 16, wit_bindgen_wasmtime::rt::as_i32(ptr23))?;
                            }
                            None => {
                                let e = ();
                                {
                                    let (caller_memory, data) =
                                        memory.data_and_store_mut(&mut caller);
                                    let (_, _tables) = get(data);
                                    caller_memory.store(
                                        arg3 + 12,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                        let vec24 = message22;
                        let ptr24 = func_canonical_abi_realloc
                            .call(&mut caller, (0, 0, 1, vec24.len() as i32))?;
                        let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                        let (_, _tables) = get(data);
                        caller_memory.store_many(ptr24, vec24.as_bytes())?;
                        caller_memory.store(
                            arg3 + 28,
                            wit_bindgen_wasmtime::rt::as_i32(vec24.len() as i32),
                        )?;
                        caller_memory.store(arg3 + 24, wit_bindgen_wasmtime::rt::as_i32(ptr24))?;
                        match extra22 {
                            Some(e) => {
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory.store(
                                    arg3 + 32,
                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                )?;
                                let vec30 = e;
                                let len30 = vec30.len() as i32;
                                let result30 = func_canonical_abi_realloc
                                    .call(&mut caller, (0, 0, 8, len30 * 24))?;
                                for (i, e) in vec30.into_iter().enumerate() {
                                    let base = result30 + (i as i32) * 24;
                                    {
                                        let ValueMapItemResult {
                                            key: key25,
                                            value: value25,
                                        } = e;
                                        let vec26 = key25;
                                        let ptr26 = func_canonical_abi_realloc
                                            .call(&mut caller, (0, 0, 1, vec26.len() as i32))?;
                                        let (caller_memory, data) =
                                            memory.data_and_store_mut(&mut caller);
                                        let (_, _tables) = get(data);
                                        caller_memory.store_many(ptr26, vec26.as_bytes())?;
                                        caller_memory.store(
                                            base + 4,
                                            wit_bindgen_wasmtime::rt::as_i32(vec26.len() as i32),
                                        )?;
                                        caller_memory.store(
                                            base + 0,
                                            wit_bindgen_wasmtime::rt::as_i32(ptr26),
                                        )?;
                                        match value25 {
                                            ValueResult::Null => {
                                                let e = ();
                                                {
                                                    caller_memory.store(
                                                        base + 8,
                                                        wit_bindgen_wasmtime::rt::as_i32(0i32)
                                                            as u8,
                                                    )?;
                                                    let () = e;
                                                }
                                            }
                                            ValueResult::Boolean(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(1i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(match e {
                                                        true => 1,
                                                        false => 0,
                                                    })
                                                        as u8,
                                                )?;
                                            }
                                            ValueResult::Int8(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(2i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u8,
                                                )?;
                                            }
                                            ValueResult::Int16(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(3i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u16,
                                                )?;
                                            }
                                            ValueResult::Int32(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(4i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Int64(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(5i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i64(
                                                        wit_bindgen_wasmtime::rt::as_i64(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Uint8(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(6i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u8,
                                                )?;
                                            }
                                            ValueResult::Uint16(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(7i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    )
                                                        as u16,
                                                )?;
                                            }
                                            ValueResult::Uint32(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(8i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        wit_bindgen_wasmtime::rt::as_i32(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Uint64(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(9i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i64(
                                                        wit_bindgen_wasmtime::rt::as_i64(e),
                                                    ),
                                                )?;
                                            }
                                            ValueResult::Floating32(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(10i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_f32(e),
                                                )?;
                                            }
                                            ValueResult::Floating64(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(11i32) as u8,
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_f64(e),
                                                )?;
                                            }
                                            ValueResult::Str(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(12i32) as u8,
                                                )?;
                                                let vec27 = e;
                                                let ptr27 = func_canonical_abi_realloc.call(
                                                    &mut caller,
                                                    (0, 0, 1, vec27.len() as i32),
                                                )?;
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory
                                                    .store_many(ptr27, vec27.as_bytes())?;
                                                caller_memory.store(
                                                    base + 20,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        vec27.len() as i32
                                                    ),
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(ptr27),
                                                )?;
                                            }
                                            ValueResult::Bytes(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(13i32) as u8,
                                                )?;
                                                let vec28 = e;
                                                let ptr28 = func_canonical_abi_realloc.call(
                                                    &mut caller,
                                                    (0, 0, 1, (vec28.len() as i32) * 1),
                                                )?;
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store_many(ptr28, &vec28)?;
                                                caller_memory.store(
                                                    base + 20,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        vec28.len() as i32
                                                    ),
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(ptr28),
                                                )?;
                                            }
                                            ValueResult::Raw(e) => {
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store(
                                                    base + 8,
                                                    wit_bindgen_wasmtime::rt::as_i32(14i32) as u8,
                                                )?;
                                                let vec29 = e;
                                                let ptr29 = func_canonical_abi_realloc.call(
                                                    &mut caller,
                                                    (0, 0, 1, (vec29.len() as i32) * 1),
                                                )?;
                                                let (caller_memory, data) =
                                                    memory.data_and_store_mut(&mut caller);
                                                let (_, _tables) = get(data);
                                                caller_memory.store_many(ptr29, &vec29)?;
                                                caller_memory.store(
                                                    base + 20,
                                                    wit_bindgen_wasmtime::rt::as_i32(
                                                        vec29.len() as i32
                                                    ),
                                                )?;
                                                caller_memory.store(
                                                    base + 16,
                                                    wit_bindgen_wasmtime::rt::as_i32(ptr29),
                                                )?;
                                            }
                                        };
                                    }
                                }
                                let (caller_memory, data) = memory.data_and_store_mut(&mut caller);
                                let (_, _tables) = get(data);
                                caller_memory
                                    .store(arg3 + 40, wit_bindgen_wasmtime::rt::as_i32(len30))?;
                                caller_memory
                                    .store(arg3 + 36, wit_bindgen_wasmtime::rt::as_i32(result30))?;
                            }
                            None => {
                                let e = ();
                                {
                                    caller_memory.store(
                                        arg3 + 32,
                                        wit_bindgen_wasmtime::rt::as_i32(0i32) as u8,
                                    )?;
                                    let () = e;
                                }
                            }
                        };
                    }
                };
                Ok(())
            },
        )?;
        linker.func_wrap(
            "canonical_abi",
            "resource_drop_connection",
            move |mut caller: wasmtime::Caller<'_, T>, handle: u32| {
                let (host, tables) = get(caller.data_mut());
                let handle = tables
                    .connection_table
                    .remove(handle)
                    .map_err(|e| wasmtime::Trap::new(format!("failed to remove handle: {}", e)))?;
                host.drop_connection(handle);
                Ok(())
            },
        )?;
        linker.func_wrap(
            "canonical_abi",
            "resource_drop_db",
            move |mut caller: wasmtime::Caller<'_, T>, handle: u32| {
                let (host, tables) = get(caller.data_mut());
                let handle = tables
                    .db_table
                    .remove(handle)
                    .map_err(|e| wasmtime::Trap::new(format!("failed to remove handle: {}", e)))?;
                host.drop_db(handle);
                Ok(())
            },
        )?;
        linker.func_wrap(
            "canonical_abi",
            "resource_drop_driver",
            move |mut caller: wasmtime::Caller<'_, T>, handle: u32| {
                let (host, tables) = get(caller.data_mut());
                let handle = tables
                    .driver_table
                    .remove(handle)
                    .map_err(|e| wasmtime::Trap::new(format!("failed to remove handle: {}", e)))?;
                host.drop_driver(handle);
                Ok(())
            },
        )?;
        linker.func_wrap(
            "canonical_abi",
            "resource_drop_prepared-statement",
            move |mut caller: wasmtime::Caller<'_, T>, handle: u32| {
                let (host, tables) = get(caller.data_mut());
                let handle = tables
                    .prepared_statement_table
                    .remove(handle)
                    .map_err(|e| wasmtime::Trap::new(format!("failed to remove handle: {}", e)))?;
                host.drop_prepared_statement(handle);
                Ok(())
            },
        )?;
        linker.func_wrap(
            "canonical_abi",
            "resource_drop_row",
            move |mut caller: wasmtime::Caller<'_, T>, handle: u32| {
                let (host, tables) = get(caller.data_mut());
                let handle = tables
                    .row_table
                    .remove(handle)
                    .map_err(|e| wasmtime::Trap::new(format!("failed to remove handle: {}", e)))?;
                host.drop_row(handle);
                Ok(())
            },
        )?;
        linker.func_wrap(
            "canonical_abi",
            "resource_drop_rows",
            move |mut caller: wasmtime::Caller<'_, T>, handle: u32| {
                let (host, tables) = get(caller.data_mut());
                let handle = tables
                    .rows_table
                    .remove(handle)
                    .map_err(|e| wasmtime::Trap::new(format!("failed to remove handle: {}", e)))?;
                host.drop_rows(handle);
                Ok(())
            },
        )?;
        Ok(())
    }
    use core::convert::TryFrom;
    use wit_bindgen_wasmtime::rt::bad_int;
    use wit_bindgen_wasmtime::rt::invalid_variant;
    use wit_bindgen_wasmtime::rt::RawMem;
}
